<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quanfita&#39;s Blogs</title>
  
  <subtitle>Eloim Essaim Eloim Essaim</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://quanfita.cn/"/>
  <updated>2018-02-08T09:46:30.939Z</updated>
  <id>http://quanfita.cn/</id>
  
  <author>
    <name>Quanfita</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPSR协议的NS2仿真全过程（环境+实验）</title>
    <link href="http://quanfita.cn/2018/02/07/GPSR_NS2/"/>
    <id>http://quanfita.cn/2018/02/07/GPSR_NS2/</id>
    <published>2018-02-07T03:16:34.798Z</published>
    <updated>2018-02-08T09:46:30.939Z</updated>
    
    <content type="html"><![CDATA[<p>前些日子帮老师做了个NS2仿真的小项目，现在项目做完了，写篇博客把流程记录下来。做项目时，NS2和GPSR相关的东西找了好久，总会遇到问题，希望我这篇博客能给广大同学们带来点帮助吧。</p><hr><h2 id="NS2环境搭建"><a href="#NS2环境搭建" class="headerlink" title="NS2环境搭建"></a>NS2环境搭建</h2><h3 id="软硬件环境概述"><a href="#软硬件环境概述" class="headerlink" title="软硬件环境概述"></a>软硬件环境概述</h3><ul><li>Windows10(x64)</li><li>VMware Workstation Pro 12.5</li><li>LinuxMint 18.1</li><li>ns-allinone-2.35</li></ul><h3 id="环境搭建过程"><a href="#环境搭建过程" class="headerlink" title="环境搭建过程"></a>环境搭建过程</h3><p>首先，在官网下载ns-allinone-2.35.tar.gz压缩包(<a href="http://sourceforge.net/projects/nsnam/files/allinone/ns-allinone-2.35/ns-allinone-2.35.tar.gz/download" target="_blank" rel="noopener">http://sourceforge.net/projects/nsnam/files/allinone/ns-allinone-2.35/ns-allinone-2.35.tar.gz/download</a>)，再下载GPSR源码，我选择的是CSDN上的KeLiu版(<a href="http://download.csdn.net/download/joanna_yan/8474651" target="_blank" rel="noopener">http://download.csdn.net/download/joanna_yan/8474651</a>)。</p><h4 id="NS2安装"><a href="#NS2安装" class="headerlink" title="NS2安装"></a>NS2安装</h4><p>按Ctrl+Alt+T，打开终端</p><p>依次输入</p><blockquote><p> sudo apt-get update</p><p>  sudo apt-get upgrade</p><p>  sudo apt-get install build-essential</p><p>  sudo apt-get install tcl8.5 tcl8.5-dev tk8.5 tk8.5-dev </p><p>  sudo apt-get install libxmu-dev libxmu-headers</p><p> tar xvfz ns-allinone-2.35.tar.gz</p><p> cd ns-allinone-2.35</p><p>  sudo ./install</p></blockquote><p>在安装的时候会报个错，这是由于源码gcc版本比较老<br><img src="http://img.blog.csdn.net/20180124093026094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>修改只要在linkstate/ls.h文件137行<br><img src="http://img.blog.csdn.net/20180124093059525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>修改成<br><img src="http://img.blog.csdn.net/20180124093136166?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> 然后重新安装<br><img src="http://img.blog.csdn.net/20180124093158307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>如上图所示，这样就安装成功了。</p><p>然后我们需要配置环境变量，否则无法启动。</p><blockquote><p> sudo gedit /home/(用户名)/.bashrc</p></blockquote><p>在最后加上下面语句，用户名换成自己的即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:/home/(用户名)/ns-allinone-2.35/bin:/home/(用户名)/ns-allinone-2.35/tcl8.5.10/unix:/home/(用户名)/ns-allinone-2.35/tk8.5.10/unix"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"<span class="variable">$LD_LIBRARY_PATH</span>:/home/(用户名)/ns-allinone-2.35/otcl-1.14:/home/(用户名)/ns-allinone-2.35/lib"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TCL_LIBRARY=<span class="string">"<span class="variable">$TCL_LIBRARY</span>:/home/(用户名)/ns-allinone-2.35/tcl8.5.10/library"</span></span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20180124093244398?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br> 修改完毕，保存，关闭当前终端，再打开一个新的终端，输入ns，回车，如果显示一个%，就证明ns2安装成功了。<br><img src="http://img.blog.csdn.net/20180124093339264?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="NAM安装"><a href="#NAM安装" class="headerlink" title="NAM安装"></a>NAM安装</h4><p>终端输入nam，如果能够出现nam的窗口则nam可以正常使用，如果提示nam没有安装或者是不能识别的命令，cd /home/ns-allinone-2.35/nam.1.15，ls看看是否有nam文件，如果有的话cp nam ../bin，把nam命令复制到bin中。如果没有的话，sudo ./configure，再sudo make，现在得到了nam，再把nam命令复制到bin中。 接着在终端输入nam检验是否可以运行。</p><hr><h2 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h2><h3 id="添加GPSR协议"><a href="#添加GPSR协议" class="headerlink" title="添加GPSR协议"></a>添加GPSR协议</h3><p>我们搭建好了NS2仿真平台，现在就可以把我们准备好的协议源码解压，放到ns-2.35目录下，然后对ns2的代码进行修改，使我们的协议可以正常运行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 进入$HOME/ns-allinone<span class="number">-2.30</span>/ns<span class="number">-2.30</span>/common,修改packet.h</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="keyword">packet_t</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//增加 PT_GPSR  </span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">p_info</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加 name_[PT_GPSR]= “gpsr”</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 进入$HOME/ns-allinone<span class="number">-2.30</span>/ns<span class="number">-2.30</span>/trace,修改 cmu-trace.cc</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> CMUTrace::format(Packet* p, <span class="keyword">const</span> <span class="keyword">char</span> *why) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//增加 case PT_GPSR;</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 进入$HOME/ns-allinone<span class="number">-2.30</span>/ns<span class="number">-2.30</span>/<span class="built_in">queue</span>，修改priqueue.cc</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>  PriQueue::recv(Packet *p, Handler *h) </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加  case PT_GPSR:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.</span> 进入$HOME/ns-allinone<span class="number">-2.30</span>/ns<span class="number">-2.30</span>/tcl/lib,修改ns-packet.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> prot&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">   #增加GPSR</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">5. 进入$HOME/ns-allinone-2.30/ns-2.30/ ，修改Makefile</span><br><span class="line"></span><br><span class="line">OBJ_STL = <span class="comment">#最后按照格式加入（ gpsr前为TAB键而不是空格）</span></span><br><span class="line"></span><br><span class="line"> gpsr/gpsr_neighbor.o\</span><br><span class="line"></span><br><span class="line"> gpsr/gpsr_sinklist.o\</span><br><span class="line"></span><br><span class="line"> gpsr/gpsr.o</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要加入调试信息，则在CCOPT =  -Wall 加上 -g,  如下：</span></span><br><span class="line"></span><br><span class="line"> CCOPT =  -g  -Wall</span><br></pre></td></tr></table></figure><blockquote><p> 6.重新编译，执行如下命令</p><p>   cd $HOME/ns-allinone-2.30/ns-2.30/common</p><p>   touch packet.cc</p><p>   cd ..</p><p>   sudo make clean</p><p>   sudo make</p></blockquote><h3 id="修改协议源码"><a href="#修改协议源码" class="headerlink" title="修改协议源码"></a>修改协议源码</h3><p>在仿真过程中，发现KeLiu版GPSR协议在移动场景下存在一些问题，我们进行如下修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、gpsr.h文件：</span><br><span class="line"></span><br><span class="line"><span class="number">90</span>行左右：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GPSRUpdateSinkLocTimer</span> :</span> publicTimerHandler &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> GPSRUpdateSinkLocTimer(GPSRAgent *a) : TimerHandler() &#123;a_=a;&#125; &lt;---这<span class="number">7</span>行</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(Event *e)</span></span>;</span><br><span class="line"></span><br><span class="line"> GPSRAgent *a_;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GPSRQueryTimer</span> :</span> <span class="keyword">public</span> TimerHandler&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> GPSRQueryTimer(GPSRAgent *a) : TimerHandler() &#123;a_=a;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(Event *e)</span></span>;</span><br><span class="line"></span><br><span class="line"> GPSRAgent *a_;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">106</span>行左右：</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSRHelloTimer</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSRQueryTimer</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GPSRUpdateSinkLocTimer</span>;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> MobileNode *node_;            <span class="comment">//the attached mobile node</span></span><br><span class="line"></span><br><span class="line"> PortClassifier *port_dmux_;   <span class="comment">//for the higher layer app de-multiplexing</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">125</span>行左右：</span><br><span class="line"></span><br><span class="line">GPSRHelloTimer hello_timer_;</span><br><span class="line"></span><br><span class="line"> GPSRQueryTimer query_timer_;</span><br><span class="line"></span><br><span class="line"> GPSRUpdateSinkLocTimer update_sink_loc_timer_; &lt;---这行</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  intplanar_type_; <span class="comment">//1=GG planarize, 0=RNG planarize</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> hello_period_;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> query_period_;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> start_update_time_; &lt;---</span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> update_sink_loc_period_; &lt;---这<span class="number">2</span>行</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">turnon</span><span class="params">()</span></span>;              <span class="comment">//setto be alive</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">turnoff</span><span class="params">()</span></span>;             <span class="comment">//setto be dead</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">startSink</span><span class="params">()</span></span>;          </span><br><span class="line"></span><br><span class="line">  voidstartSink(<span class="keyword">double</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">165</span>行左右：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hellotout</span><span class="params">()</span></span>;                <span class="comment">//called bytimer::expire(Event*)</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">querytout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">updatesinkloctout</span><span class="params">()</span></span>; &lt;---这行</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> GPSRAgent();</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、gpsr.cc文件：</span><br><span class="line"></span><br><span class="line"><span class="number">70</span>行左右：</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRQueryTimer::expire(Event *e)&#123;</span><br><span class="line"></span><br><span class="line"> a_-&gt;querytout();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRUpdateSinkLocTimer::expire(Event *e)&#123;</span><br><span class="line"></span><br><span class="line"> a_-&gt;updatesinkloctout();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRAgent::hellotout()&#123;</span><br><span class="line"></span><br><span class="line"> getLoc();</span><br><span class="line"></span><br><span class="line"> nblist-&gt;myinfo(my_id,my_x,my_y);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sink_list-&gt;update_sink_loc(my_id,my_x,my_y);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%f\n",node_-&gt;speed());</span></span><br><span class="line"></span><br><span class="line"> hellomsg();</span><br><span class="line"></span><br><span class="line"> hello_timer.resched(hello_period);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> </span><br><span class="line"></span><br><span class="line">GPSRAgent::updatesinkloctout()&#123;</span><br><span class="line"></span><br><span class="line"> getLoc();</span><br><span class="line"></span><br><span class="line"> sink_list-&gt;update_sink_loc(my_id,my_x,my_y);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//printf("__\n");</span></span><br><span class="line"></span><br><span class="line"> update_sink_loc_timer.resched(update_sink_loc_period);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRAgent::startSink()&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(sink_list-&gt;new_sink(my_id, my_x, my_y, </span><br><span class="line"></span><br><span class="line"> my_id, <span class="number">0</span>, query_counter))</span><br><span class="line"></span><br><span class="line">   querytout();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">119</span>行左右：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GPSRAgent::GPSRAgent() : Agent(PT_GPSR), </span><br><span class="line"></span><br><span class="line">   hello_timer(<span class="keyword">this</span>), query_timer(<span class="keyword">this</span>),</span><br><span class="line"></span><br><span class="line">update_sink_loc_timer_(<span class="keyword">this</span>),</span><br><span class="line"></span><br><span class="line">   my_id(<span class="number">-1</span>), my_x(<span class="number">0.0</span>), my_y_(<span class="number">0.0</span>),</span><br><span class="line"></span><br><span class="line">   recv_counter(<span class="number">0</span>), query_counter(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">   query_period_(INFINITE_DELAY)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> bind(<span class="string">"planar_type"</span>, &amp;planar_type);  </span><br><span class="line"></span><br><span class="line"> bind(<span class="string">"hello_period"</span>, &amp;hello_period);</span><br><span class="line"></span><br><span class="line"> bind(<span class="string">"update_sink_loc_period"</span>, &amp;update_sink_loc_period);</span><br><span class="line"></span><br><span class="line"> sink_list_ = <span class="keyword">new</span> Sinks();</span><br><span class="line"></span><br><span class="line"> nblist_ = <span class="keyword">new</span> GPSRNeighbors();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line"></span><br><span class="line">   randSend_.reset_next_substream();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRAgent::turnon()&#123;</span><br><span class="line"></span><br><span class="line"> getLoc();</span><br><span class="line"></span><br><span class="line"> nblist-&gt;myinfo(my_id, my_x, my_y);</span><br><span class="line"></span><br><span class="line"> hello_timer.resched(randSend.uniform(<span class="number">0.0</span>, <span class="number">0.5</span>));</span><br><span class="line"></span><br><span class="line"> update_sink_loc_timer.resched(start_update_time);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">GPSRAgent::turnoff()&#123;</span><br><span class="line"></span><br><span class="line"> hello_timer_.resched(INFINITE_DELAY);</span><br><span class="line"></span><br><span class="line"> query_timer_.resched(INFINITE_DELAY);</span><br><span class="line"></span><br><span class="line"> update_sink_loc_timer_.resched(INFINITE_DELAY);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、gpsr_sinklist.h文件中：</span><br><span class="line"></span><br><span class="line"><span class="number">55</span>行：</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sinks</span> &#123;</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sink_entry</span> *<span class="title">sinklist_</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"> Sinks();</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">new_sink</span><span class="params">(<span class="keyword">nsaddr_t</span>, <span class="keyword">double</span>, <span class="keyword">double</span>, <span class="keyword">nsaddr_t</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">update_sink_loc</span><span class="params">(<span class="keyword">nsaddr_t</span>, <span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">remove_sink</span><span class="params">(<span class="keyword">nsaddr_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">getLocbyID</span><span class="params">(<span class="keyword">nsaddr_t</span>, <span class="keyword">double</span>&amp;, <span class="keyword">double</span>&amp;, <span class="keyword">int</span>&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">dump</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、gpsr_sinklist.cc中：</span><br><span class="line"></span><br><span class="line"><span class="number">74</span>行：</span><br><span class="line"></span><br><span class="line"> temp-&gt;next_ = sinklist_;</span><br><span class="line"></span><br><span class="line"> sinklist_ = temp;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">Sinks::update_sink_loc(<span class="keyword">nsaddr_t</span> id,doublex,<span class="keyword">double</span> y)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sink_entry</span> *<span class="title">temp</span> = <span class="title">sinklist_</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(temp)&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(temp-&gt;id_ == id)&#123;</span><br><span class="line"></span><br><span class="line"> temp-&gt;x_ = x;</span><br><span class="line"></span><br><span class="line"> temp-&gt;y_ = y;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   temp = temp-&gt;next_;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">Sinks::remove_sink(<span class="keyword">nsaddr_t</span> id)&#123;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sink_entry</span> *<span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sink_entry</span> *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br></pre></td></tr></table></figure><p>修改完成后重新编译NS2。 </p><p>但是NAM还是有问题，这里是自带的TCL文件的问题，做如下修改就可以了：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">61</span>行左右：</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(tr) <span class="keyword">trace</span>.tr <span class="comment">;# trace file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(nam)            gpsr.nam &lt;---这里</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(rp)             gpsr <span class="comment">;# routing protocol script(dsr or dsdv)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(lm)             <span class="string">"off"</span> <span class="comment">;# log movement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">117</span>行左右：（修改比较多，行数不准）</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent/GPSR setting</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> planar_type_  <span class="number">1</span>  <span class="comment">;#1=GG planarize, 0=RNG planarize</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> hello_period_   <span class="number">1.5</span> <span class="comment">;#Hello message period</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> update_sink_loc_period_ <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> start_update_time_ <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#======================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="number">159</span>行左右：</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> tracefd [<span class="keyword">open</span> $opt(tr) w]</span><br><span class="line"></span><br><span class="line">ns_ <span class="keyword">trace</span>-all  tracefd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> namfile [<span class="keyword">open</span> $opt(nam) w]</span><br><span class="line"></span><br><span class="line">ns_ namtrace-all-wireless namfile opt(x)opt(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">topo load_flatgrid opt(x) $opt(y)</span><br><span class="line"></span><br><span class="line">prop topography topo</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="number">197</span>行左右：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ./gpsr.tcl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn) &#125; &#123;<span class="keyword">incr</span> i&#125;&#123;</span><br><span class="line"></span><br><span class="line">   gpsr-create-mobile-node $i</span><br><span class="line"></span><br><span class="line">   ns_ initial_node_pos node_($i) <span class="number">20</span></span><br><span class="line"></span><br><span class="line">   node_(i) namattach $namfile</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"><span class="comment"># Source the Connection and Movementscripts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">下面是CBR和场景文件的问题：给个简单的<span class="number">3</span>个节点的例子，在<span class="keyword">trace</span>文件中可以看到数据包的转发和接收</span><br><span class="line"></span><br><span class="line">cbr文件：</span><br><span class="line"></span><br><span class="line"><span class="comment"># GPSR routing agent settings</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn)&#125; &#123;<span class="keyword">incr</span> i&#125; &#123;</span><br><span class="line"></span><br><span class="line">   ns_ at <span class="number">0.00002</span> <span class="string">"ragent_($i) turnon"</span></span><br><span class="line"></span><br><span class="line">   ns_ at <span class="number">2.0</span> <span class="string">"ragent_($i) neighborlist"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   ns_ at 30.0 "ragent_($i) turnoff"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ns_ at <span class="number">11.2</span> <span class="string">"ragent_(2) startSink10.0"</span>   #&lt;---这里只要让目标节点startSink就可以，例子是<span class="number">0</span>向<span class="number">2</span>发</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> null_(<span class="number">1</span>) [new Agent/Null]</span><br><span class="line"></span><br><span class="line">ns_ attach-agent node(<span class="number">2</span>) $null(1)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> udp_(<span class="number">1</span>) [new Agent/UDP]</span><br><span class="line"></span><br><span class="line">ns_ attach-agent node(<span class="number">0</span>) $udp(1)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> cbr_(<span class="number">1</span>) [new Application/Traffic/CBR]</span><br><span class="line"></span><br><span class="line">$cbr(1) <span class="keyword">set</span> packetSize <span class="number">32</span></span><br><span class="line"></span><br><span class="line">$cbr(1) <span class="keyword">set</span> interval <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">$cbr(1) <span class="keyword">set</span> random <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   $cbr(1) set maxpkts 100</span></span><br><span class="line"></span><br><span class="line">cbr_(<span class="number">1</span>) attach-agent udp_(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ns_ connect udp(<span class="number">1</span>) $null(1)</span><br><span class="line"></span><br><span class="line">ns_ at <span class="number">66.0</span> <span class="string">"cbr_(1) start"</span></span><br><span class="line"></span><br><span class="line">ns_ at <span class="number">150.0</span> <span class="string">"cbr_(1) stop"</span></span><br></pre></td></tr></table></figure><h3 id="修改底层协议为802-11p"><a href="#修改底层协议为802-11p" class="headerlink" title="修改底层协议为802.11p"></a>修改底层协议为802.11p</h3><p>GPSR是路由协议，也就是工作在网络层的，底层的协议默认应该是IEEE802.11。应该用IEEE802.11p，这个才是针在ns-allinone-2.35/ns-2.35/tcl/ex/802.11目录下找到了IEEE802-11p.tcl文件，里面的设置都是符合IEEE802.11p协议的参数对车载自组网的协议。</p><p>所以在wireless-gpsr.tcl中把其他的MAC层和物理层的设置都注释掉，换上IEEE802.11p的设置：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">94</span>行左右：</span><br><span class="line"><span class="comment">#Phy/WirelessPhy set CPThresh_ 10.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set CSThresh_ 1.559e-11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set RXThresh_ 3.652e-10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Rb_ 2*1e6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set freq_ 914e+6 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set L_ 1.0</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># The transimssion radio range </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Pt_ 6.9872e-4    ;# ?m</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Pt_ 8.5872e-4    ;# 40m</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Pt_ 1.33826e-3   ;# 50m</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Pt_ 7.214e-3     ;# 100m</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Phy/WirelessPhy set Pt_ 0.2818       ;# 250m</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#802.11p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"Loading IEEE802.11pconfiguration..."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ../tcl/ex/<span class="number">802.11</span>/IEEE802<span class="number">-11</span>p.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"Load complete..."</span></span><br></pre></td></tr></table></figure><h3 id="修改无线传输范围"><a href="#修改无线传输范围" class="headerlink" title="修改无线传输范围"></a>修改无线传输范围</h3><p>ns-2.35/indep-utils/propagation/下有个threshold工具，可以通过距离、功率等等条件算出这些参数。</p><p>我们要先对threshold.cc文件进行修改</p><p>#include “iostream.h”  修改为#include “iostream”，同时加上using namespace std;</p><p>再添加头文件：#include “cstring”</p><p>在当前目录终端输入命令，进行编译：</p><blockquote><p> cd ns/indep-utils/propagation/<br> g++ -lm threshold.cc -o threshold</p></blockquote><p>编译成功生成threshold文件<br><img src="http://img.blog.csdn.net/20180124093707890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>这时我们利用threshold工具就可以得到我们需要的RXThresh的值了。</p><blockquote><p> ./threshold -m TwoRayGround -r 1 550</p></blockquote><p><img src="http://img.blog.csdn.net/20180124093744180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>这就是我们需要的RXThresh数值，将我们新得到的数值替换之前的数值，即可改变我们无线传输的范围了。</p><p>参数设置好后，我们就可以开始仿真实验了。（中途我还修改了协议其他地方的代码，涉及到项目内容，在此不过多赘述，所以后面的数据跟GPSR协议本身跑出来的数据不大一样）</p><h3 id="setdest生成随机场景"><a href="#setdest生成随机场景" class="headerlink" title="setdest生成随机场景"></a>setdest生成随机场景</h3><p>setdest可以随机产生无线网络仿真所需要的移动场景。</p><p>setdest程序放在 ns-2.35/indep-utils/cmu-scen-gen/setdest/目录下</p><p>usage：setdest [-nnodes][-p pause][-M maxrate][-t time][-x x][-y y]</p><p>我们需要50个节点，最大速度10m/s，持续时间20s，场景长250，宽200</p><blockquote><p> ./setdest -n 50-p 0.0 -M 10.0 -t 20 -x 250 -y 200 &gt;scen_50_0_10_20_25_20</p></blockquote><h3 id="cbrgen生成数据流"><a href="#cbrgen生成数据流" class="headerlink" title="cbrgen生成数据流"></a>cbrgen生成数据流</h3><p>cbrgen工具在ns-2.35/indep-utils/cmu-scen-gen/目录下</p><p>usage：cbrgen.tcl [-type cbr][-nn nodes][-seed seed][-mcconnections][-rate rate]</p><p>我们此时有50个节点，需要一组数据流所以，输入：</p><blockquote><p>ns cbrgen.tcl -type cbr -nn 50 -seed 1 -mc 1-rate 1.0 &gt; cbr_n50_m1_r1</p></blockquote><h3 id="重新编写tcl脚本"><a href="#重新编写tcl脚本" class="headerlink" title="重新编写tcl脚本"></a>重新编写tcl脚本</h3><p>现在，我们把仿真需要的场景，数据流都准备好了，我们把生成的场景文件移动到gpsr协议的文件夹中，再次修改tcl脚本</p><p>添加：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> scen_50_0_10_20_25_20</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> cbr_n50_m1_r1</span><br></pre></td></tr></table></figure><p>修改完的脚本是这个样子的(这里我另存为gpsr-wireless.tcl文件)：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> opt(<span class="keyword">chan</span>) Channel/WirelessChannel</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(prop) Propagation/TwoRayGround</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(netif) Phy/WirelessPhy</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(mac) Mac/<span class="number">802</span>_11</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(ifq) Queue/DropTail/PriQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(ll) LL </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(ant) Antenna/OmniAntenna</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(x) <span class="number">250</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(y) <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(ifqlen) <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(nn) <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(seed) <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(stop) <span class="number">20.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(tr) <span class="keyword">trace</span>.tr</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(nam) out.nam</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(rp) gpsr</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> opt(lm) <span class="string">"off"</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">LL <span class="keyword">set</span> mindelay_          <span class="number">50</span>us</span><br><span class="line"></span><br><span class="line">LL <span class="keyword">set</span> delay_                <span class="number">25</span>us</span><br><span class="line"></span><br><span class="line">LL <span class="keyword">set</span> bandwidth_       <span class="number">0</span>     <span class="comment">;# not used</span></span><br><span class="line"></span><br><span class="line">Agent/Null <span class="keyword">set</span> sport_          <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/Null <span class="keyword">set</span> dport_         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/CBR <span class="keyword">set</span> sport_          <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/CBR <span class="keyword">set</span> dport_         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/UDP <span class="keyword">set</span> sport_         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/UDP <span class="keyword">set</span> dport_         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Agent/UDP <span class="keyword">set</span> packetSize_ <span class="number">1460</span></span><br><span class="line"></span><br><span class="line">Queue/DropTail/PriQueue setPrefer_Routing_Protocols    <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Antenna/OmniAntenna <span class="keyword">set</span> X_ <span class="number">200</span></span><br><span class="line"></span><br><span class="line">Antenna/OmniAntenna <span class="keyword">set</span> Y_ <span class="number">200</span></span><br><span class="line"></span><br><span class="line">Antenna/OmniAntenna <span class="keyword">set</span> Z_ <span class="number">1.5</span></span><br><span class="line"></span><br><span class="line">Antenna/OmniAntenna <span class="keyword">set</span> Gt_ <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Antenna/OmniAntenna <span class="keyword">set</span> Gr_ <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#802.11p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"Loading IEEE802.11pconfiguration..."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ../tcl/ex/<span class="number">802.11</span>/IEEE802<span class="number">-11</span>p.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"Load complete..."</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Agent/GPSR setting</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> planar_type_  <span class="number">1</span>  <span class="comment">;#1=GG planarize, 0=RNG planarize</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> hello_period_   <span class="number">5.0</span> <span class="comment">;#Hello message period</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> update_sink_loc_period_ <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">Agent/GPSR <span class="keyword">set</span> start_update_time_ <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ../tcl/lib/ns-bsnode.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ../tcl/mobility/com.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> ns_ [new Simulator]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">chan</span> [new $opt(chan)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> prop [new $opt(prop)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> topo [new Topography]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> tracefd [<span class="keyword">open</span> $opt(tr) w]</span><br><span class="line"></span><br><span class="line">ns_ <span class="keyword">trace</span>-all tracefd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> namfile [<span class="keyword">open</span> $opt(nam) w]</span><br><span class="line"></span><br><span class="line">ns_ namtrace-all-wireless namfile opt(x)opt(y)</span><br><span class="line"></span><br><span class="line">topo load_flatgrid opt(x) $opt(y)</span><br><span class="line"></span><br><span class="line">prop topography topo</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> god_ [create-god $opt(nn)]</span><br><span class="line"></span><br><span class="line">$ns_ node-config -adhocRouting gpsr \</span><br><span class="line"></span><br><span class="line">                 -llType $opt(ll) \</span><br><span class="line"></span><br><span class="line">                 -macType $opt(mac) \</span><br><span class="line"></span><br><span class="line">                 -ifqType $opt(ifq) \</span><br><span class="line"></span><br><span class="line">                -ifqLen $opt(ifqlen) \</span><br><span class="line"></span><br><span class="line">                 -antType $opt(ant) \</span><br><span class="line"></span><br><span class="line">                 -propType $opt(prop) \</span><br><span class="line"></span><br><span class="line">                 -phyType $opt(netif) \</span><br><span class="line"></span><br><span class="line">                 -channelType $opt(chan) \</span><br><span class="line"></span><br><span class="line">                 -topoInstance $topo \</span><br><span class="line"></span><br><span class="line">                 -agentTrace ON \</span><br><span class="line"></span><br><span class="line">                 -routerTrace ON \</span><br><span class="line"></span><br><span class="line">                 -macTrace OFF \</span><br><span class="line"></span><br><span class="line">                 -movementTrace OFF </span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ./gpsr.tcl</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn)&#125; &#123;<span class="keyword">incr</span> i&#125; &#123;</span><br><span class="line"></span><br><span class="line">       gpsr-create-mobile-node$i;</span><br><span class="line"></span><br><span class="line">       node_(i)namattach $namfile;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> scen_50_0_10_20_25_20</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> cbr_n50_m1_r1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn) &#125; &#123;<span class="keyword">incr</span> i&#125;&#123;</span><br><span class="line"></span><br><span class="line">   node_(i) namattach $namfile</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn)&#125; &#123;<span class="keyword">incr</span> i&#125; &#123;</span><br><span class="line"></span><br><span class="line">   ns_ initial_node_pos node_($i) <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;<span class="keyword">set</span> i <span class="number">0</span>&#125; &#123;i &lt; opt(nn)&#125; &#123;<span class="keyword">incr</span> i&#125; &#123;</span><br><span class="line"></span><br><span class="line">       ns_at opt(stop)<span class="number">.0</span> <span class="string">"node_(i) reset"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ns_ at opt(stop) <span class="string">"stop"</span></span><br><span class="line"></span><br><span class="line">ns_ at opt(stop)<span class="number">.01</span> <span class="string">"puts\"NSEXITING...\" ; $ns_ halt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">proc</span><span class="title"> stop</span> &#123;&#125; &#123;</span><br><span class="line"></span><br><span class="line">       globalns_ tracefd namfile</span><br><span class="line"></span><br><span class="line">       $ns_flush-<span class="keyword">trace</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">close</span>$tracefd</span><br><span class="line"></span><br><span class="line">       <span class="keyword">close</span>$namfile</span><br><span class="line"></span><br><span class="line">       exit0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> tracefd <span class="string">"M 0.0 nn opt(nn) xopt(x) y opt(y) rp $opt(rp)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> tracefd <span class="string">"M 0.0 prop opt(prop)ant $opt(ant)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">puts</span> <span class="string">"Starting Simulation..."</span></span><br><span class="line"></span><br><span class="line">$ns_ run</span><br></pre></td></tr></table></figure><p>我们在此目录中打开终端，输入</p><blockquote><p>ns gpsr-wireless.tcl</p></blockquote><p>如图所示<br><img src="http://img.blog.csdn.net/20180124093906171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>运行nam查看仿真状况</p><p>如图我们可以看到节点移动情况<br><img src="http://img.blog.csdn.net/20180124093948738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="trace文件分析"><a href="#trace文件分析" class="headerlink" title="trace文件分析"></a>trace文件分析</h3><p>下面是整个仿真过程最重要的部分，trace文件分析</p><p>投递率我使用的是grep工具</p><blockquote><p> grep “r.*AGT” trace.tr &gt; g_r</p><p> grep “s.*AGT” trace.tr &gt; g_s</p><p> wc g_?</p></blockquote><p>即可得到数据包的发送和接收情况：<br><img src="http://img.blog.csdn.net/20180124094042085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>然后，我们通过awk脚本来获取协议中的时延情况：</p><p>脚本代码如下：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#BEGIN表明这是程序开头执行的一段语句，且只执行一次。</span></span><br><span class="line"></span><br><span class="line">BEGIN &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序初始化，设定一变量以记录目前处理的封包的最大ID号码。在awk环境下变量的使用不需要声明，直接赋值。</span></span><br><span class="line"></span><br><span class="line">highest_uid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面大括号里面的内容会针对要进行处理的记录（也就是我们的trace文件）的每一行都重复执行一次</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">event = <span class="number">1</span><span class="comment">; #1表示一行的第一栏，是事件的动作。每一栏默认是以空格分隔的。下同。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">time</span> = $<span class="number">2</span><span class="comment">; #事件发生的时间</span></span><br><span class="line"></span><br><span class="line">node_nb = $<span class="number">3</span><span class="comment">; #发生事件的节点号（但是两边夹着“”，下面一句代码将“”处理掉）</span></span><br><span class="line"></span><br><span class="line">node_nb=substr(node_nb,<span class="number">2</span>,<span class="number">1</span>)<span class="comment">; #第三栏的内容是形如0的节点号码，我只要得出中间的节点号码0，所以要对字符串0进行处理。</span></span><br><span class="line"></span><br><span class="line">trace_type = $<span class="number">4</span><span class="comment">; #trace文件跟踪事件的层次（指在路由层或mac层等等） </span></span><br><span class="line"></span><br><span class="line">flag = $<span class="number">5</span><span class="comment">; #</span></span><br><span class="line"></span><br><span class="line">uid = $<span class="number">6</span><span class="comment">; #包的uid号码（普通包头的uid）</span></span><br><span class="line"></span><br><span class="line">pkt_type = $<span class="number">7</span><span class="comment">; #包的类型（是信令或是数据）</span></span><br><span class="line"></span><br><span class="line">pkt_size = $<span class="number">8</span><span class="comment">; #包的大小（byte）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面的代码记录目前最高的CBR流的packet ID，本来的延迟分析是针对所有的包的（包括信令），这里作了简化，只针对CBR封包，以后大家做延时分析可以做相应的改动即可。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( event==<span class="string">"s"</span> &amp;&amp;node_nb==<span class="number">0</span> &amp;&amp; pkt_type==<span class="string">"cbr"</span> &amp;&amp; uid &gt; highest_uid)</span><br><span class="line"></span><br><span class="line">&#123;#<span class="keyword">if</span>判断句的前三个判断条件就不说了，第四个是说每个包的记录次数不超过<span class="number">1</span></span><br><span class="line"></span><br><span class="line">highest_uid = uid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#记录封包的传送时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( event==<span class="string">"s"</span> &amp;&amp;node_nb==<span class="number">0</span> &amp;&amp; pkt_type==<span class="string">"cbr"</span> &amp;&amp; uid==highest_uid )</span><br><span class="line"></span><br><span class="line">start_time[uid] = <span class="keyword">time</span><span class="comment">; # start_time[]表明这是一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#记录封包的接收时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( event==<span class="string">"r"</span> &amp;&amp;node_nb ==<span class="number">2</span> &amp;&amp; pkt_type==<span class="string">"cbr"</span> &amp;&amp; uid==highest_uid )</span><br><span class="line"></span><br><span class="line">end_time[uid] = <span class="keyword">time</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#END表明这是程序结束前执行的语句，也只执行一次</span></span><br><span class="line"></span><br><span class="line">END &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">#当每行资料都读取完毕后，开始计算有效封包的端到端延迟时间。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( packet_id = <span class="number">0</span>; packet_id &lt;=highest_uid; packet_id++ )</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">start = start_time[packet_id];</span><br><span class="line"></span><br><span class="line">end = end_time[packet_id];</span><br><span class="line"></span><br><span class="line">packet_duration = end - start;</span><br><span class="line"></span><br><span class="line"><span class="comment">#只把接收时间大于传送时间的记录打印出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( start &lt; end ) printf(<span class="string">"%d%f\n"</span>, packet_id, packet_duration);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在终端输入命令：</p><blockquote><p> gawk -f delay.awk trace.tr &gt; delay.csv</p></blockquote><p>因为我本人熟悉Python语言，所以绘图我就用Python和matplotlib库来做了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">col = [<span class="string">'x'</span>,<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"delay.csv"</span>,names=col)</span><br><span class="line"></span><br><span class="line">x = data[<span class="string">'x'</span>]</span><br><span class="line"></span><br><span class="line">y = data[<span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'Time(s)'</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">'Transmission Speed(KB/s)'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'GPSR Analysis'</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">50</span>,<span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">0.0015</span>,<span class="number">0.0055</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x0,y0,color=<span class="string">'blue'</span>,linewidth=<span class="number">1.5</span>,linestyle=<span class="string">"-"</span>,label=<span class="string">'GPSR'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,color=<span class="string">'red'</span>,linewidth=<span class="number">1.5</span>,linestyle=<span class="string">"-"</span>,label=<span class="string">'NNGPSR'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>得到时延的图<br><img src="http://img.blog.csdn.net/20180124094135962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>至此，本次ns2实验就结束了。</p><p>这篇博客写的比较匆忙，如有错误，可评论区加以说明。</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><p><a href="http://blog.sina.com.cn/s/blog_414c2a9a01013r9e.html" target="_blank" rel="noopener">NS2笔记八gpsr移植</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_64ab4ef30101d9j3.html" target="_blank" rel="noopener">关于802.11p和场景文件</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_61893e6101018ad6.html" target="_blank" rel="noopener">NS2中cbrgen和setdest的使用</a></p></li><li><p><a href="http://blog.sina.com.cn/s/blog_64ab4ef30101d9i7.html" target="_blank" rel="noopener">GPSR源码修改</a></p></li><li><p><a href="https://www.cnblogs.com/licuncun/p/5304232.html" target="_blank" rel="noopener">ubuntu14.04LTS下搭建NS2实验环境</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前些日子帮老师做了个NS2仿真的小项目，现在项目做完了，写篇博客把流程记录下来。做项目时，NS2和GPSR相关的东西找了好久，总会遇到问题，希望我这篇博客能给广大同学们带来点帮助吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;NS2环境搭建&quot;&gt;&lt;a href=&quot;#NS2环境搭建&quot; 
      
    
    </summary>
    
      <category term="note" scheme="http://quanfita.cn/categories/note/"/>
    
    
      <category term="GPSR" scheme="http://quanfita.cn/tags/GPSR/"/>
    
      <category term="NS2" scheme="http://quanfita.cn/tags/NS2/"/>
    
  </entry>
  
  <entry>
    <title>GPSR协议概述</title>
    <link href="http://quanfita.cn/2018/02/06/GPSR_introduce/"/>
    <id>http://quanfita.cn/2018/02/06/GPSR_introduce/</id>
    <published>2018-02-06T15:49:07.877Z</published>
    <updated>2018-02-06T15:52:48.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-GPSR协议简介"><a href="#1-GPSR协议简介" class="headerlink" title="1.   GPSR协议简介"></a>1.   GPSR协议简介</h1><p>&emsp;&emsp;GPSR通过应用邻居节点和终点的地理位置，允许每个节点对全局路由分配做出决策。当一个节点以贪婪算法转发一个包时，它有比自己更接近终点的邻居节点，这个节点就选择距离终点最近的邻居节点来转发该包。当没有这种邻居节点时，数据包进入周围模式，将包向前传送给网络平面字图的临近节点，直到传到距离终点较近的节点，将包转发的方式为贪婪算法模式。</p><h1 id="2-GPSR协议流程"><a href="#2-GPSR协议流程" class="headerlink" title="2.   GPSR协议流程"></a>2.   GPSR协议流程</h1><p><img src="http://img.blog.csdn.net/20180124204504143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="3-协议源文件"><a href="#3-协议源文件" class="headerlink" title="3.   协议源文件"></a>3.   协议源文件</h1><blockquote><p>gpsr_packet.h : 定义不同类型的包</p><p>gpsr_neighbor.h : 定义该gpsr实现所使用的每个节点的邻居列表</p><p>gpsr_neighbor.cc : 邻居列表类的实现</p><p>gpsr.h : 该实现的GPSR路由代理函数的定义</p><p>gpsr.cc : GPSR路由代理的实现</p><p>gpsr_sinklist.h: 用于多个接收器的场景的定义</p><p>gpsr_sinklist.cc: 实现gpsr_sinklist.h</p></blockquote><h1 id="4-宏定义"><a href="#4-宏定义" class="headerlink" title="4.   宏定义"></a>4.   宏定义</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_GPSR_TIMEOUT   200.0<span class="comment">//生存时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIFINITE_DISTANCE   1000000000.0<span class="comment">//无穷大</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SINK_TRACE_FILE <span class="meta-string">"sink_trace.tr"</span><span class="comment">//sink_trace文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NB_TRACE_FILE <span class="meta-string">"gpsrnb_trace.tr"</span><span class="comment">//nb_trace文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSR_CURRENT Scheduler::instance().clock()<span class="comment">//计时器</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITE_DELAY 5000000000000.0<span class="comment">//无穷大</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSRTYPE_HELLO  0x01   <span class="comment">//hello msg</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSRTYPE_QUERY  0x02   <span class="comment">//query msg from the sink</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSRTYPE_DATA   0x04   <span class="comment">//the CBR data msg</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSR_MODE_GF    0x01   <span class="comment">//greedy forwarding mode</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GPSR_MODE_PERI  0x02   <span class="comment">//perimeter routing mode</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HDR_GPSR(p)   ((structhdr_gpsr*)hdr_gpsr::access(p))<span class="comment">//gpsr报头</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HDR_GPSR_HELLO(p) ((struct hdr_gpsr_hello*)hdr_gpsr::access(p))<span class="comment">//hello报头</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HDR_GPSR_QUERY(p) ((struct hdr_gpsr_query*)hdr_gpsr::access(p))<span class="comment">//query报头</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HDR_GPSR_DATA(p) ((struct hdr_gpsr_data*)hdr_gpsr::access(p))<span class="comment">//data报头</span></span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.141593<span class="comment">//PI</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b)(a&gt;=b?a:b)<span class="comment">//最大</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a, b)(a&gt;=b?b:a)<span class="comment">//最小</span></span></span><br></pre></td></tr></table></figure><h1 id="5-结构体"><a href="#5-结构体" class="headerlink" title="5.   结构体"></a>5.   结构体</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hdr_gpsr</span> //<span class="title">gpsr</span>报头</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">hdr_gpsr_hello</span> //<span class="title">hello</span>报头</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">hdr_gpsr_query</span> //<span class="title">query</span>报头</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">hdr_gpsr_data</span>//<span class="title">data</span>报头</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">union</span> <span class="title">hdr_all_gpsr</span>//总报头</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">gpsr_neighbor</span>//邻居</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">sink_entry</span>//数据接收器</span></span><br></pre></td></tr></table></figure><h1 id="6-类"><a href="#6-类" class="headerlink" title="6.   类"></a>6.   类</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sinks</span>            //<span class="title">sink</span>表维护一个数据接收器列表，它用于多个数据接收器，这不是<span class="title">GPSR</span>设计的一部分</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GPSRNeighbors</span>     //网络中每个节点的邻居列表</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GPSRAgent</span>        //<span class="title">GPSR</span>路由代理，定义路由代理、路由的方法(行为)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GPSRHelloTimer</span>:</span> <span class="keyword">public</span> TimerHandler     <span class="comment">//定时发送‘hello’信息</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GPSRQueryTimer</span>:</span> <span class="keyword">public</span> TimerHandler     <span class="comment">//数据接收器使用的查询计时器来触发数据查询。它不是GPSR路由设计的一部分。</span></span><br></pre></td></tr></table></figure><h1 id="7-相关函数"><a href="#7-相关函数" class="headerlink" title="7.   相关函数"></a>7.   相关函数</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> GPSRHelloTimer::expire(Event*e)       <span class="comment">//hello计时器计时方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRQueryTimer::expire(Event*e)       <span class="comment">//查询计时器计时方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRUpdateSinkLocTimer::expire(Event *e)   <span class="comment">//数据接收器更新计时器计时方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::hellotout()                <span class="comment">//侦查函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::updatesinkloctout()        <span class="comment">//数据接收器侦查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::startSink()                <span class="comment">//开始接受数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::startSink(doublegp)        <span class="comment">//开始接受数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::querytout()            <span class="comment">//查询侦查</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::getLoc()               <span class="comment">//获取位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::GetLocation(<span class="keyword">double</span> *x, <span class="keyword">double</span> *y)   <span class="comment">//获取位置</span></span><br><span class="line"></span><br><span class="line">GPSRAgent::GPSRAgent(): Agent(PT_GPSR), </span><br><span class="line"></span><br><span class="line">            hello_timer(<span class="keyword">this</span>), query_timer(<span class="keyword">this</span>),</span><br><span class="line"></span><br><span class="line">         update_sink_loc_timer_(<span class="keyword">this</span>),</span><br><span class="line"></span><br><span class="line">            my_id(<span class="number">-1</span>), my_x(<span class="number">0.0</span>), my_y_(<span class="number">0.0</span>),</span><br><span class="line"></span><br><span class="line">            recv_counter(<span class="number">0</span>), query_counter(<span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">            query_period_(INFINITE_DELAY)<span class="comment">//协议初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::turnon()       <span class="comment">//开启协议</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::turnoff()      <span class="comment">//关闭协议</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::hellomsg()     <span class="comment">//发送hello包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::query(<span class="keyword">nsaddr_t</span> id)          <span class="comment">//开始查询</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::recvHello(Packet *p)        <span class="comment">//接受hello包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::recvQuery(Packet*p)        <span class="comment">//接受查询信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::sinkRecv(Packet *p)         <span class="comment">//数据接收器接受包信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::forwardData(Packet*p)      <span class="comment">//数据信息判断并转发</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::recv(Packet *p, Handler *h) <span class="comment">//接受数据包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRAgent::trace(<span class="keyword">char</span> *fmt, ...)           <span class="comment">//trace函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GPSRAgent::command(<span class="keyword">int</span> argc, <span class="keyword">const</span> charconst argv)        <span class="comment">//接受参数命令</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GPSRNeighbors::GPSRNeighbors()         <span class="comment">//邻居表初始化</span></span><br><span class="line"></span><br><span class="line">GPSRNeighbors::~GPSRNeighbors()        <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> GPSRNeighbors::getdis(<span class="keyword">double</span> ax, <span class="keyword">double</span> ay, <span class="keyword">double</span> bx, <span class="keyword">double</span> by)    <span class="comment">//获取位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GPSRNeighbors::nbsize()                <span class="comment">//邻居节点数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::myinfo(<span class="keyword">nsaddr_t</span> mid, <span class="keyword">double</span> mx, <span class="keyword">double</span> my)      <span class="comment">//获取信息</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpsr_neighbor</span>* <span class="title">GPSRNeighbors</span>:</span>:getnb(<span class="keyword">nsaddr_t</span> nid)               <span class="comment">//获取邻居表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::newNB(<span class="keyword">nsaddr_t</span> nid, <span class="keyword">double</span> nx, <span class="keyword">double</span> ny)           <span class="comment">//添加新的邻居节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::delnb(<span class="keyword">nsaddr_t</span> nid)         <span class="comment">//删除邻居节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::delnb(struct gpsr_neighbor *nb)     <span class="comment">//删除邻居节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::delalltimeout()            <span class="comment">//删除所有超时节点信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nsaddr_t</span> GPSRNeighbors::gf_nexthop(<span class="keyword">double</span> dx, <span class="keyword">double</span> dy)        <span class="comment">//贪婪模式下一跳</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpsr_neighbor</span>* <span class="title">GPSRNeighbors</span>:</span>:gg_planarize()           </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gpsr_neighbor</span>* <span class="title">GPSRNeighbors</span>:</span>:rng_planarize()          <span class="comment">//进行周长路由计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> GPSRNeighbors::angle(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2) <span class="comment">//计算角度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GPSRNeighbors::intersect(<span class="keyword">nsaddr_t</span> theother, <span class="keyword">double</span> sx, <span class="keyword">double</span> sy,</span><br><span class="line"></span><br><span class="line">             <span class="keyword">double</span> dx, <span class="keyword">double</span> dy)              <span class="comment">//检查两条线是否局部相交</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> GPSRNeighbors::num_of_neighbors(struct gpsr_neighbor *nblist)       <span class="comment">//给定邻居表的节点数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::free_neighbors(struct gpsr_neighbor *nblist)        <span class="comment">//释放邻居节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">nsaddr_t</span> GPSRNeighbors::peri_nexthop(inttype_, <span class="keyword">nsaddr_t</span> last,</span><br><span class="line"></span><br><span class="line">               <span class="keyword">double</span> sx, <span class="keyword">double</span> sy,<span class="keyword">double</span> dx, <span class="keyword">double</span> dy)          <span class="comment">//周边模式下一跳</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> GPSRNeighbors::dump()     <span class="comment">//转储邻居表</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Sinks::Sinks()             <span class="comment">//数据接收器初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Sinks::new_sink(nsaddr_tid, <span class="keyword">double</span> x, <span class="keyword">double</span> y, </span><br><span class="line"></span><br><span class="line">        <span class="keyword">nsaddr_t</span> lasthop, <span class="keyword">int</span> hops, <span class="keyword">int</span> seqno)             <span class="comment">//创建新的数据接收器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Sinks::remove_sink(<span class="keyword">nsaddr_t</span> id)                       <span class="comment">//删除数据接收器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Sinks::getLocbyID(<span class="keyword">nsaddr_t</span> id, <span class="keyword">double</span> &amp;x, <span class="keyword">double</span> &amp;y, <span class="keyword">int</span> &amp;hops)        <span class="comment">//通过ID获取节点位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Sinks::dump()         <span class="comment">//转储</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-GPSR协议简介&quot;&gt;&lt;a href=&quot;#1-GPSR协议简介&quot; class=&quot;headerlink&quot; title=&quot;1.   GPSR协议简介&quot;&gt;&lt;/a&gt;1.   GPSR协议简介&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;GPSR通过应用邻居节点和终点的地理位置
      
    
    </summary>
    
      <category term="note" scheme="http://quanfita.cn/categories/note/"/>
    
    
      <category term="GPSR" scheme="http://quanfita.cn/tags/GPSR/"/>
    
  </entry>
  
  <entry>
    <title>李开复《人工智能》读后感</title>
    <link href="http://quanfita.cn/2018/02/06/Artificial_Intelligence_Recommend/"/>
    <id>http://quanfita.cn/2018/02/06/Artificial_Intelligence_Recommend/</id>
    <published>2018-02-06T15:06:56.770Z</published>
    <updated>2018-02-07T04:54:12.065Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://test-1253489567.cos.ap-beijing.myqcloud.com/ti_AI_KaiFu.png" alt="ti_AI_KaiFu"></p><p>&emsp;&emsp;放假之前，从学校图书馆找资料的时候无意间看到了这本书，觉得可以看看，无聊的时候当个消遣，就借了回来。</p><p><img src="http://img.blog.csdn.net/20180206224953080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&emsp;&emsp;《人工智能》这本书其实就是告诉我们：个人应该做些什么，才能避免被AI取代？企业应该如何升级，才能在新的商业变局到来前抓住先机？本书不太适合作为人工智能入门书籍，因为里面专业知识很少，可以作为科普书籍，能够了解人工智能的一些术语。</p><p>&emsp;&emsp;<strong>人工智能已经来了，而且它就在我们身边，几乎无处不在。</strong></p><p>&emsp;&emsp;<strong>我们真的知道什么是人工智能吗？我们真的准备好与人工智能共同发展了吗？我们该如何在心理上将人和机器摆在正确的位置？我们该如何规划人工智能时代的未来生活？</strong></p><p>&emsp;&emsp;其实，人工智能已经到处都是，什么都做：可以陪人聊天，可以写标准新闻，能画画，能翻译，能开车，能认出人的样子，能在互联网上搜答案，能在仓库搬货，能送快递到家。</p><p><img src="http://img.blog.csdn.net/20180206225012418?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>人工智能是什么？有以下五种定义：</p><p>&emsp;1) 让人觉得不可思议的计算机程序（某方面特别聪明的计算机程序），比如AlphaGo、AlphaGo Zero等等。</p><p>&emsp;2) 与人类思考方式相似的计算机程序。但这事儿太难，人的意识（复杂的技术和哲学问题），谁知道自己是怎么思考的，还要交给机器，my god…</p><p>&emsp;3) 与人类行为方式相似的计算机程序，也就是说机器并不知道怎么想的，行为方式倒是很像人，比如可以和人聊天的ELIZA。</p><p>&emsp;4) 学会自己学习的计算机程序，刚开始笨笨的，慢慢地就越来越聪明，最后逆天的那种。AlphaGo也是因为学了很多很多棋谱才变得这么厉害的，还有ImageNet比赛中的算法也是学了海量的图片才达到比人眼更高的图像识别率的。</p><p>&emsp;5) 根据对环境的感知，做出合理的行动，并获得最大收益的计算机程序。 这个定义可以算是综合了以上几个定义得出的结论。</p><p>&emsp;&emsp;<strong>这一次人工智能复兴的最大特点是，AI在语音识别、机器视觉、数据挖掘等多个领域走进了业界的真实应用场景，与商业模式紧密结合，开始在产业界发挥出真正的价值。</strong></p><p>&emsp;&emsp;历史上有过3次AI热潮，第一次因为图灵测试，第二次因为语言识别，但是都很快又到了低谷，这一次，深度学习携手大数据引领了第三次热潮，目前正处于技术曲线的攀升期，前景广阔。</p><p>&emsp;&emsp;<strong>AlphaGo带来的警示是：如果计算机可以在两年内实现大多数人预测要花20年或更长时间才能完成的进步，那么，还有哪些突破会以远超常人预期的速度来临？这些突破会不会超出我们对人工智能的想象，颠覆人类预想中的未来？我们已为这些即将到来的技术突破做好准备了吗？</strong></p><p>&emsp;&emsp;“五秒钟准则”：一项人从事的工作，如果可以在5秒钟内完成思考并做出决策，那么这项工作很可能会被人工智能取代。但是人工智能也会带来新的工作。</p><p>人工智能分三个层级：</p><p>&emsp;1) 弱人工智能：在某方面很聪明，但只在这方面聪明，别的事啥也不会。比如AlphaGo，下围棋世界第一，别的方面就是个弱智，连棋子都得别人帮它拿。</p><p>&emsp;2) 强人工智能：人能做什么，它就能做什么。跟美剧《西部世界》里的机器人差不多，但它有没有意识，不好说。</p><p>&emsp;3) 超人工智能：比最聪明的人类还要聪明100000000倍。。都不止，它的NB，超乎你想象。我们不知道它是谁，不知道它在哪里，不知道它什么时候出现，也不知道它会干什么。</p><p>人工智能目前还很“稚嫩”的几个地方：</p><ul><li>跨领域推理，人类强大的跨领域联想、类比能力，可以举一反三，触类旁通。不过迁移学习也正在发展，可以将计算机在一个领域学到的经验转换到另一个领域</li><li>抽象能力，如皮克斯工作室《头脑特工队》的抽象空间</li><li>知其然，也知其所以然，了解事物运行的本质规律</li><li>常识</li><li>自我意识</li><li>审美</li><li>情感</li></ul><p>&emsp;&emsp;<strong>人工智能不仅是一次技术层次的革命，未来它必将与重大的社会经济变革、教育变革、思想变革、文化变革等同步。人工智能可能成为下一次工业革命的核心驱动力，人工智能更有可能成为人类社会全新的一次大发现、大变革、大融合、大发展的开端。</strong></p><p><img src="http://img.blog.csdn.net/20180206225034778?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>人工智能主要的商业应用场景：</p><ul><li>自动驾驶：这个不用多说，Google，Tesla，百度。。都在研究</li><li>智慧金融：量化交易与智能投顾、风控、安防与客户身份认证、智能客服、精准营销</li><li>智慧生活：机器翻译、智能家居、智能超市</li><li>智慧医疗：辅助诊断疾病、对疑难病症的医疗科学研究</li><li>艺术创作：机器音乐、机器绘画、机器文学创作</li></ul><p>&emsp;&emsp;<strong>大多数情况下，人工智能并不是一种全新的业务流程或全新的商业模式，而是对现有业务流程、商业模式的根本性改造。AI重在提升效率，而非发明新流程、新业务。未来10年，不仅仅是高科技领域，任何一个企业，如果不尽早为自己的业务引入“AI+”的先进思维方式，就很容易处于落后的追随者地位。</strong></p><p>&emsp;&emsp;大时代，大格局。AI将成为国家科技战略的核心方向，业界的巨大人力物力，软硬件技术的成熟都为人工智能创业奠定了基础。</p><p>AI创业的五大基石：</p><ol><li>清晰的领域界限</li><li>闭环的、自动标注的数据</li><li>千万级的数据量</li><li>超大规模的计算能力</li><li>顶尖的AI科学家</li></ol><p>AI产业发展的六大挑战：</p><ol><li>前沿科研与工业界尚未紧密衔接</li><li>人才缺口巨大，人才结构失衡</li><li>数据孤岛化和碎片化问题明显</li><li>可复用和标准化的技术框架、平台、工具、服务尚未成熟</li><li>一些领域存在超前发展、盲目投资等问题</li><li>创业难度相对较高，早期创业团队需要更多支持</li></ol><p>创新工场在AI领域的投资分布：</p><p><img src="http://img.blog.csdn.net/20180206231937322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>人工智能研究院主要工作任务包括：</p><ul><li>对接科研成果与商业实践，帮助海内外顶级人工智能人才创业</li><li>培育和孵化高水准的人工智能技术团队</li><li>积累和建设人工智能数据集，促进大数据的有序聚合和合理利用</li><li>开展广泛合作，促进人工智能产业的可持续发展</li></ul><p>&emsp;&emsp;<strong>人工智能时代，程式化的、重复性的、仅靠记忆与练习就可以掌握的技能将是最没有价值的技能，几乎一定可以由机器来完成；反之，那些最能体现人的综合素质的技能，例如，人对于复杂系统的综合分析、决策能力，对于艺术和文化的审美能力和创造性思维，由生活经验及文化熏陶产生的直觉、常识，基于人自身的情感（爱、恨、热情、冷漠等）与他人互动的能力……这些是人工智能时代最有价值，最值得培养、学习的技能。</strong></p><p>&emsp;&emsp;说道学习，楼教主可是必须提及的，楼教主（楼天城）的编程功力深厚，以及“一个人挑落一个队”的传奇故事，让开复老师在书中都赞扬了一番。（附上楼教主图片一张）</p><p><img src="http://img.blog.csdn.net/20180206225052379?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>AI时代该怎么学？</p><ul><li>主动挑战极限</li><li>从实践中学习</li><li>关注启发式教育，培养创造力和独立解决问题的能力</li><li>互动式的在线学习将愈来愈重要</li><li>主动向机器学习</li><li>既学习人-人协作，也学习人-机协作</li><li>学习要追随兴趣</li></ul><p>AI时代该学什么？</p><p>&emsp;&emsp;人工智能时代，程式化的、重复性的、仅靠记忆与练习就可以掌握的技能将是最没有价值的技能，几乎一定可以由机器来完成；反之，那些最能体现人的综合素质的技能，例如，人对于复杂系统的综合分析、决策能力，对于艺术和文化的审美能力和创造性思维，由生活经验及文化熏陶产生的直觉、常识，基于人自身的情感（爱、恨、热情、冷漠等）与他人互动的能力……这些是人工智能时代最有价值，最值得培养、学习的技能。而且，这些技能中，大多数都是因人而异的，需要“定制化”教育或培养，不可能从传统的“批量”教育中获取。</p><p>&emsp;&emsp;<strong>人工智能技术正在彻彻底底改变人类对机器行为的认知，重建人类与机器之间的相互协作关系。史无前例的自动驾驶正在重构我们脑中的出行地图和人类生活图景，今天的人工智能技术也正在机器翻译、机器写作、机器绘画等人文和艺术领域进行大胆的尝试……</strong></p><p>&emsp;&emsp;<strong>人工智能因为对生产效率的大幅改进、对人类劳动的部分替代、对生活方式的根本变革，而必然触及社会、经济、政治、文学、艺术等人类生活的方方面面。</strong></p><p>&emsp;&emsp;<strong>我们无需担忧和恐惧这个时代的到来，我们所要做的，应当是尽早认清AI与人类的关系，了解变革的规律，尽早制定更能适应新时代需求的科研战略、经济发展布局、社会保障体系、教育制度等，以便更好地迎接这个时代的到来。</strong></p><p>&emsp;&emsp;<strong>这是复兴的时代，这是发展的时代，这是人工智能的时代。</strong></p><p>&emsp;&emsp;其实，我们不一定要做时代的弄潮儿，但是，随着时代、科技的发展，我们必须要赶上时代的步伐，不能被时代所抛弃。AI只是一种新的工具，不会取代人类，只会丰富人类生活。<strong>未来是一个人类和机器共存，协作完成各类工作的全新时代</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://test-1253489567.cos.ap-beijing.myqcloud.com/ti_AI_KaiFu.png&quot; alt=&quot;ti_AI_KaiFu&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;放假之前，从学校图书馆找资料的时候无意间
      
    
    </summary>
    
      <category term="life" scheme="http://quanfita.cn/categories/life/"/>
    
    
      <category term="人工智能" scheme="http://quanfita.cn/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="推荐" scheme="http://quanfita.cn/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>Windows10+Anaconda+TensorFlow(CPU and GPU)环境快速搭建</title>
    <link href="http://quanfita.cn/2018/02/02/Anaconda_TensorFlow/"/>
    <id>http://quanfita.cn/2018/02/02/Anaconda_TensorFlow/</id>
    <published>2018-02-02T04:01:37.717Z</published>
    <updated>2018-02-05T08:08:44.347Z</updated>
    
    <content type="html"><![CDATA[<p>今天分享一下本人在笔记本上配置TensorFlow环境的过程。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>电脑配置：</strong></p><ul><li>Acer笔记本</li><li>CPU Inter Core i5-6200U</li><li>GPU NVIDIA GeForce 940M(忽略掉我的渣渣GPU)</li><li>Windows10</li></ul><p><strong>所需的环境</strong>：</p><ul><li>Anaconda3(64bit)</li><li>CUDA-8.0</li><li>CuDNN-5.1</li><li>Python-3.6</li><li>TensorFlow 或者 TensorFlow-gpu</li></ul><h2 id="首先安装Anaconda3"><a href="#首先安装Anaconda3" class="headerlink" title="首先安装Anaconda3"></a>首先安装Anaconda3</h2><p>​    我们从官网下载(<a href="https://www.anaconda.com/download/#windows)，也可以使用我上传百度网盘的版本，链接：https://pan.baidu.com/s/1dGEC57z" target="_blank" rel="noopener">https://www.anaconda.com/download/#windows)，也可以使用我上传百度网盘的版本，链接：https://pan.baidu.com/s/1dGEC57z</a> 密码：2om4<br>使用Linux的小伙伴可以同样下载Linux版本的Anaconda，之后我会再做补充的。<br><img src="http://img.blog.csdn.net/20180115192958597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    下载好后，我们进入安装界面：<br><img src="http://img.blog.csdn.net/20180115193411481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193429214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193446894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193527498?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    这里，我们把两个都选上，第一个是加入环境变量，因为我之前安装过一次所以这里提示不要重复添加，第二个是默认的Python3.6，让后Install。</p><p><img src="http://img.blog.csdn.net/20180115193504823?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    在完成Anaconda的安装后，我们打开Anaconda的命令行(最好用<strong>管理员身份运行</strong>，否则可能会有权限的问题)：</p><p><img src="http://img.blog.csdn.net/20180115193543200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    我们可以看到一个和Windows命令行很像的一个窗口：</p><p><img src="http://img.blog.csdn.net/20180115193553329?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="安装CUDA和CuDNN"><a href="#安装CUDA和CuDNN" class="headerlink" title="安装CUDA和CuDNN"></a>安装CUDA和CuDNN</h2><p>​    这里为安装GPU版本的TensorFlow做准备，CPU版本可跳过此部分。</p><p>​    CUDA是NVIDIA推出的运算平台，CuDNN是专门针对Deep Learning框架设计的一套GPU计算加速方案。虽然在之后用conda命令安装tensorflow-gpu时会自动安装cudatoolkit和cudnn，但是我总觉得自己安装一遍比较放心。</p><p>​    我所用的CUDA和CuDNN分享到百度网盘了，链接：<a href="https://pan.baidu.com/s/1dGEC57z" target="_blank" rel="noopener">https://pan.baidu.com/s/1dGEC57z</a> 密码：2om4</p><p>​    先安装CUDA</p><p>​    打开首先先解压：</p><p><img src="http://img.blog.csdn.net/20180115193612982?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193621641?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193629591?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193637985?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193645646?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    这里我们选择自定义，因为我们只安装CUDA</p><p><img src="http://img.blog.csdn.net/20180115193653266?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    只选择CUDA其他组件不安装，否则会安装失败</p><p><img src="http://img.blog.csdn.net/20180115193705468?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20180115193713876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    这里可能会提示你安装Visual Studio，忽略掉就好了</p><p><img src="http://img.blog.csdn.net/20180115193723866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    然后就开始安装了，等待安装结束就好了。</p><p><img src="http://img.blog.csdn.net/20180115193734175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    解压cudnn的压缩包里面有三个文件夹</p><p><img src="http://img.blog.csdn.net/20180115193758216?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    把这三个文件夹复制到你cuda的安装目录下，我的地址是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0</p><p><img src="http://img.blog.csdn.net/20180115193809788?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    这样CUDA和CuDNN就安装好了。</p><h2 id="创建TensorFlow环境"><a href="#创建TensorFlow环境" class="headerlink" title="创建TensorFlow环境"></a>创建TensorFlow环境</h2><p>​    我们在刚刚打开的命令行里输入命令(conda的命令大家可以在这篇博客中找到<a href="http://blog.csdn.net/fyuanfena/article/details/52080270)：" target="_blank" rel="noopener">http://blog.csdn.net/fyuanfena/article/details/52080270)：</a></p><blockquote><p>conda create -n tensorflow_gpu python=3.6</p></blockquote><p><img src="http://img.blog.csdn.net/20180115193819785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    中间会让我们确认一下，输入个y回车就好了。安装好后会给我们提示用activate，和deactivate进行环境的切换。</p><p>​    我们先切换到创建好的环境中：</p><blockquote><p>activate tensorflow_gpu</p></blockquote><p>​    现在，基本环境已经配置好了，我们要安装一些重要的Python科学运算库，Anaconda已经为我们准备好的一系列常用的Python苦，例如numpy，pandas，matplotlib等等，所以我们只需要安装一次anaconda库就可以把这些库全部安装好。</p><blockquote><p>conda install anaconda</p></blockquote><p><img src="http://img.blog.csdn.net/20180115193832913?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    可以看到，真的有好多常用库。</p><h2 id="安装TensorFlow"><a href="#安装TensorFlow" class="headerlink" title="安装TensorFlow"></a>安装TensorFlow</h2><p>​    之后就是我们最重要的一步，安装TensorFlow：</p><p>CPU版本</p><blockquote><p>conda install tensorflow<br><img src="http://img.blog.csdn.net/20180115193842777?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></blockquote><p>GPU版本</p><blockquote><p>conda install tensorflow-gpu</p></blockquote><p><img src="http://img.blog.csdn.net/20180115193851653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    这样我们的TensorFlow环境已经配置好了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>​    最后，我们进入jupyter notebook(Anaconda自带的Python IDE，自我感觉挺好用的)输入一段官方文档录入的代码测试一下：</p><p>​    直接输入jupyter notebook，回车</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">'Hello,TensorFlow!'</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20180115193901780?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>​    恭喜，你的TensorFlow已经可以用了，接下来快搭建你自己的神经网络吧~！</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://blog.csdn.net/fyuanfena/article/details/52080270" target="_blank" rel="noopener">Anaconda常用命令大全</a></li><li><a href="https://www.cnblogs.com/platero/p/4118139.html" target="_blank" rel="noopener">NVIDIA CuDNN 安装说明</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天分享一下本人在笔记本上配置TensorFlow环境的过程。&lt;/p&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;电脑配置：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="DeepLearning" scheme="http://quanfita.cn/categories/DeepLearning/"/>
    
    
      <category term="TensorFlow" scheme="http://quanfita.cn/tags/TensorFlow/"/>
    
      <category term="环境搭建" scheme="http://quanfita.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow简单神经网络解决Kaggle比赛Titanic问题</title>
    <link href="http://quanfita.cn/2018/02/01/Tensorflow_Kaggle_Titanic/"/>
    <id>http://quanfita.cn/2018/02/01/Tensorflow_Kaggle_Titanic/</id>
    <published>2018-02-01T03:57:40.108Z</published>
    <updated>2018-02-03T01:53:55.112Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;又到了假期，忙碌了一个学期，终于可以休息一下了。</p><p>&emsp;&emsp;一直想再Kaggle上参加一次比赛，在学校要上课，还跟老师做个项目，现在有时间了，就马上用Kaggle的入门比赛试试手。</p><p>&emsp;&emsp;一场比赛，总的来说收获不小，平时学习的时候总是眼高手低，结果中间出现令人吐血的失误 &gt;_&lt; </p><hr><h2 id="Kaggle比赛介绍"><a href="#Kaggle比赛介绍" class="headerlink" title="Kaggle比赛介绍"></a>Kaggle比赛介绍</h2><p><img src="http://img.blog.csdn.net/20180131173522397?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&emsp;&emsp;简而言之，Kaggle 是玩数据、ML 的开发者们展示功力、扬名立万的江湖，网址：<a href="https://www.kaggle.com/" target="_blank" rel="noopener">https://www.kaggle.com/</a></p><p>&emsp;&emsp;Kaggle虽然高手云集，但是对于萌新们来说也是非常友好的，这次的Titanic问题就是适合萌新Getting Started的入门题。</p><blockquote><p><strong>Kaggle 是当今最大的数据科学家、机器学习开发者社区，其行业地位独一无二。</strong></p><p>(此话引用自<a href="https://www.leiphone.com/news/201703/ZjpnddCoUDr3Eh8c.html" target="_blank" rel="noopener">谷歌收购 Kaggle 为什么会震动三界（AI、机器学习、数据科学界）？</a>)</p></blockquote><h2 id="Titanic问题概述"><a href="#Titanic问题概述" class="headerlink" title="Titanic问题概述"></a>Titanic问题概述</h2><p><strong>Titanic: Machine Learning from Disaster</strong></p><p><img src="http://img.blog.csdn.net/20180131173704627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>比赛说明</strong><br>&emsp;&emsp;RMS泰坦尼克号的沉没是历史上最臭名昭着的沉船之一。 1912年4月15日，在首航期间，泰坦尼克号撞上一座冰山后沉没，2224名乘客和机组人员中有1502人遇难。这一耸人听闻的悲剧震撼了国际社会，导致了更好的船舶安全条例。</p><p>&emsp;&emsp;沉船导致生命损失的原因之一是乘客和船员没有足够的救生艇。虽然幸存下来的运气有一些因素，但一些人比其他人更有可能生存，比如妇女，儿童和上层阶级。</p><p>&emsp;&emsp;在这个挑战中，我们要求你完成对什么样的人可能生存的分析。特别是，我们要求你运用机器学习的工具来预测哪些乘客幸存下来的悲剧。</p><p><strong>目标</strong><br>&emsp;&emsp;这是你的工作，以预测是否有乘客幸存下来的泰坦尼克号或不。<br>&emsp;&emsp;对于测试集中的每个PassengerId，您必须预测Survived变量的0或1值。</p><p><strong>度量值</strong><br>&emsp;&emsp;您的分数是您正确预测的乘客的百分比。这被称为“准确性”。</p><p><strong>提交文件格式</strong><br>&emsp;&emsp;你应该提交一个csv文件，正好有418个条目和一个标题行。如果您有额外的列（超出PassengerId和Survived）或行，您的提交将会显示错误。</p><p>该文件应该有2列：</p><p>&emsp;PassengerId（按任意顺序排序）<br>&emsp;生存（包含你的二元预测：1存活，0死亡）</p><p><img src="http://img.blog.csdn.net/20180131173736309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="数据总览"><a href="#数据总览" class="headerlink" title="数据总览"></a>数据总览</h2><p>&emsp;&emsp;首先，我们先把一些库和训练数据导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">train_data = pd.read_csv(<span class="string">'train.csv'</span>)</span><br><span class="line">print(train_data.info())</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;简单的看一下训练数据的信息，其中Embarked有两个缺失值，Age缺失值较多，Cabin有效值太少了跟本没什么用。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;</span><br><span class="line">&gt; RangeIndex: 891 entries, 0 to 890</span><br><span class="line">&gt; Data columns (total 12 columns):</span><br><span class="line">&gt; PassengerId    891 non-null int64</span><br><span class="line">&gt; Survived       891 non-null int64</span><br><span class="line">&gt; Pclass         891 non-null int64</span><br><span class="line">&gt; Name           891 non-null object</span><br><span class="line">&gt; Sex            891 non-null object</span><br><span class="line">&gt; Age            714 non-null float64</span><br><span class="line">&gt; SibSp          891 non-null int64</span><br><span class="line">&gt; Parch          891 non-null int64</span><br><span class="line">&gt; Ticket         891 non-null object</span><br><span class="line">&gt; Fare           891 non-null float64</span><br><span class="line">&gt; Cabin          204 non-null object</span><br><span class="line">&gt; Embarked       889 non-null object</span><br><span class="line">&gt; dtypes: float64(2), int64(5), object(5)</span><br><span class="line">&gt; memory usage: 83.6+ KB</span><br><span class="line">&gt; None</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>&emsp;&emsp;在我们开始搭建神经网络进行训练之前，数据清洗是必要的。这一步可以简单一些，不过如果想要得到更好的效果，清洗之前的数据分析还是不可少的。这里的数据分析，我就不再赘述了，给大家推荐一篇博客，上面有很详细的分析过程——<a href="http://blog.csdn.net/Koala_Tree/article/details/78725881" target="_blank" rel="noopener">Kaggle_Titanic生存预测</a></p><p>&emsp;&emsp;我们用随机森林算法，对’Age’的缺失值进行预测，当然这里也可以用其他回归算法，来进行预测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line">age = train_data[[<span class="string">'Age'</span>,<span class="string">'Survived'</span>,<span class="string">'Fare'</span>,<span class="string">'Parch'</span>,<span class="string">'SibSp'</span>,<span class="string">'Pclass'</span>]]</span><br><span class="line">age_notnull = age.loc[(train_data.Age.notnull())]</span><br><span class="line">age_isnull = age.loc[(train_data.Age.isnull())]</span><br><span class="line">X = age_notnull.values[:,<span class="number">1</span>:]</span><br><span class="line">Y = age_notnull.values[:,<span class="number">0</span>]</span><br><span class="line">rfr = RandomForestRegressor(n_estimators=<span class="number">1000</span>,n_jobs=<span class="number">-1</span>)</span><br><span class="line">rfr.fit(X,Y)</span><br><span class="line">predictAges = rfr.predict(age_isnull.values[:,<span class="number">1</span>:])</span><br><span class="line">train_data.loc[(train_data.Age.isnull()),<span class="string">'Age'</span>] = predictAges</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果对上一步觉得太麻烦，或不喜欢的话，可以更简单一点，直接把缺失值都给0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data = train_data.fillna(<span class="number">0</span>) <span class="comment">#缺失字段填0</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后，对于性别’Sex’，我们将其二值化’male’为0，’female’为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data.loc[train_data[<span class="string">'Sex'</span>]==<span class="string">'male'</span>,<span class="string">'Sex'</span>] = <span class="number">0</span></span><br><span class="line">train_data.loc[train_data[<span class="string">'Sex'</span>]==<span class="string">'female'</span>,<span class="string">'Sex'</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们把’Embarked’也填补下缺失值，因为缺失值较少，所以我们直接给它填补上它的众数’S’，把’S’，’C’，’Q’定性转换为0,1,2，这样便于机器进行学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">'Embarked'</span>] = train_data[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line">train_data.loc[train_data[<span class="string">'Embarked'</span>] == <span class="string">'S'</span>,<span class="string">'Embarked'</span>] = <span class="number">0</span></span><br><span class="line">train_data.loc[train_data[<span class="string">'Embarked'</span>] == <span class="string">'C'</span>,<span class="string">'Embarked'</span>] = <span class="number">1</span></span><br><span class="line">train_data.loc[train_data[<span class="string">'Embarked'</span>] == <span class="string">'Q'</span>,<span class="string">'Embarked'</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后，把’Cabin’这个与生存关系不重要而且有效数据极少的标签丢掉，再加上一个’Deceased’，代表的是是否遇难，这一步很重要，很重要，很重要！我在做的时候没加这个，后面网络的y的标签我也只设了1，训练出的模型跟没训练一样，所有的都是0。发现的时候，死的心都有了╥﹏╥…（希望不会有初学者和我犯一样的错误 ToT ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data.drop([<span class="string">'Cabin'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">train_data[<span class="string">'Deceased'</span>] = train_data[<span class="string">'Survived'</span>].apply(<span class="keyword">lambda</span> s: <span class="number">1</span> - s)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后，我们再查看一下数据信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.info()</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这次信息就整齐多了</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;</span><br><span class="line">&gt; RangeIndex: 891 entries, 0 to 890</span><br><span class="line">&gt; Data columns (total 12 columns):</span><br><span class="line">&gt; PassengerId    891 non-null int64</span><br><span class="line">&gt; Survived       891 non-null int64</span><br><span class="line">&gt; Pclass         891 non-null int64</span><br><span class="line">&gt; Name           891 non-null object</span><br><span class="line">&gt; Sex            891 non-null object</span><br><span class="line">&gt; Age            891 non-null float64</span><br><span class="line">&gt; SibSp          891 non-null int64</span><br><span class="line">&gt; Parch          891 non-null int64</span><br><span class="line">&gt; Ticket         891 non-null object</span><br><span class="line">&gt; Fare           891 non-null float64</span><br><span class="line">&gt; Embarked       891 non-null object</span><br><span class="line">&gt; Deceased       891 non-null int64</span><br><span class="line">&gt; dtypes: float64(2), int64(6), object(4)</span><br><span class="line">&gt; memory usage: 83.6+ KB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="模型搭建"><a href="#模型搭建" class="headerlink" title="模型搭建"></a>模型搭建</h2><p>&emsp;&emsp;现在我们把数据的X，Y进行分离，这里我们只选取了6个标签作为X，如果想让结果尽可能准确，请读者自行完善。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataset_X = train_data[[<span class="string">'Sex'</span>,<span class="string">'Age'</span>,<span class="string">'Pclass'</span>,<span class="string">'SibSp'</span>,<span class="string">'Parch'</span>,<span class="string">'Fare'</span>]]</span><br><span class="line">dataset_Y = train_data[[<span class="string">'Deceased'</span>,<span class="string">'Survived'</span>]]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里，我们进行训练集和验证集的划分，在训练过程中，我们可以更好的观察训练情况，避免过拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_val,Y_train,Y_val = train_test_split(dataset_X.as_matrix(),</span><br><span class="line">                                                 dataset_Y.as_matrix(),</span><br><span class="line">                                                test_size = <span class="number">0.2</span>,</span><br><span class="line">                                                random_state = <span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;做完以上工作，我们就可以开始搭建神经网络了，这里，我搭建的是一个简单两层的神经网络，激活函数使用的是线性整流函数Relu，并使用了交叉验证和Adam优化器（也可以使用梯度下降进行优化），设置学习率为0.001</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32,shape = [<span class="keyword">None</span>,<span class="number">6</span>],name = <span class="string">'input'</span>)</span><br><span class="line">y = tf.placeholder(tf.float32,shape = [<span class="keyword">None</span>,<span class="number">2</span>],name = <span class="string">'label'</span>)</span><br><span class="line">weights1 = tf.Variable(tf.random_normal([<span class="number">6</span>,<span class="number">6</span>]),name = <span class="string">'weights1'</span>)</span><br><span class="line">bias1 = tf.Variable(tf.zeros([<span class="number">6</span>]),name = <span class="string">'bias1'</span>)</span><br><span class="line">a = tf.nn.relu(tf.matmul(x,weights1) + bias1)</span><br><span class="line">weights2 = tf.Variable(tf.random_normal([<span class="number">6</span>,<span class="number">2</span>]),name = <span class="string">'weights2'</span>)</span><br><span class="line">bias2 = tf.Variable(tf.zeros([<span class="number">2</span>]),name = <span class="string">'bias2'</span>)</span><br><span class="line">z = tf.matmul(a,weights2) + bias2</span><br><span class="line">y_pred = tf.nn.softmax(z)</span><br><span class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=z))</span><br><span class="line">correct_pred = tf.equal(tf.argmax(y,<span class="number">1</span>),tf.argmax(y_pred,<span class="number">1</span>))</span><br><span class="line">acc_op = tf.reduce_mean(tf.cast(correct_pred,tf.float32))</span><br><span class="line">train_op = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cost)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面开始训练，训练之前我先定义了个Saver，epoch为30次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存档入口</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Saver声明之后定义的变量将不会被存储</span></span><br><span class="line"><span class="comment"># non_storable_variable = tf.Variable(777)</span></span><br><span class="line"></span><br><span class="line">ckpt_dir = <span class="string">'./ckpt_dir'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ckpt_dir):</span><br><span class="line">    os.makedirs(ckpt_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    </span><br><span class="line">    ckpt = tf.train.latest_checkpoint(ckpt_dir)</span><br><span class="line">    <span class="keyword">if</span> ckpt:</span><br><span class="line">        print(<span class="string">'Restoring from checkpoint: %s'</span> % ckpt)</span><br><span class="line">        saver.restore(sess, ckpt)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        total_loss = <span class="number">0.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(X_train)):</span><br><span class="line">            feed_dict = &#123;x: [X_train[i]],y:[Y_train[i]]&#125;</span><br><span class="line">            _,loss = sess.run([train_op,cost],feed_dict=feed_dict)</span><br><span class="line">            total_loss +=loss</span><br><span class="line">        print(<span class="string">'Epoch: %4d, total loss = %.12f'</span> % (epoch,total_loss))</span><br><span class="line">        <span class="keyword">if</span> epoch % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">            accuracy = sess.run(acc_op,feed_dict=&#123;x:X_val,y:Y_val&#125;)</span><br><span class="line">            print(<span class="string">"Accuracy on validation set: %.9f"</span> % accuracy)</span><br><span class="line">            saver.save(sess, ckpt_dir + <span class="string">'/logistic.ckpt'</span>)</span><br><span class="line">    print(<span class="string">'training complete!'</span>)</span><br><span class="line">    </span><br><span class="line">    accuracy = sess.run(acc_op,feed_dict=&#123;x:X_val,y:Y_val&#125;)</span><br><span class="line">    print(<span class="string">"Accuracy on validation set: %.9f"</span> % accuracy)</span><br><span class="line">    pred = sess.run(y_pred,feed_dict=&#123;x:X_val&#125;)</span><br><span class="line">    correct = np.equal(np.argmax(pred,<span class="number">1</span>),np.argmax(Y_val,<span class="number">1</span>))</span><br><span class="line">    numpy_accuracy = np.mean(correct.astype(np.float32))</span><br><span class="line">    print(<span class="string">"Accuracy on validation set (numpy): %.9f"</span> % numpy_accuracy)</span><br><span class="line">    </span><br><span class="line">    saver.save(sess, ckpt_dir + <span class="string">'/logistic.ckpt'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    测试数据的清洗和训练数据一样，两者可以共同完成</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读测试数据  </span></span><br><span class="line">    test_data = pd.read_csv(<span class="string">'test.csv'</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#数据清洗, 数据预处理  </span></span><br><span class="line">    test_data.loc[test_data[<span class="string">'Sex'</span>]==<span class="string">'male'</span>,<span class="string">'Sex'</span>] = <span class="number">0</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">'Sex'</span>]==<span class="string">'female'</span>,<span class="string">'Sex'</span>] = <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">    age = test_data[[<span class="string">'Age'</span>,<span class="string">'Sex'</span>,<span class="string">'Parch'</span>,<span class="string">'SibSp'</span>,<span class="string">'Pclass'</span>]]</span><br><span class="line">    age_notnull = age.loc[(test_data.Age.notnull())]</span><br><span class="line">    age_isnull = age.loc[(test_data.Age.isnull())]</span><br><span class="line">    X = age_notnull.values[:,<span class="number">1</span>:]</span><br><span class="line">    Y = age_notnull.values[:,<span class="number">0</span>]</span><br><span class="line">    rfr = RandomForestRegressor(n_estimators=<span class="number">1000</span>,n_jobs=<span class="number">-1</span>)</span><br><span class="line">    rfr.fit(X,Y)</span><br><span class="line">    predictAges = rfr.predict(age_isnull.values[:,<span class="number">1</span>:])</span><br><span class="line">    test_data.loc[(test_data.Age.isnull()),<span class="string">'Age'</span>] = predictAges</span><br><span class="line">    </span><br><span class="line">    test_data[<span class="string">'Embarked'</span>] = test_data[<span class="string">'Embarked'</span>].fillna(<span class="string">'S'</span>)</span><br><span class="line">    test_data.loc[test_data[<span class="string">'Embarked'</span>] == <span class="string">'S'</span>,<span class="string">'Embarked'</span>] = <span class="number">0</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">'Embarked'</span>] == <span class="string">'C'</span>,<span class="string">'Embarked'</span>] = <span class="number">1</span></span><br><span class="line">    test_data.loc[test_data[<span class="string">'Embarked'</span>] == <span class="string">'Q'</span>,<span class="string">'Embarked'</span>] = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    test_data.drop([<span class="string">'Cabin'</span>],axis=<span class="number">1</span>,inplace=<span class="keyword">True</span>)</span><br><span class="line">      </span><br><span class="line">    <span class="comment">#特征选择  </span></span><br><span class="line">    X_test = test_data[[<span class="string">'Sex'</span>, <span class="string">'Age'</span>, <span class="string">'Pclass'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'Fare'</span>]]  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">#评估模型  </span></span><br><span class="line">    predictions = np.argmax(sess.run(y_pred, feed_dict=&#123;x: X_test&#125;), <span class="number">1</span>)  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#保存结果  </span></span><br><span class="line">    submission = pd.DataFrame(&#123;  </span><br><span class="line">        <span class="string">"PassengerId"</span>: test_data[<span class="string">"PassengerId"</span>],  </span><br><span class="line">        <span class="string">"Survived"</span>: predictions  </span><br><span class="line">    &#125;)  </span><br><span class="line">    submission.to_csv(<span class="string">"titanic-submission.csv"</span>, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们把生成的提交文件在Kaggle官网上进行提交，Score为0.79425，效果还可以，不过还有很多需要改进的地方</p><p><img src="http://img.blog.csdn.net/20180131173808505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="http://blog.csdn.net/Koala_Tree/article/details/78725881" target="_blank" rel="noopener">Kaggle_Titanic生存预测 — 详细流程吐血梳理</a></li><li><a href="https://www.leiphone.com/news/201703/ZjpnddCoUDr3Eh8c.html" target="_blank" rel="noopener">谷歌收购 Kaggle 为什么会震动三界（AI、机器学习、数据科学界）？</a></li><li><a href="https://github.com/DeepVisionTeam/TensorFlowBook/tree/master/Titanic" target="_blank" rel="noopener">《深度学习原理与TensorFlow实践》课程代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;又到了假期，忙碌了一个学期，终于可以休息一下了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一直想再Kaggle上参加一次比赛，在学校要上课，还跟老师做个项目，现在有时间了，就马上用Kaggle的入门比赛试试手。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;一
      
    
    </summary>
    
      <category term="DeepLearning" scheme="http://quanfita.cn/categories/DeepLearning/"/>
    
    
      <category term="TensorFlow" scheme="http://quanfita.cn/tags/TensorFlow/"/>
    
      <category term="Kaggle" scheme="http://quanfita.cn/tags/Kaggle/"/>
    
      <category term="Titanic" scheme="http://quanfita.cn/tags/Titanic/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow实现Neural Style图像风格转移</title>
    <link href="http://quanfita.cn/2018/02/01/Tensorflow_Neural_Style/"/>
    <id>http://quanfita.cn/2018/02/01/Tensorflow_Neural_Style/</id>
    <published>2018-02-01T03:43:19.391Z</published>
    <updated>2018-02-05T08:59:32.636Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;刚开始接触TensorFlow，实践个小项目，也参考了一下其他博主的文章，希望大家提出宝贵意见。</p><p>文章中的代码和图片已上传到GitHub(<a href="https://github.com/Quanfita/Neural-Style)。" target="_blank" rel="noopener">https://github.com/Quanfita/Neural-Style)。</a></p><h2 id="什么是图像风格迁移？"><a href="#什么是图像风格迁移？" class="headerlink" title="什么是图像风格迁移？"></a>什么是图像风格迁移？</h2><p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br>&emsp;&emsp;以下每一张图都是一种不同的艺术风格。从直观上我们很难找出这些不同风格的图片有什么可以用准确的语言来描述的去别和联系。如何要把一个图像的风格变成另一种风格更是难以定义的问题。作为程序员，又应该如何去用代码去实现？</p><p><img src="http://img.blog.csdn.net/20180108153307580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>(图片来自<a href="https://zhuanlan.zhihu.com/p/26746283" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26746283</a>)</p><p>&emsp;&emsp;在神经网络出现之后，Gatys的几篇论文中提出了一些解决方法，让机器能够理解风格这样模糊的概念：<a href="https://arxiv.org/abs/1505.07376.pdf" target="_blank" rel="noopener">Texture Synthesis Using Convolutional Neural Networks(1505.07376)</a>，<a href="https://arxiv.org/abs/1508.06576.pdf" target="_blank" rel="noopener">A Neural Algorithm of Artistic Style(1508.06576)</a>，<a href="https://arxiv.org/abs/1606.05897v1.pdf" target="_blank" rel="noopener">Preserving Color in Neural Artistic Style Transfer(1606.05897v1)</a>。<br>&emsp;&emsp;Neural Style成为了一个非常有意思的深度学习应用：输入一张代表内容的图片和一张代表风格的图片，深度学习网络会输出一张融合了这个风格和内容的新作品。<br>&emsp;&emsp;TensorFlow是Google开源的最流行的深度学习框架。在GitHub上有开源的TensorFlow实现的Neural Style代码(地址)。<br>&emsp;&emsp;我们还是先看一下Neural Style这篇论文介绍了怎样的方法来解决这个问题的吧。（以下为论文中的主要内容）</p><h2 id="论文内容"><a href="#论文内容" class="headerlink" title="论文内容"></a>论文内容</h2><p>首先，有几个概念：</p><p><strong>卷积神经网络（CNN）</strong><br>&emsp;&emsp;一张输入的图片，会在卷积神经网的各层以一系列过滤后的图像表示。随着层级的一层一层处理，过滤后的图片会通过向下取样的方式不断减小（比如通过池化层）。这使得每层神经网的神经元数量会原来越小。（也就是层越深，因为经过了池化层，单个feature map会越来越小，于是每层中的神经元数量也会越来越少）。</p><p><strong>内容重塑</strong><br>&emsp;&emsp;在只知道该层的输出结果，通过重塑输入图像，可以看到CNN不同阶段的图像信息。在原始的VGG-Network上的5个层级:conv1_1,conv1_2,conv1_3,conv1_4,conv1_5上重塑了输入的图像。</p><p><img src="http://img.blog.csdn.net/20180108154718772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>&emsp;&emsp;输入的图像是上图中的一排房子，5个层级分别是a,b,c,d,e。在较低层的图像重构（abc）非常完美；在较高层（de），详细的像素信息丢失了。也就是说，这样做提取出了图片的内容，但是抛弃了像素。 </p><p><strong>风格重塑</strong><br>&emsp;&emsp;在原始的CNN表征之上(feature map)，建立了一个新的特征空间(feature space)，这个特征空间捕获了输入图像的风格。风格的表征计算了在CNN的不同层级间不用特征之间的相似性。通过在CNN隐层的不同的子集上建立起来的风格的表征，我们重构输入图像的风格。如此，便创造了与输入图像一致的风格而丢弃了全局的内容。</p><p>&emsp;&emsp;这篇论文的关键是对于内容和风格的表征在CNN中是可以分开的。可以独立地操作两个表征来产生新的，可感知意义的图像。论文中生成一个图片，混合了来自两个不同图片的内容和风格表征。</p><p>&emsp;&emsp;一张图片，它同时符合照片的内容表征，和艺术画的风格表征。原始照片的整体布局被保留了，而颜色和局部的结构却由艺术画提供。</p><p>&emsp;&emsp;风格表征是一个多尺度的表征，包括了神经网络的多层。在图2中看到的图像，风格的表征包含了整个神经网络的层级。而风格也可以只包含一小部分较低的层级。（见下面的图，第一行是卷基层1，第5行是卷基层5的输出）。若符合了较高层级中的风格表征，局部的图像结构会大规模地增加，从而使得图像在视觉上更平滑与连贯。</p><p>&emsp;&emsp;简言之，作者直接把局部特征看做近似的图片内容，这样就得到了一个把图片内容和图片风格（说白了就是纹理）分开的系统，剩下的就是把一个图片的内容和另一个图片的风格合起来。</p><p>&emsp;&emsp;图像的内容和风格并不能被完全地分解开。当风格与内容来自不同的两个图像时，这个被合成的新图像并不存在在同一时刻完美地符合了两个约束。但是，在图像合成中最小化的损失函数分别包括了内容与风格两者，它们被很好地分开了。所以，我们可以平滑地将重点既放在内容上又放在风格上</p><p><img src="http://img.blog.csdn.net/20180108164858305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>方法：</strong><br>&emsp;&emsp;假设某一层得到的响应是 $F^{l}\in R^{N_{l}\times M_{l}}$  ,其中 $N_{l}$ 为 $l$ 层filter的个数，$M_{l}$为filter的大小。$F_{ij}^{l}$表示的是第$l$层第$i$个filter在位置j的输出。 </p><p>&emsp;&emsp;$\vec{p}$ 代表提供Content的图像，$\vec{x}$ 表示生成的图像，Pl和Fl分别代表它们对于$l$层的响应，因此l层的Content Loss： </p><script type="math/tex; mode=display">L_{content}(\vec{p},\vec{x},l) = \frac{1}{2}\sum_{i,j}{(F_{ij}^{l}-P_{ij}^{l})^{2}}</script><p>&emsp;&emsp;上面我们提到了，某一层的Style可以用$G^{l}\in R^{N_{l}\times N_{l}}$来表示，其中 ，即不同filter响应的内积。<br>&emsp;&emsp;$\vec{a}$ 代表提供Style的图像，$\vec{x}$ 表示生成的图像，Al和Gl分别代表它们对于$l$层的Style，因此l层的Style Loss： </p><script type="math/tex; mode=display">E_{l} = \frac{1}{4N_{l}^{2}M_{l}^{2}}\sum_{i,j}{(G_{ij}^{l}-A_{ij}^{l})^{2}}</script><p>&emsp;&emsp;文章中作者使用了多层来表达Style，所以总的Style Loss为： </p><script type="math/tex; mode=display">L_{style}(\vec{a},\vec{x}) = \sum_{l=0}^{L}{w_{l}E_{l}}</script><p>&emsp;&emsp;定义好了两个Loss之后，就利用优化方法来最小化总的Loss： </p><script type="math/tex; mode=display">L_{total}(\vec{p},\vec{a},\vec{x}) = αL_{content}(\vec{p},\vec{x}) + βL_{style}(\vec{a},\vec{x})</script><p>&emsp;&emsp;其中的$α$和$β$分别代表了对Content和Style的侧重，文中作者也对$α/β$取值的效果进行了实验。 </p><p>&emsp;&emsp;最终迭代出来的$\vec{x}$ 既具有$\vec{p}$ 的Content，同时也具有$\vec{a}$的Style。实验结果也证明了作者文中方法的有效性。</p><p>&emsp;&emsp;$α$和$β$分别是内容和风格在图像重构中的权重因子。$α$和$ β$分别是内容和风格两个损失的权重。$α+β=1$.如果$α$比较大，那么输出后的新图会更多地倾向于内容上的吻合，如果$β$较大，那么输出的新图会更倾向于与风格的吻合。这两个参数是一个trade-off,可以根据自己需求去调整最好的平衡。论文的作者给出了它调整参数的不同结果，如下图，从左到右四列分别是$α/β = 10^{-5}, 10^{-4},10^{-3}, 10^{-2}$.也就是$α$越来越大，的确图像也越来越清晰地呈现出了照片的内容。</p><p><img src="http://img.blog.csdn.net/20180108165121003?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><strong>环境介绍</strong></p><ul><li>Python3.6</li><li>TensorFlow 1.2</li><li>VGG19</li><li>CPU i5-6200U(笔记本)</li></ul><p>下面，简单介绍以下VGG19网络：</p><p><strong>VGG19 网络结构</strong></p><p>&emsp;&emsp;每一层神经网络都会利用上一层的输出来进一步提取更加复杂的特征，直到复杂到能被用来识别物体为止，所以每一层都可以被看做很多个局部特征的提取器。VGG19 在物体识别方面的精度甩了之前的算法一大截，之后的物体识别系统也基本都改用深度学习了。VGG19结构如下：</p><p><img src="http://img.blog.csdn.net/20180108165412128?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>(图片来自<a href="https://zhuanlan.zhihu.com/p/26746283" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26746283</a>)</p><p><strong>代码详解：</strong></p><p>TensorFlow版本的源码主要包含了三个文件：neural_style.py, stylize.py和 vgg.py。 </p><p>neural_style.py：外部接口函数，定义了函数的主要参数以及部分参数的默认值，包含对图像的读取和存贮，对输入图像进行resize，权值分配等操作，并将参数以及resize的图片传入stylize.py中。 </p><p>stylize.py：核心代码，包含了训练、优化等过程。</p><p>vgg.py：定义了网络模型以及相关的运算。</p><p>我们可以使用下面的代码vgg.py读取VGG-19神经网络，用于构造Neural Style模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.io</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要使用神经网络层</span></span><br><span class="line">VGG19_LAYERS = (</span><br><span class="line">    <span class="string">'conv1_1'</span>, <span class="string">'relu1_1'</span>, <span class="string">'conv1_2'</span>, <span class="string">'relu1_2'</span>, <span class="string">'pool1'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'conv2_1'</span>, <span class="string">'relu2_1'</span>, <span class="string">'conv2_2'</span>, <span class="string">'relu2_2'</span>, <span class="string">'pool2'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'conv3_1'</span>, <span class="string">'relu3_1'</span>, <span class="string">'conv3_2'</span>, <span class="string">'relu3_2'</span>, <span class="string">'conv3_3'</span>,</span><br><span class="line">    <span class="string">'relu3_3'</span>, <span class="string">'conv3_4'</span>, <span class="string">'relu3_4'</span>, <span class="string">'pool3'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'conv4_1'</span>, <span class="string">'relu4_1'</span>, <span class="string">'conv4_2'</span>, <span class="string">'relu4_2'</span>, <span class="string">'conv4_3'</span>,</span><br><span class="line">    <span class="string">'relu4_3'</span>, <span class="string">'conv4_4'</span>, <span class="string">'relu4_4'</span>, <span class="string">'pool4'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'conv5_1'</span>, <span class="string">'relu5_1'</span>, <span class="string">'conv5_2'</span>, <span class="string">'relu5_2'</span>, <span class="string">'conv5_3'</span>,</span><br><span class="line">    <span class="string">'relu5_3'</span>, <span class="string">'conv5_4'</span>, <span class="string">'relu5_4'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">##我们需要的信息是每层神经网络的kernels和bias</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_net</span><span class="params">(data_path)</span>:</span></span><br><span class="line">    data = scipy.io.loadmat(data_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all(i <span class="keyword">in</span> data <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="string">'layers'</span>, <span class="string">'classes'</span>, <span class="string">'normalization'</span>)):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"You're using the wrong VGG19 data. Please follow the instructions in the README to download the correct data."</span>)</span><br><span class="line">    mean = data[<span class="string">'normalization'</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    mean_pixel = np.mean(mean, axis=(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    weights = data[<span class="string">'layers'</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> weights, mean_pixel</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net_preloaded</span><span class="params">(weights, input_image, pooling)</span>:</span></span><br><span class="line">    net = &#123;&#125;</span><br><span class="line">    current = input_image</span><br><span class="line">    <span class="keyword">for</span> i, name <span class="keyword">in</span> enumerate(VGG19_LAYERS):</span><br><span class="line">        kind = name[:<span class="number">4</span>]</span><br><span class="line">        <span class="keyword">if</span> kind == <span class="string">'conv'</span>:</span><br><span class="line">            kernels, bias = weights[i][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            kernels = np.transpose(kernels, (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">            bias = bias.reshape(<span class="number">-1</span>)</span><br><span class="line">            current = _conv_layer(current, kernels, bias)</span><br><span class="line">        <span class="keyword">elif</span> kind == <span class="string">'relu'</span>:</span><br><span class="line">            current = tf.nn.relu(current)</span><br><span class="line">        <span class="keyword">elif</span> kind == <span class="string">'pool'</span>:</span><br><span class="line">            current = _pool_layer(current, pooling)</span><br><span class="line">        net[name] = current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> len(net) == len(VGG19_LAYERS)</span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_conv_layer</span><span class="params">(input, weights, bias)</span>:</span></span><br><span class="line">    conv = tf.nn.conv2d(input, tf.constant(weights), strides=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">            padding=<span class="string">'SAME'</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.nn.bias_add(conv, bias)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pool_layer</span><span class="params">(input, pooling)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pooling == <span class="string">'avg'</span>:</span><br><span class="line">        <span class="keyword">return</span> tf.nn.avg_pool(input, ksize=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), strides=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                padding=<span class="string">'SAME'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tf.nn.max_pool(input, ksize=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), strides=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span><span class="params">(image, mean_pixel)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> image - mean_pixel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unprocess</span><span class="params">(image, mean_pixel)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> image + mean_pixel</span><br></pre></td></tr></table></figure><p>在neural_style.py中我们可以看到，定义了非常长多的参数和外部接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy.misc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> stylize <span class="keyword">import</span> stylize</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># default arguments</span></span><br><span class="line">CONTENT_WEIGHT = <span class="number">5e0</span></span><br><span class="line">CONTENT_WEIGHT_BLEND = <span class="number">1</span></span><br><span class="line">STYLE_WEIGHT = <span class="number">5e2</span></span><br><span class="line">TV_WEIGHT = <span class="number">1e2</span></span><br><span class="line">STYLE_LAYER_WEIGHT_EXP = <span class="number">1</span></span><br><span class="line">LEARNING_RATE = <span class="number">1e1</span></span><br><span class="line">BETA1 = <span class="number">0.9</span></span><br><span class="line">BETA2 = <span class="number">0.999</span></span><br><span class="line">EPSILON = <span class="number">1e-08</span></span><br><span class="line">STYLE_SCALE = <span class="number">1.0</span></span><br><span class="line">ITERATIONS = <span class="number">1000</span></span><br><span class="line">VGG_PATH = <span class="string">'imagenet-vgg-verydeep-19.mat'</span></span><br><span class="line">POOLING = <span class="string">'max'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_parser</span><span class="params">()</span>:</span></span><br><span class="line">    parser = ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">'--content'</span>,</span><br><span class="line">            dest=<span class="string">'content'</span>, help=<span class="string">'content image'</span>,</span><br><span class="line">            metavar=<span class="string">'CONTENT'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--styles'</span>,</span><br><span class="line">            dest=<span class="string">'styles'</span>,</span><br><span class="line">            nargs=<span class="string">'+'</span>, help=<span class="string">'one or more style images'</span>,</span><br><span class="line">            metavar=<span class="string">'STYLE'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--output'</span>,</span><br><span class="line">            dest=<span class="string">'output'</span>, help=<span class="string">'output path'</span>,</span><br><span class="line">            metavar=<span class="string">'OUTPUT'</span>, required=<span class="keyword">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--iterations'</span>, type=int,</span><br><span class="line">            dest=<span class="string">'iterations'</span>, help=<span class="string">'iterations (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'ITERATIONS'</span>, default=ITERATIONS)</span><br><span class="line">    parser.add_argument(<span class="string">'--print-iterations'</span>, type=int,</span><br><span class="line">            dest=<span class="string">'print_iterations'</span>, help=<span class="string">'statistics printing frequency'</span>,</span><br><span class="line">            metavar=<span class="string">'PRINT_ITERATIONS'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--checkpoint-output'</span>,</span><br><span class="line">            dest=<span class="string">'checkpoint_output'</span>, help=<span class="string">'checkpoint output format, e.g. output%%s.jpg'</span>,</span><br><span class="line">            metavar=<span class="string">'OUTPUT'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--checkpoint-iterations'</span>, type=int,</span><br><span class="line">            dest=<span class="string">'checkpoint_iterations'</span>, help=<span class="string">'checkpoint frequency'</span>,</span><br><span class="line">            metavar=<span class="string">'CHECKPOINT_ITERATIONS'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--width'</span>, type=int,</span><br><span class="line">            dest=<span class="string">'width'</span>, help=<span class="string">'output width'</span>,</span><br><span class="line">            metavar=<span class="string">'WIDTH'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--style-scales'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'style_scales'</span>,</span><br><span class="line">            nargs=<span class="string">'+'</span>, help=<span class="string">'one or more style scales'</span>,</span><br><span class="line">            metavar=<span class="string">'STYLE_SCALE'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--network'</span>,</span><br><span class="line">            dest=<span class="string">'network'</span>, help=<span class="string">'path to network parameters (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'VGG_PATH'</span>, default=VGG_PATH)</span><br><span class="line">    parser.add_argument(<span class="string">'--content-weight-blend'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'content_weight_blend'</span>, help=<span class="string">'content weight blend, conv4_2 * blend + conv5_2 * (1-blend) (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'CONTENT_WEIGHT_BLEND'</span>, default=CONTENT_WEIGHT_BLEND)</span><br><span class="line">    parser.add_argument(<span class="string">'--content-weight'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'content_weight'</span>, help=<span class="string">'content weight (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'CONTENT_WEIGHT'</span>, default=CONTENT_WEIGHT)</span><br><span class="line">    parser.add_argument(<span class="string">'--style-weight'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'style_weight'</span>, help=<span class="string">'style weight (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'STYLE_WEIGHT'</span>, default=STYLE_WEIGHT)</span><br><span class="line">    parser.add_argument(<span class="string">'--style-layer-weight-exp'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'style_layer_weight_exp'</span>, help=<span class="string">'style layer weight exponentional increase - weight(layer&lt;n+1&gt;) = weight_exp*weight(layer&lt;n&gt;) (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'STYLE_LAYER_WEIGHT_EXP'</span>, default=STYLE_LAYER_WEIGHT_EXP)</span><br><span class="line">    parser.add_argument(<span class="string">'--style-blend-weights'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'style_blend_weights'</span>, help=<span class="string">'style blending weights'</span>,</span><br><span class="line">            nargs=<span class="string">'+'</span>, metavar=<span class="string">'STYLE_BLEND_WEIGHT'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--tv-weight'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'tv_weight'</span>, help=<span class="string">'total variation regularization weight (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'TV_WEIGHT'</span>, default=TV_WEIGHT)</span><br><span class="line">    parser.add_argument(<span class="string">'--learning-rate'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'learning_rate'</span>, help=<span class="string">'learning rate (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'LEARNING_RATE'</span>, default=LEARNING_RATE)</span><br><span class="line">    parser.add_argument(<span class="string">'--beta1'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'beta1'</span>, help=<span class="string">'Adam: beta1 parameter (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'BETA1'</span>, default=BETA1)</span><br><span class="line">    parser.add_argument(<span class="string">'--beta2'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'beta2'</span>, help=<span class="string">'Adam: beta2 parameter (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'BETA2'</span>, default=BETA2)</span><br><span class="line">    parser.add_argument(<span class="string">'--eps'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'epsilon'</span>, help=<span class="string">'Adam: epsilon parameter (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'EPSILON'</span>, default=EPSILON)</span><br><span class="line">    parser.add_argument(<span class="string">'--initial'</span>,</span><br><span class="line">            dest=<span class="string">'initial'</span>, help=<span class="string">'initial image'</span>,</span><br><span class="line">            metavar=<span class="string">'INITIAL'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--initial-noiseblend'</span>, type=float,</span><br><span class="line">            dest=<span class="string">'initial_noiseblend'</span>, help=<span class="string">'ratio of blending initial image with normalized noise (if no initial image specified, content image is used) (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'INITIAL_NOISEBLEND'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--preserve-colors'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">            dest=<span class="string">'preserve_colors'</span>, help=<span class="string">'style-only transfer (preserving colors) - if color transfer is not needed'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--pooling'</span>,</span><br><span class="line">            dest=<span class="string">'pooling'</span>, help=<span class="string">'pooling layer configuration: max or avg (default %(default)s)'</span>,</span><br><span class="line">            metavar=<span class="string">'POOLING'</span>, default=POOLING)</span><br><span class="line">    <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    parser = build_parser()</span><br><span class="line">    options = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(options.network):</span><br><span class="line">        parser.error(<span class="string">"Network %s does not exist. (Did you forget to download it?)"</span> % options.network)</span><br><span class="line"></span><br><span class="line">    content_image = imread(options.content)</span><br><span class="line">    style_images = [imread(style) <span class="keyword">for</span> style <span class="keyword">in</span> options.styles]</span><br><span class="line"></span><br><span class="line">    width = options.width</span><br><span class="line">    <span class="keyword">if</span> width <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        new_shape = (int(math.floor(float(content_image.shape[<span class="number">0</span>]) /</span><br><span class="line">                content_image.shape[<span class="number">1</span>] * width)), width)</span><br><span class="line">        content_image = scipy.misc.imresize(content_image, new_shape)</span><br><span class="line">    target_shape = content_image.shape</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(style_images)):</span><br><span class="line">        style_scale = STYLE_SCALE</span><br><span class="line">        <span class="keyword">if</span> options.style_scales <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            style_scale = options.style_scales[i]</span><br><span class="line">        style_images[i] = scipy.misc.imresize(style_images[i], style_scale *</span><br><span class="line">                target_shape[<span class="number">1</span>] / style_images[i].shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    style_blend_weights = options.style_blend_weights</span><br><span class="line">    <span class="keyword">if</span> style_blend_weights <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># default is equal weights</span></span><br><span class="line">        style_blend_weights = [<span class="number">1.0</span>/len(style_images) <span class="keyword">for</span> _ <span class="keyword">in</span> style_images]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        total_blend_weight = sum(style_blend_weights)</span><br><span class="line">        style_blend_weights = [weight/total_blend_weight</span><br><span class="line">                               <span class="keyword">for</span> weight <span class="keyword">in</span> style_blend_weights]</span><br><span class="line"></span><br><span class="line">    initial = options.initial</span><br><span class="line">    <span class="keyword">if</span> initial <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        initial = scipy.misc.imresize(imread(initial), content_image.shape[:<span class="number">2</span>])</span><br><span class="line">        <span class="comment"># Initial guess is specified, but not noiseblend - no noise should be blended</span></span><br><span class="line">        <span class="keyword">if</span> options.initial_noiseblend <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            options.initial_noiseblend = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Neither inital, nor noiseblend is provided, falling back to random generated initial guess</span></span><br><span class="line">        <span class="keyword">if</span> options.initial_noiseblend <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            options.initial_noiseblend = <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">if</span> options.initial_noiseblend &lt; <span class="number">1.0</span>:</span><br><span class="line">            initial = content_image</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> options.checkpoint_output <span class="keyword">and</span> <span class="string">"%s"</span> <span class="keyword">not</span> <span class="keyword">in</span> options.checkpoint_output:</span><br><span class="line">        parser.error(<span class="string">"To save intermediate images, the checkpoint output "</span></span><br><span class="line">                     <span class="string">"parameter must contain `%s` (e.g. `foo%s.jpg`)"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> iteration, image <span class="keyword">in</span> stylize(</span><br><span class="line">        network=options.network,</span><br><span class="line">        initial=initial,</span><br><span class="line">        initial_noiseblend=options.initial_noiseblend,</span><br><span class="line">        content=content_image,</span><br><span class="line">        styles=style_images,</span><br><span class="line">        preserve_colors=options.preserve_colors,</span><br><span class="line">        iterations=options.iterations,</span><br><span class="line">        content_weight=options.content_weight,</span><br><span class="line">        content_weight_blend=options.content_weight_blend,</span><br><span class="line">        style_weight=options.style_weight,</span><br><span class="line">        style_layer_weight_exp=options.style_layer_weight_exp,</span><br><span class="line">        style_blend_weights=style_blend_weights,</span><br><span class="line">        tv_weight=options.tv_weight,</span><br><span class="line">        learning_rate=options.learning_rate,</span><br><span class="line">        beta1=options.beta1,</span><br><span class="line">        beta2=options.beta2,</span><br><span class="line">        epsilon=options.epsilon,</span><br><span class="line">        pooling=options.pooling,</span><br><span class="line">        print_iterations=options.print_iterations,</span><br><span class="line">        checkpoint_iterations=options.checkpoint_iterations</span><br><span class="line">    ):</span><br><span class="line">        output_file = <span class="keyword">None</span></span><br><span class="line">        combined_rgb = image</span><br><span class="line">        <span class="keyword">if</span> iteration <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">if</span> options.checkpoint_output:</span><br><span class="line">                output_file = options.checkpoint_output % iteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_file = options.output</span><br><span class="line">        <span class="keyword">if</span> output_file:</span><br><span class="line">            imsave(output_file, combined_rgb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imread</span><span class="params">(path)</span>:</span></span><br><span class="line">    img = scipy.misc.imread(path).astype(np.float)</span><br><span class="line">    <span class="keyword">if</span> len(img.shape) == <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># grayscale</span></span><br><span class="line">        img = np.dstack((img,img,img))</span><br><span class="line">    <span class="keyword">elif</span> img.shape[<span class="number">2</span>] == <span class="number">4</span>:</span><br><span class="line">        <span class="comment"># PNG with alpha channel</span></span><br><span class="line">        img = img[:,:,:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imsave</span><span class="params">(path, img)</span>:</span></span><br><span class="line">    img = np.clip(img, <span class="number">0</span>, <span class="number">255</span>).astype(np.uint8)</span><br><span class="line">    Image.fromarray(img).save(path, quality=<span class="number">95</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>核心代码stylize.py，详解如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 2015-2017 Anish Athalye. Released under GPLv3.</span><br><span class="line"></span><br><span class="line">import vgg</span><br><span class="line"></span><br><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">from sys import stderr</span><br><span class="line"></span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">CONTENT_LAYERS = (&apos;relu4_2&apos;, &apos;relu5_2&apos;)</span><br><span class="line">STYLE_LAYERS = (&apos;relu1_1&apos;, &apos;relu2_1&apos;, &apos;relu3_1&apos;, &apos;relu4_1&apos;, &apos;relu5_1&apos;)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    reduce</span><br><span class="line">except NameError:</span><br><span class="line">    from functools import reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def stylize(network, initial, initial_noiseblend, content, styles, preserve_colors, iterations,</span><br><span class="line">        content_weight, content_weight_blend, style_weight, style_layer_weight_exp, style_blend_weights, tv_weight,</span><br><span class="line">        learning_rate, beta1, beta2, epsilon, pooling,</span><br><span class="line">        print_iterations=None, checkpoint_iterations=None):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Stylize images.</span><br><span class="line"></span><br><span class="line">    This function yields tuples (iteration, image); `iteration` is None</span><br><span class="line">    if this is the final image (the last iteration).  Other tuples are yielded</span><br><span class="line">    every `checkpoint_iterations` iterations.</span><br><span class="line"></span><br><span class="line">    :rtype: iterator[tuple[int|None,image]]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    #content.shape是三维（height, width, channel），这里将维度变成（1, height, width, channel）为了与后面保持一致。</span><br><span class="line">    shape = (1,) + content.shape</span><br><span class="line">    style_shapes = [(1,) + style.shape for style in styles]</span><br><span class="line">    content_features = &#123;&#125;</span><br><span class="line">    style_features = [&#123;&#125; for _ in styles]</span><br><span class="line"></span><br><span class="line">    vgg_weights, vgg_mean_pixel = vgg.load_net(network)</span><br><span class="line"></span><br><span class="line">    layer_weight = 1.0</span><br><span class="line">    style_layers_weights = &#123;&#125;</span><br><span class="line">    for style_layer in STYLE_LAYERS:</span><br><span class="line">        style_layers_weights[style_layer] = layer_weight</span><br><span class="line">        layer_weight *= style_layer_weight_exp</span><br><span class="line"></span><br><span class="line">    # normalize style layer weights</span><br><span class="line">    layer_weights_sum = 0</span><br><span class="line">    for style_layer in STYLE_LAYERS:</span><br><span class="line">        layer_weights_sum += style_layers_weights[style_layer]</span><br><span class="line">    for style_layer in STYLE_LAYERS:</span><br><span class="line">        style_layers_weights[style_layer] /= layer_weights_sum</span><br><span class="line">#首先创建一个image的占位符，然后通过eval()的feed_dict将content_pre传给image，启动net的运算过程，得到了content的feature maps</span><br><span class="line">    # compute content features in feedforward mode</span><br><span class="line">    g = tf.Graph()</span><br><span class="line">    with g.as_default(), g.device(&apos;/cpu:0&apos;), tf.Session() as sess:</span><br><span class="line">        image = tf.placeholder(&apos;float&apos;, shape=shape)</span><br><span class="line">        net = vgg.net_preloaded(vgg_weights, image, pooling)</span><br><span class="line">        content_pre = np.array([vgg.preprocess(content, vgg_mean_pixel)])</span><br><span class="line">        for layer in CONTENT_LAYERS:</span><br><span class="line">            content_features[layer] = net[layer].eval(feed_dict=&#123;image: content_pre&#125;)</span><br><span class="line"></span><br><span class="line">    # compute style features in feedforward mode</span><br><span class="line">    for i in range(len(styles)):</span><br><span class="line">        g = tf.Graph()</span><br><span class="line">        with g.as_default(), g.device(&apos;/cpu:0&apos;), tf.Session() as sess:</span><br><span class="line">            image = tf.placeholder(&apos;float&apos;, shape=style_shapes[i])</span><br><span class="line">            net = vgg.net_preloaded(vgg_weights, image, pooling)</span><br><span class="line">            style_pre = np.array([vgg.preprocess(styles[i], vgg_mean_pixel)])</span><br><span class="line">            for layer in STYLE_LAYERS:</span><br><span class="line">                features = net[layer].eval(feed_dict=&#123;image: style_pre&#125;)</span><br><span class="line">                features = np.reshape(features, (-1, features.shape[3]))</span><br><span class="line">                gram = np.matmul(features.T, features) / features.size</span><br><span class="line">                style_features[i][layer] = gram</span><br><span class="line"></span><br><span class="line">    initial_content_noise_coeff = 1.0 - initial_noiseblend</span><br><span class="line"></span><br><span class="line">    # make stylized image using backpropogation</span><br><span class="line">    with tf.Graph().as_default():</span><br><span class="line">        if initial is None:</span><br><span class="line">            noise = np.random.normal(size=shape, scale=np.std(content) * 0.1)</span><br><span class="line">            initial = tf.random_normal(shape) * 0.256</span><br><span class="line">        else:</span><br><span class="line">            initial = np.array([vgg.preprocess(initial, vgg_mean_pixel)])</span><br><span class="line">            initial = initial.astype(&apos;float32&apos;)</span><br><span class="line">            noise = np.random.normal(size=shape, scale=np.std(content) * 0.1)</span><br><span class="line">            initial = (initial) * initial_content_noise_coeff + (tf.random_normal(shape) * 0.256) * (1.0 - initial_content_noise_coeff)</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        image = tf.Variable(initial)初始化了一个TensorFlow的变量，即为我们需要训练的对象。注意这里我们训练的对象是一张图像，而不是weight和bias。</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        image = tf.Variable(initial)</span><br><span class="line">        net = vgg.net_preloaded(vgg_weights, image, pooling)</span><br><span class="line"></span><br><span class="line">        # content loss</span><br><span class="line">        content_layers_weights = &#123;&#125;</span><br><span class="line">        content_layers_weights[&apos;relu4_2&apos;] = content_weight_blend</span><br><span class="line">        content_layers_weights[&apos;relu5_2&apos;] = 1.0 - content_weight_blend</span><br><span class="line"></span><br><span class="line">        content_loss = 0</span><br><span class="line">        content_losses = []</span><br><span class="line">        for content_layer in CONTENT_LAYERS:</span><br><span class="line">            content_losses.append(content_layers_weights[content_layer] * content_weight * (2 * tf.nn.l2_loss(</span><br><span class="line">                    net[content_layer] - content_features[content_layer]) /</span><br><span class="line">                    content_features[content_layer].size))</span><br><span class="line">        content_loss += reduce(tf.add, content_losses)</span><br><span class="line"></span><br><span class="line">        # style loss</span><br><span class="line">        style_loss = 0</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">由于style图像可以输入多幅，这里使用for循环。同样的，将style_pre传给image占位符，启动net运算，得到了style的feature maps，由于style为不同filter响应的内积，因此在这里增加了一步：gram = np.matmul(features.T, features) / features.size，即为style的feature。</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">        for i in range(len(styles)):</span><br><span class="line">            style_losses = []</span><br><span class="line">            for style_layer in STYLE_LAYERS:</span><br><span class="line">                layer = net[style_layer]</span><br><span class="line">                _, height, width, number = map(lambda i: i.value, layer.get_shape())</span><br><span class="line">                size = height * width * number</span><br><span class="line">                feats = tf.reshape(layer, (-1, number))</span><br><span class="line">                gram = tf.matmul(tf.transpose(feats), feats) / size</span><br><span class="line">                style_gram = style_features[i][style_layer]</span><br><span class="line">                style_losses.append(style_layers_weights[style_layer] * 2 * tf.nn.l2_loss(gram - style_gram) / style_gram.size)</span><br><span class="line">            style_loss += style_weight * style_blend_weights[i] * reduce(tf.add, style_losses)</span><br><span class="line"></span><br><span class="line">        # total variation denoising</span><br><span class="line">        tv_y_size = _tensor_size(image[:,1:,:,:])</span><br><span class="line">        tv_x_size = _tensor_size(image[:,:,1:,:])</span><br><span class="line">        tv_loss = tv_weight * 2 * (</span><br><span class="line">                (tf.nn.l2_loss(image[:,1:,:,:] - image[:,:shape[1]-1,:,:]) /</span><br><span class="line">                    tv_y_size) +</span><br><span class="line">                (tf.nn.l2_loss(image[:,:,1:,:] - image[:,:,:shape[2]-1,:]) /</span><br><span class="line">                    tv_x_size))</span><br><span class="line">        # overall loss</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        接下来定义了Content Loss和Style Loss，结合文中的公式很容易看懂，在代码中，还增加了total variation denoising，因此总的loss = content_loss + style_loss + tv_loss</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        loss = content_loss + style_loss + tv_loss</span><br><span class="line"></span><br><span class="line">        # optimizer setup</span><br><span class="line">        #创建train_step，使用Adam优化器，优化对象是上面的loss</span><br><span class="line">        #优化过程，通过迭代使用train_step来最小化loss，最终得到一个best，即为训练优化的结果</span><br><span class="line">        train_step = tf.train.AdamOptimizer(learning_rate, beta1, beta2, epsilon).minimize(loss)</span><br><span class="line"></span><br><span class="line">        def print_progress():</span><br><span class="line">            stderr.write(&apos;  content loss: %g\n&apos; % content_loss.eval())</span><br><span class="line">            stderr.write(&apos;    style loss: %g\n&apos; % style_loss.eval())</span><br><span class="line">            stderr.write(&apos;       tv loss: %g\n&apos; % tv_loss.eval())</span><br><span class="line">            stderr.write(&apos;    total loss: %g\n&apos; % loss.eval())</span><br><span class="line"></span><br><span class="line">        # optimization</span><br><span class="line">        best_loss = float(&apos;inf&apos;)</span><br><span class="line">        best = None</span><br><span class="line">        with tf.Session() as sess:</span><br><span class="line">            sess.run(tf.global_variables_initializer())</span><br><span class="line">            stderr.write(&apos;Optimization started...\n&apos;)</span><br><span class="line">            if (print_iterations and print_iterations != 0):</span><br><span class="line">                print_progress()</span><br><span class="line">            for i in range(iterations):</span><br><span class="line">                stderr.write(&apos;Iteration %4d/%4d\n&apos; % (i + 1, iterations))</span><br><span class="line">                train_step.run()</span><br><span class="line"></span><br><span class="line">                last_step = (i == iterations - 1)</span><br><span class="line">                if last_step or (print_iterations and i % print_iterations == 0):</span><br><span class="line">                    print_progress()</span><br><span class="line"></span><br><span class="line">                if (checkpoint_iterations and i % checkpoint_iterations == 0) or last_step:</span><br><span class="line">                    this_loss = loss.eval()</span><br><span class="line">                    if this_loss &lt; best_loss:</span><br><span class="line">                        best_loss = this_loss</span><br><span class="line">                        best = image.eval()</span><br><span class="line"></span><br><span class="line">                    img_out = vgg.unprocess(best.reshape(shape[1:]), vgg_mean_pixel)</span><br><span class="line"></span><br><span class="line">                    if preserve_colors and preserve_colors == True:</span><br><span class="line">                        original_image = np.clip(content, 0, 255)</span><br><span class="line">                        styled_image = np.clip(img_out, 0, 255)</span><br><span class="line"></span><br><span class="line">                        # Luminosity transfer steps:</span><br><span class="line">                        # 1. Convert stylized RGB-&gt;grayscale accoriding to Rec.601 luma (0.299, 0.587, 0.114)</span><br><span class="line">                        # 2. Convert stylized grayscale into YUV (YCbCr)</span><br><span class="line">                        # 3. Convert original image into YUV (YCbCr)</span><br><span class="line">                        # 4. Recombine (stylizedYUV.Y, originalYUV.U, originalYUV.V)</span><br><span class="line">                        # 5. Convert recombined image from YUV back to RGB</span><br><span class="line"></span><br><span class="line">                        # 1</span><br><span class="line">                        styled_grayscale = rgb2gray(styled_image)</span><br><span class="line">                        styled_grayscale_rgb = gray2rgb(styled_grayscale)</span><br><span class="line"></span><br><span class="line">                        # 2</span><br><span class="line">                        styled_grayscale_yuv = np.array(Image.fromarray(styled_grayscale_rgb.astype(np.uint8)).convert(&apos;YCbCr&apos;))</span><br><span class="line"></span><br><span class="line">                        # 3</span><br><span class="line">                        original_yuv = np.array(Image.fromarray(original_image.astype(np.uint8)).convert(&apos;YCbCr&apos;))</span><br><span class="line"></span><br><span class="line">                        # 4</span><br><span class="line">                        w, h, _ = original_image.shape</span><br><span class="line">                        combined_yuv = np.empty((w, h, 3), dtype=np.uint8)</span><br><span class="line">                        combined_yuv[..., 0] = styled_grayscale_yuv[..., 0]</span><br><span class="line">                        combined_yuv[..., 1] = original_yuv[..., 1]</span><br><span class="line">                        combined_yuv[..., 2] = original_yuv[..., 2]</span><br><span class="line"></span><br><span class="line">                        # 5</span><br><span class="line">                        img_out = np.array(Image.fromarray(combined_yuv, &apos;YCbCr&apos;).convert(&apos;RGB&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    yield (</span><br><span class="line">                        (None if last_step else i),</span><br><span class="line">                        img_out</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def _tensor_size(tensor):</span><br><span class="line">    from operator import mul</span><br><span class="line">    return reduce(mul, (d.value for d in tensor.get_shape()), 1)</span><br><span class="line"></span><br><span class="line">def rgb2gray(rgb):</span><br><span class="line">    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])</span><br><span class="line"></span><br><span class="line">def gray2rgb(gray):</span><br><span class="line">    w, h = gray.shape</span><br><span class="line">    rgb = np.empty((w, h, 3), dtype=np.float32)</span><br><span class="line">    rgb[:, :, 2] = rgb[:, :, 1] = rgb[:, :, 0] = gray</span><br><span class="line">    return rgb</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><strong>我们的原图是这样的：</strong></p><p><img src="http://img.blog.csdn.net/20180108210931718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>风格是这样的：</strong></p><p><img src="http://img.blog.csdn.net/20180108212407292?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>我们在cmd命令行中打入下面代码(我的图片都放在examples/下）：</strong></p><blockquote><p>python neural_style.py —content examples/cat.jpg —styles examples/2-style1.jpg —output y-output.jpg</p></blockquote><p><img src="http://img.blog.csdn.net/20180108213158508?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>然后我们看到计算机已经开始进行风格转移:</strong></p><p><img src="http://img.blog.csdn.net/20180108213257762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>（ps:我可怜的笔记本不停地跑了两个小时）</p><p><strong>转移结束后我们可以看到输出的图片是这样的：</strong></p><p><img src="http://img.blog.csdn.net/20180108212431248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>Neural Style很有趣，我们可以通过改变参数去做很多风格的测试，会有不一样的效果。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/26746283" target="_blank" rel="noopener">图像风格迁移 (Neural Style) 简史</a></li><li><a href="https://segmentfault.com/a/1190000009820053" target="_blank" rel="noopener">TensorFlow实战：Neural Style</a></li><li><a href="http://blog.csdn.net/sinat_33761963/article/details/53521292" target="_blank" rel="noopener">【Paper翻译】A Neural Algorithm Artistic Style</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;刚开始接触TensorFlow，实践个小项目，也参考了一下其他博主的文章，希望大家提出宝贵意见。&lt;/p&gt;
&lt;p&gt;文章中的代码和图片已上传到GitHub(&lt;a href=&quot;https://github.com/Quanfita/Neural-Style
      
    
    </summary>
    
      <category term="DeepLearning" scheme="http://quanfita.cn/categories/DeepLearning/"/>
    
    
      <category term="TensorFlow" scheme="http://quanfita.cn/tags/TensorFlow/"/>
    
      <category term="Neural Style" scheme="http://quanfita.cn/tags/Neural-Style/"/>
    
  </entry>
  
</feed>
