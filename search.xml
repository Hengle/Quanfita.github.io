<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TensorFlow实现写诗机器人]]></title>
    <url>%2F2018%2F08%2F09%2FTensorFlow_poem%2F</url>
    <content type="text"><![CDATA[概述&emsp;&emsp;在这篇博客中，我们要使用RNN生成藏头诗，你给它输入一些古诗词，它会学着生成和前面相关联的字词。同样的如果你把训练数据换成一堆姓名，它也会学着生成姓名；给它训练一堆音乐，它会学着生成音乐，甚至可以给它训练源代码。 &emsp;&emsp;我们使用文本文件做为输入、训练RNN模型，然后使用它生成和训练数据类似的文本。 &emsp;&emsp; 项目地址：[GitHub](https://github.com/Quanfita/TensorFlow-Poems)使用的数据集：全唐诗(43030首)：https://pan.baidu.com/s/1o7QlUhO **环境介绍：** - python 6.0 - TensorFlow 1.2 - i5-6200U(笔记本) ##代码分析： 首先，对使用的神经网络进行简单的介绍： **RNN：** &emsp;&emsp;RNN这种网络的内部状态可以展示动态时序行为。不同于前馈神经网络的是，RNN让我们可以利用它内部的记忆来处理任意时序的输入序列。简言之，RNN是为了对序列数据进行建模而产生的。 **什么是样本序列性？** &emsp;&emsp;如果样本间存在顺序关系，每个样本和它之前的样本存在关联，那么我们就可以说这些样本具有序列性。比如说，在文本中，一个词和它前面的词是有关联的；在气象数据中，一天的气温和前几天的气温是有关联的。 &emsp;&emsp;在实现过程中我们将整个程序分成5个文件，分别是main.py、poems.py、tangpoems.py、model.py、cleancn.py - main.py：定义了参数和接口，可以训练或作诗 - poems.py：导入训练文件开始训练 - tang_poems.py：主要功能函数，包括了数据训练，和作诗过程 - model.py：保存训练好的模型 - cleancn.py：这里对中文字符进行处理 &emsp;&emsp;这里我们来看一下main.py中 的参数和接口： 12345678910111213141516171819202122import argparsedef parse_args(): parser = argparse.ArgumentParser(description='Intelligence Poem Writer.') help_ = 'choose to train or generate.' #参数--train可以训练--no-train可以让机器人作诗 parser.add_argument('--train', dest='train', action='store_true', help=help_) parser.add_argument('--no-train', dest='train', action='store_false', help=help_) parser.set_defaults(train=True) args_ = parser.parse_args() return args_if __name__ == '__main__': args = parse_args() import tang_poems if args.train: tang_poems.main(True) else: tang_poems.main(False) &emsp;&emsp;接下来是主要的文件tangpoems.py： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145import collectionsimport osimport sysimport numpy as npimport tensorflow as tffrom model import rnn_modelfrom poems import process_poems, generate_batchimport heapqtf.app.flags.DEFINE_integer('batch_size', 64, 'batch size.')tf.app.flags.DEFINE_float('learning_rate', 0.01, 'learning rate.')# set this to 'main.py' relative pathtf.app.flags.DEFINE_string('checkpoints_dir', os.path.abspath('./checkpoints/'), 'checkpoints save path.')tf.app.flags.DEFINE_string('file_path', os.path.abspath('./poems.txt'), 'file name of poems.')tf.app.flags.DEFINE_string('model_prefix', 'poems', 'model save prefix.')tf.app.flags.DEFINE_integer('epochs', 50, 'train how many epochs.')FLAGS = tf.app.flags.FLAGSstart_token = 'G'end_token = 'E'#开始训练def run_training(): if not os.path.exists(os.path.dirname(FLAGS.checkpoints_dir)): os.mkdir(os.path.dirname(FLAGS.checkpoints_dir)) if not os.path.exists(FLAGS.checkpoints_dir): os.mkdir(FLAGS.checkpoints_dir) poems_vector, word_to_int, vocabularies = process_poems(FLAGS.file_path) batches_inputs, batches_outputs = generate_batch(FLAGS.batch_size, poems_vector, word_to_int) input_data = tf.placeholder(tf.int32, [FLAGS.batch_size, None]) output_targets = tf.placeholder(tf.int32, [FLAGS.batch_size, None]) end_points = rnn_model(model='lstm', input_data=input_data, output_data=output_targets, vocab_size=len( vocabularies), rnn_size=128, num_layers=2, batch_size=64, learning_rate=FLAGS.learning_rate) saver = tf.train.Saver(tf.global_variables()) init_op = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer()) with tf.Session() as sess: # sess = tf_debug.LocalCLIDebugWrapperSession(sess=sess) # sess.add_tensor_filter("has_inf_or_nan", tf_debug.has_inf_or_nan) sess.run(init_op) start_epoch = 0 checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir) if checkpoint: saver.restore(sess, checkpoint) print("[INFO] restore from the checkpoint &#123;0&#125;".format(checkpoint)) start_epoch += int(checkpoint.split('-')[-1]) print('[INFO] start training...') try: for epoch in range(start_epoch, FLAGS.epochs): n = 0 n_chunk = len(poems_vector) // FLAGS.batch_size for batch in range(n_chunk): loss, _, _ = sess.run([ end_points['total_loss'], end_points['last_state'], end_points['train_op'] ], feed_dict=&#123;input_data: batches_inputs[n], output_targets: batches_outputs[n]&#125;) n += 1 print('[INFO] Epoch: %d , batch: %d , training loss: %.6f' % (epoch, batch, loss)) if epoch % 6 == 0: saver.save(sess, os.path.join(FLAGS.checkpoints_dir, FLAGS.model_prefix), global_step=epoch) except KeyboardInterrupt: print('[INFO] Interrupt manually, try saving checkpoint for now...') saver.save(sess, os.path.join(FLAGS.checkpoints_dir, FLAGS.model_prefix), global_step=epoch) print('[INFO] Last epoch were saved, next time will start from epoch &#123;&#125;.'.format(epoch))def to_word(predict, vocabs): t = np.cumsum(predict) s = np.sum(predict) sample = int(np.searchsorted(t, np.random.rand(1) * s)) if sample &gt; len(vocabs): sample = len(vocabs) - 1 return vocabs[sample]#调用模型生成诗句def gen_poem(begin_word): batch_size = 1 print('[INFO] loading corpus from %s' % FLAGS.file_path) poems_vector, word_int_map, vocabularies = process_poems(FLAGS.file_path) input_data = tf.placeholder(tf.int32, [batch_size, None]) end_points = rnn_model(model='lstm', input_data=input_data, output_data=None, vocab_size=len( vocabularies), rnn_size=128, num_layers=2, batch_size=64, learning_rate=FLAGS.learning_rate) saver = tf.train.Saver(tf.global_variables()) init_op = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer()) with tf.Session() as sess: sess.run(init_op) checkpoint = tf.train.latest_checkpoint(FLAGS.checkpoints_dir) saver.restore(sess, checkpoint) x = np.array([list(map(word_int_map.get, start_token))]) [predict, last_state] = sess.run([end_points['prediction'], end_points['last_state']], feed_dict=&#123;input_data: x&#125;) if begin_word: word = begin_word else: word = to_word(predict, vocabularies) poem = '' while word != end_token: poem += word x = np.zeros((1, 1)) x[0, 0] = word_int_map[word] [predict, last_state] = sess.run([end_points['prediction'], end_points['last_state']], feed_dict=&#123;input_data: x, end_points['initial_state']: last_state&#125;) word = to_word(predict, vocabularies) # word = words[np.argmax(probs_)] return poem#这里将生成的诗句，按照中文诗词的格式输出#同时方便接入应用def pretty_print_poem(poem): poem_sentences = poem.split('。') for s in poem_sentences: if s != '' and len(s) &gt; 10: print(s + '。')def main(is_train): if is_train: print('[INFO] train tang poem...') run_training() else: print('[INFO] write tang poem...') begin_word = input('开始作诗，请输入起始字:') poem2 = gen_poem(begin_word) pretty_print_poem(poem2)if __name__ == '__main__': tf.app.run() &emsp;&emsp;在poems.py中有两部分：process_poems()和generate_batch()，其中process_poems()对数据进行了导入、排序等操作，generate_batch()将数据分块，为训练做准备： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677# -*- coding: utf-8 -*-import collectionsimport osimport sysimport numpy as npstart_token = 'G'end_token = 'E'def process_poems(file_name): # 诗集 poems = [] with open(file_name, "r", encoding='utf-8', ) as f: for line in f.readlines(): try: title, content = line.strip().split(':') content = content.replace(' ', '') if '_' in content or '(' in content or '（' in content or '《' in content or '[' in content or \ start_token in content or end_token in content: continue if len(content) &lt; 5 or len(content) &gt; 79: continue content = start_token + content + end_token poems.append(content) except ValueError as e: pass # 按诗的字数排序 poems = sorted(poems, key=lambda l: len(line)) # 统计每个字出现次数 all_words = [] for poem in poems: all_words += [word for word in poem] # 这里根据包含了每个字对应的频率 counter = collections.Counter(all_words) count_pairs = sorted(counter.items(), key=lambda x: -x[1]) words, _ = zip(*count_pairs) # 取前多少个常用字 words = words[:len(words)] + (' ',) # 每个字映射为一个数字ID word_int_map = dict(zip(words, range(len(words)))) poems_vector = [list(map(lambda word: word_int_map.get(word, len(words)), poem)) for poem in poems] return poems_vector, word_int_map, wordsdef generate_batch(batch_size, poems_vec, word_to_int): # 每次取64首诗进行训练 n_chunk = len(poems_vec) // batch_size x_batches = [] y_batches = [] for i in range(n_chunk): start_index = i * batch_size end_index = start_index + batch_size batches = poems_vec[start_index:end_index] # 找到这个batch的所有poem中最长的poem的长度 length = max(map(len, batches)) # 填充一个这么大小的空batch，空的地方放空格对应的index标号 x_data = np.full((batch_size, length), word_to_int[' '], np.int32) for row in range(batch_size): # 每一行就是一首诗，在原本的长度上把诗还原上去 x_data[row, :len(batches[row])] = batches[row] y_data = np.copy(x_data) # y的话就是x向左边也就是前面移动一个 y_data[:, :-1] = x_data[:, 1:] """ x_data y_data [6,2,4,6,9] [2,4,6,9,9] [1,4,2,8,5] [4,2,8,5,5] """ x_batches.append(x_data) y_batches.append(y_data) return x_batches, y_batches &emsp;&emsp;model.py进行了RNN模型的定义，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# -*- coding: utf-8 -*-import tensorflow as tfimport numpy as npdef rnn_model(model, input_data, output_data, vocab_size, rnn_size=128, num_layers=2, batch_size=64, learning_rate=0.01): """ construct rnn seq2seq model. :param model: model class 模型种类 :param input_data: input data placeholder 输入 :param output_data: output data placeholder 输出 :param vocab_size: 词长度 :param rnn_size: 一个RNN单元的大小 :param num_layers: RNN层数 :param batch_size: 步长 :param learning_rate: 学习速率 :return: """ end_points = &#123;&#125; def rnn_cell(): if model == 'rnn': cell_fun = tf.contrib.rnn.BasicRNNCell elif model == 'gru': cell_fun = tf.contrib.rnn.GRUCell elif model == 'lstm': cell_fun = tf.contrib.rnn.BasicLSTMCell cell = cell_fun(rnn_size, state_is_tuple=True) return cell cell = tf.contrib.rnn.MultiRNNCell([rnn_cell() for _ in range(num_layers)], state_is_tuple=True) if output_data is not None: initial_state = cell.zero_state(batch_size, tf.float32) else: initial_state = cell.zero_state(1, tf.float32) with tf.device("/cpu:0"): embedding = tf.get_variable('embedding', initializer=tf.random_uniform( [vocab_size + 1, rnn_size], -1.0, 1.0)) inputs = tf.nn.embedding_lookup(embedding, input_data) # [batch_size, ?, rnn_size] = [64, ?, 128] outputs, last_state = tf.nn.dynamic_rnn(cell, inputs, initial_state=initial_state) output = tf.reshape(outputs, [-1, rnn_size]) weights = tf.Variable(tf.truncated_normal([rnn_size, vocab_size + 1])) bias = tf.Variable(tf.zeros(shape=[vocab_size + 1])) logits = tf.nn.bias_add(tf.matmul(output, weights), bias=bias) # [?, vocab_size+1] if output_data is not None: # output_data must be one-hot encode labels = tf.one_hot(tf.reshape(output_data, [-1]), depth=vocab_size + 1) # should be [?, vocab_size+1] loss = tf.nn.softmax_cross_entropy_with_logits(labels=labels, logits=logits) # loss shape should be [?, vocab_size+1] total_loss = tf.reduce_mean(loss) train_op = tf.train.AdamOptimizer(learning_rate).minimize(total_loss) end_points['initial_state'] = initial_state end_points['output'] = output end_points['train_op'] = train_op end_points['total_loss'] = total_loss end_points['loss'] = loss end_points['last_state'] = last_state else: prediction = tf.nn.softmax(logits) end_points['initial_state'] = initial_state end_points['last_state'] = last_state end_points['prediction'] = prediction return end_points &emsp;&emsp;最后cleancn.py实现了初期的数据处理工作：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136# -*- coding: utf-8 -*-"""this script using for clean Chinese corpus.you can set level for clean, i.e.:level='all', will clean all character that not Chinese, include punctuationslevel='normal', this will generate corpus like normal use, reserve alphabets and numberslevel='clean', this will remove all except Chinese and Chinese punctuationsbesides, if you want remove complex Chinese characters, just set this to be true:simple_only=True"""import numpy as npimport osimport stringcn_punctuation_set = ['，', '。', '！', '？', '"', '"', '、']en_punctuation_set = [',', '.', '?', '!', '"', '"']def clean_cn_corpus(file_name, clean_level='all', simple_only=True, is_save=True): """ clean Chinese corpus. :param file_name: :param clean_level: :param simple_only: :param is_save: :return: clean corpus in list type. """ if os.path.dirname(file_name): base_dir = os.path.dirname(file_name) else: print('not set dir. please check') save_file = os.path.join(base_dir, os.path.basename(file_name).split('.')[0] + '_cleaned.txt') with open(file_name, 'r+',encoding='utf-8') as f: clean_content = [] for l in f.readlines(): l = l.strip() if l == '': pass else: l = list(l) should_remove_words = [] for w in l: if not should_reserve(w, clean_level): should_remove_words.append(w) clean_line = [c for c in l if c not in should_remove_words] clean_line = ''.join(clean_line) if clean_line != '': clean_content.append(clean_line) if is_save: with open(save_file, 'w+') as f: for l in clean_content: f.write(l + '\n') print('[INFO] cleaned file have been saved to %s.' % save_file) return clean_contentdef should_reserve(w, clean_level): if w == ' ': return True else: if clean_level == 'all': # only reserve Chinese characters if w in cn_punctuation_set or w in string.punctuation or is_alphabet(w): return False else: return is_chinese(w) elif clean_level == 'normal': # reserve Chinese characters, English alphabet, number if is_chinese(w) or is_alphabet(w) or is_number(w): return True elif w in cn_punctuation_set or w in en_punctuation_set: return True else: return False elif clean_level == 'clean': if is_chinese(w): return True elif w in cn_punctuation_set: return True else: return False else: raise "clean_level not support %s, please set for all, normal, clean" % clean_leveldef is_chinese(uchar): """is chinese""" if u'\u4e00' &lt;= uchar &lt;= u'\u9fa5': return True else: return Falsedef is_number(uchar): """is number""" if u'\u0030' &lt;= uchar &lt;= u'\u0039': return True else: return Falsedef is_alphabet(uchar): """is alphabet""" if (u'\u0041' &lt;= uchar &lt;= u'\u005a') or (u'\u0061' &lt;= uchar &lt;= u'\u007a'): return True else: return Falsedef semi_angle_to_sbc(uchar): """半角转全角""" inside_code = ord(uchar) if inside_code &lt; 0x0020 or inside_code &gt; 0x7e: return uchar if inside_code == 0x0020: inside_code = 0x3000 else: inside_code += 0xfee0 return chr(inside_code)def sbc_to_semi_angle(uchar): """全角转半角""" inside_code = ord(uchar) if inside_code == 0x3000: inside_code = 0x0020 else: inside_code -= 0xfee0 if inside_code &lt; 0x0020 or inside_code &gt; 0x7e: return uchar return chr(inside_code) 实现效果我们在命令行中输入： python main.py —train 开始训练数据： 训练结束后，我们继续输入命令，让机器人开始作诗： python main.py —no-train 假如我们让机器人作一首以“春”字开头的诗。 我们可以看到机器人为我们写好了一首诗： 相关文章： TensorFlow7: 基于RNN生成古诗词 Tensorflow：基于LSTM轻松生成各种古诗]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>poem</tag>
        <tag>RNN</tag>
        <tag>lstm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——提升方法]]></title>
    <url>%2F2018%2F05%2F14%2Fboosting%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;提升方法的思路是综合多个分类器，得到更准确的分类结果。 说白了就是“三个臭皮匠顶个诸葛亮”。 提升方法提升方法AdaBoost算法&emsp;&emsp;提升方法思路比较简单，它意在通过改变训练样本之间相对的权重，从而学习出多个分类器，并将这些分类器进行线性组合，从而提高分类的性能。&emsp;&emsp;从以上思路可以看出，提升方法将一个复杂的任务分配给多个专家进行判断，并且对判断的结果进行综合，这样做要比只让一个专家来判断要好，毕竟大家说好才是真的好。 &emsp;&emsp;AdaBoost是提升算法的代表，所谓提升算法，指的是一种常用的统计学习方法，应用广泛且有效。在分类问题中，它通过改变训练样本的权重，学习多个分类器，并将这些分类器进行线性组合，提髙分类的性能。 算法 (AdaBoost)输入：训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，弱学习算法； 输出：最终分类器$G(x)$ 。 (1) 初始化训练数据的权值分布 \begin{matrix}D_1=(w_{11},...,w_{1i},...,w_{1N}),& w_{1i}=\frac{1}{N}, & i=1,2...,N \end{matrix}(2) 对$m=1,2,…,M$ &emsp;&emsp;(a) 使用具有权值分布$D_m$ 的训练数据集学习，得到基本分类器 G_m(x):X\rightarrow\{ -1,+1 \}&emsp;&emsp;(b) 计算$G_m(x)$ 在训练数据集上的分类误差率 e_m=P(G_m(x_i)\neq y_i)=\sum\limits_{i=1}^{N}w_{m_i}I(G_m(x_i)\neq y_i)&emsp;&emsp;(c) 计算$G_m(x)$ 的系数 \alpha_m=\frac{1}{2}\log\frac{1-e_m}{e_m}这里的对数是自然对数。 &emsp;&emsp;(d) 更新训练数据集的权值分布 D_{m+1}=(w_{m+1,1},...,w_{m+1,i},...,w_{m+1,N})\begin{matrix} w_{m+1,i}=\frac{w_{mi}}{Z_m}\exp(-\alpha_my_iG_m(x_i)) & i=1,2,...,N \end{matrix}也可以写成 w_{m+1,i}=\begin{cases} \frac{w_{mi}}{Z_m}e^{-\alpha_m},& G_m(x_i)=y_i \\ \frac{w_{mi}}{Z_m}e^{-\alpha_m},& G_m(x_i)\neq y_i \end{cases}这里，$Z_m$ 是规范化因子 Z_m=\sum\limits_{i=1}^{N}w_{mi}\exp(-\alpha_my_iG_m(x_i))它使$D_{m+1}$ 成为一个概率分布。 (3) 构建基本分类器的线性组合 f(x)=\sum\limits_{m=1}^{M}\alpha_mG_m(x)得到最终分类器 G(x)=sign(f(x))=sign\left( \sum\limits_{m=1}^{M}\alpha_mG_m(x) \right)&emsp;&emsp;从以上算法可以看到：最开始步骤1，我们假设了样本具有均匀的权重分布，它将产生一个基本分类器$G_1(x)$ 。步骤2是一个m从1到M的循环过程，每一次循环都可以产生一个弱分类器。 分类误差率实际上就是被误分类点的权值之和。 在计算当前弱分类器在线性组合中的系数时，当$e\geq0.5$ 时，$\alpha\geq0$，并且随着e的减小而增大，正好印证了需要使误差率小的弱分类器的权值更大这个事实。 每一个样本的权值$w$ ，都与它原来的标签y_i 以及预测的标签$G_m(x_i)$ 有关，当预测正确即它们同号时，exp指数是一个负值，这样就会减小原来样本点的权重；当预测不正确即它们异号时，exp指数是一个正值，它会增加当前样本点的权重。这正印证了我们需要使被误分类样本的权值更大这个事实。 AdaBoost算法的解释&emsp;&emsp;AdaBoost算法还有另一个解释，即可以认为AdaBoost算法是模型为加法模型、损失函数为指数函数、学习算法为前向分步算法时的二类分类学习方法。 前向分步算法&emsp;&emsp;考虑加法模型（additive model) f(x)=\sum\limits_{m=1}^{M}\beta_mb(x;\gamma_m)&emsp;&emsp;其中，$b(x;\gamma_m)$ 为基函数，$\gamma_m$ 为基函数的参数，$\beta_m$ 为基函数的系数。显然，$f(x)=\sum\limits_{m=1}^{M}\beta_mb(x;\gamma_m)$ 是一个加法模型。 &emsp;&emsp;在给定训练数据及损失函数的条件下，学习加法模型$f(x)$ 成为经验风险极小化即损失函数极小化问题： \min\limits_{\beta_m,\gamma_m}\sum\limits_{i=1}^{N}L\left( y_i,\sum\limits_{m=1}^{M}\beta_mb(x_i;\gamma_m) \right)&emsp;&emsp;通常这是一个复杂的优化问题。前向分步算法（forward stage wise algorithm)求解这一优化问题的想法是：因为学习的是加法模型，如果能够从前向后，每一步只学习一个基函数及其系数，逐步逼近优化目标函数式，那么就可以简化优化的复杂度。具体地，每步只需优化如下损失函数： \min\limits_{\beta,\gamma}\sum\limits_{i=1}^{N}L\left( y_i,\beta b(x_i;\gamma) \right)算法 (前向分步算法)输入：训练数据集$T=\{(x_{1},y_{1}),(x_2,y_2),…，(x_N,y_N)\}$ ，损失函数$L(y,f(x))$ 和基函数的集合$\{ b(x;\gamma) \}$ ； 输出：加法模型$f(x)$ . (1) 初始化$f_0(x)=0$ (2) 对$m=1,2,…,M$ &emsp;&emsp;(a) 极小化损失函数 (\beta_m,\gamma_m)=\arg \min\limits_{\beta,\gamma} \sum\limits_{i=1}^{N}L(y_i,f_{m-1}(x_i)+\beta b(x_i;\gamma))得到参数$\beta_m,\gamma_m$ &emsp;&emsp;(b) 更新 f_m(x)=f_{m-1}(x)+\beta_mb(x;\gamma_m)(3) 得到加法模型 f(x)=f_M(x)=\sum\limits_{m=1}^{M} \beta_mb(x;\gamma_m)&emsp;&emsp;这样，前向分步算法将同时求解从$m=1$ 到$M$ 所有参数$\beta_m,\gamma_m$ 的优化问题简化为逐次求解各个$\beta_m,\gamma_m$ 的优化问题。 前向分步算法与AdaBoost&emsp;&emsp;由前向分步算法可以推导出AdaBoost，AdaBoost算法是前向分歩加法算法的特例。这时，模型是由基本分类器组成的加法模型，损失函数是指数函数。 提升树&emsp;&emsp;提升树是以分类树或回归树为基本分类器的提升方法。提升树被认为是统计学习中性能最好的方法之一。 提升树模型&emsp;&emsp;提升方法实际采用加法模型（即基函数的线性组合）与前向分步算法。以决策树为基函数的提升方法称为提升树（boosting tree)。对分类问题决策树是二叉分类树，对回归问题决策树是二叉回归树。在原著例题中看到的基本分类器，可以看作是由一个根结点直接连接两个叶结点的简单决策树，即所谓的决策树桩（decision stump)。提升树模型可以表示为决策树的加法模型： f_M(x)=\sum\limits_{m=1}^{M} T(x;\Theta_m)其中，$T(x;\Theta_m)$ 表示决策树；$\Theta_m$ 为决策树的参数；$M$ 为树的个数。 提升树算法&emsp;&emsp;提升树算法采用前向分步算法。首先确定初始提升树$f_m(x)=0$ ,第$m$ 歩的模型是 f_m(x)=f_{m-1}(x)+T(x;\Theta_m)其中，$f_{m-1}(x)$ 为当前模型，通过经验风险极小化确定下一棵决策树的参数$\Theta_m$ \hat\Theta_m=\arg\min\limits_{\Theta_m} \sum\limits_{i=1}^{N}L(y_i,f_{m-1}(x_i)+T(x_i;\Theta_m))&emsp;&emsp;由于树的线性组合可以很好地拟合训练数据，即使数据中的输入与输出之间的关系很复杂也是如此，所以提升树是一个髙功能的学习算法。 &emsp;&emsp;不同问题有大同小异的提升树学习算法，其主要区别在于使用的损失函数不同。包括用平方误差损失函数的回归问题，用指数损失函数的分类问题，以及用一般损失函数的一般决策问题。 &emsp;&emsp;对于二类分类问题，提升树算法只需将AdaBoost算法中的基本分类器限制为二类分类树即可，可以说这时的提升树算法是AdaBoost算法的特殊情况。 算法 (回归问题的提升树算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X\subseteq\mathbb{R}^n$ ，$y_i\in Y\subseteq \mathbb{R}$ ； 输出：提升树$f_M(x)$ . (1) 初始化$f_0(x)=0$ (2) 对$m=1,2,…,M$ &emsp;&emsp;(a) 计算残差 \begin{matrix} r_{mi}=y_i-f_{m-1}(x_i) ,& i=1,2,...,N \end{matrix}&emsp;&emsp;(b) 拟合残差$r_{mi}$ 学习一个回归树，得到$T(x;\Theta_m)$ &emsp;&emsp;(c) 更新$f_m(x)=f_{m-1}(x)+T(x;\Theta_m)$ (3) 得到回归问题提升树 f_M(x)=\sum\limits_{m=1}^{M} T(x;\Theta_m)算法 (梯度提升算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X\subseteq\mathbb{R}^n$ ，$y_i\in Y\subseteq \mathbb{R}$ ，损失函数$L(y,f(x))$ ； 输出：回归树$\hat f(x)$ . (1) 初始化 f_0(x)=\arg\min\limits_c\sum\limits_{i=1}^{N}L(y_i,c)(2) 对$m=1,2,…,M$ &emsp;&emsp;(a) 对$i=1,2,…,N$ ，计算 r_{mi}=-\left[\frac{\partial L(y_i,f(x_i)) } {\partial f(x_i)}\right]_{f(x)=f_{m-1}(x)}&emsp;&emsp;(b) 对$r_{mi}$ 拟合一个回归树，得到第$m$ 棵树的叶节点区域$R_{mj},j=1,2,…,J$ &emsp;&emsp;(c) 对$j=1,2,…,J$ ，计算 c_{mj}=\arg\min\limits_c\sum\limits_{x_i\in R_{mj}}L(y_i,f_{m-1}(x_i)+c)&emsp;&emsp;(d) 更新$f_m(x)=f_{m-1}(x)+\sum\limits_{j=1}^{J}c_{mj}I(x\in R_{mj})$ (3) 得到回归树 \hat f(x)=f_M(x)=\sum\limits_{m=1}^M\sum\limits_{j=1}^Jc_{mj}I(x\in R_{mj})参考文章 提升方法 《统计学习方法（李航）》讲义 第08章 提升方法 提升方法及AdaBoost]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Boosting</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——支持向量机]]></title>
    <url>%2F2018%2F05%2F14%2FSVM%2F</url>
    <content type="text"><![CDATA[## 支持向量机 &emsp;&emsp;支持向量机(support vector machines, SVM)是一种二类分类模型。它的基本模型是定义在特征空间上的间隔最大的线性分类器；支持向量机还包括核技巧，这使它成为实质上的非线性分类器。支持向量机的学习策略就是间隔最大化，可形式化为一个求解凸二次规划(convex quadratic programming)的问题，也等价于正则化的合页损失函数的最小化问。支持向量机的学习算法是求解凸二次规划的最优化算法。 &emsp;&emsp;支持向量机，其含义是通过支持向量运算的分类器。 &emsp;&emsp;支持向量：在求解的过程中，会发现只根据部分数据就可以确定分类器，这些数据称为支持向量。 线性可分支持向量机线性可分支持向量机&emsp;&emsp;支持向量机的输入空间和特征空间是不同的，输入空间为欧氏空间或离散集合，特征空间是欧氏空间或希尔伯特空间。希尔伯特空间其实就可以当做欧氏空间的扩展，其空间维度可以是任意维的，包括无穷维，并且具有欧氏空间不具备的完备性。 &emsp;&emsp;这时，我们需要先回忆一下感知机 ，因为这两个的决策函数是类似的： &emsp;&emsp;给定线性可分训练数据集，通过间隔最大化或等价地求解相应的凸二次规划问题学习得到的分离超平面为： w^∗\cdot x+b^∗=0&emsp;&emsp;以及相应的分类决策函数： f(x)=sign(w^∗\cdot x+b^∗)称为线性可分支持向量机。 &emsp;&emsp;感知机通过训练一个超平面将平面或空间线性可分的点进行划分。 线性可分支持向量机也是如此，通过找寻分割平面来划分数据集。两者的区别，感知机的学习策略是误分类点到超平面距离和最小化，而线性可分支持向量机是基于硬间隔最大化的。 函数间隔与几何间隔&emsp;&emsp;函数间隔：对于给定的训练数据集T和超平面$(w, b)$ ，定义超平面关于样本点$(x_i, y_i)$ 的函数间隔为 \hat\gamma_i=y_i(w\cdot x_i+b)&emsp;&emsp;定义超平面$(w,b)$ 关于训练数据集T的函数间隔为超平面$(w,b)$ 关于T中所有样本点$(x_i, y_i)$ 的函数间隔之最小值，即 \hat\gamma=\min\limits_{i=1,2,...,N} \hat\gamma_i&emsp;&emsp;函数间隔可以表示分类预测的正确性及确信度。但是成比例地改变$w$ 和$b$ ，例如将它们改为$2w$ 和$2b$ ，超平面并没有改变，但函数间隔却成为原来的2倍。 &emsp;&emsp;对分离超平面的法向量、加某些约束，如规范化，$\left |w\right |=1$ ，使得间隔是确定的。这时函数间隔成为几何间隔。 &emsp;&emsp;几何间隔：对于给定的训练数据集T和超平面$(w, b)$ ，定义超平面关于样本点$(x_i, y_i)$ 的函数间隔为 \gamma_i=y_i\left( \frac{w}{\left\| w \right \|}\cdot x_i+\frac{b}{\left\| w \right \|} \right)&emsp;&emsp;定义超平面$(w,b)$ 关于训练数据集T的函数间隔为超平面$(w,b)$ 关于T中所有样本点$(x_i, y_i)$ 的函数间隔之最小值，即 \gamma=\min\limits_{i=1,2,...,N}\gamma_i&emsp;&emsp;函数间隔和几何间隔的关系: \gamma_i=\frac{\hat\gamma_i}{\left\| w \right \|}\gamma=\frac{\hat\gamma}{\left\| w \right \|}&emsp;&emsp;如果超平面参数$w$ 和$b$ 成比例地改变(超平面没有改变)，函数间隔也按此比例改变，而几何间隔不变。 间隔最大化&emsp;&emsp;支持向量机学习的基本想法是求解能够正确划分训练数据集并且几何间隔最大的分离超平面。对线性可分的训练数据集而言，线性可分分离超平面有无穷多个(等价于感知机)，但是几何间隔最大的分离超平面是唯一的。这里的间隔最大化又称为硬间隔最大化。 &emsp;&emsp;间隔最大化的直观解释是：对训练数据集找到几何间隔最大的超平面意味着以充分大的确信度对训练数据进行分类，也就是说，不仅将正负实例点分开，而且对最难分的实例点(离超平面最近的点)也有足够大的确信度将它们分开。 &emsp;&emsp;这个问题可以表示为下面的约束最优化问题： \begin{matrix} \max\limits_{w,b} & \gamma \\s.t. & y_i\left( \frac{w}{\left\| w \right\|}\cdot x_i+\frac{b}{\left\| w \right\|} \right) \geq \gamma, & i=1,2,...,N \end{matrix}&emsp;&emsp;即： \begin{matrix} \max\limits_{w,b} & \frac{\hat\gamma}{\left\| w \right\|} \\s.t. & y_i\left( w\cdot x_i+b \right) \geq \hat\gamma, & i=1,2,...,N \end{matrix}&emsp;&emsp;由于\hat\gamma 的取值并不影响最优化，所以这里我们为了计算方便取\hat\gamma=1 .目标函数变为： \max\limits_{w,b} \frac{1}{\left\| w \right\|}&emsp;&emsp;因为最大化$\frac{1}{\left| w \right|}$ 等价于最小化$\frac{1}{2}\left| w \right|^2$ (为什么？因为要将目标函数转换为一个凸二次规划问题，从而满足后面求对偶问题需要的KKT条件(什么是KKT条件？维基百科：KKT条件)，而且使所求的解为全局最优解。系数加个1/2是为了求导的时候约去系数，计算方便。)，从而将问题改写成： \begin{matrix} \max\limits_{w,b} & \frac{1}{2}\left\|w\right\|^2 \\s.t. & y_i\left( w\cdot x_i+b \right)-1 \geq0, & i=1,2,...,N \end{matrix}算法 (线性可分支持向量机学习算法——最大间隔法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，$i=1,2,…,N$ ； 输出：最大间隔分离超平面和分类决策函数。 (1) 构造并求解约束最优化问题： \begin{matrix} \max\limits_{w,b} & \frac{1}{2}\left\|w\right\|^2 \\s.t. & y_i\left( w\cdot x_i+b \right)-1 \geq0, & i=1,2,...,N \end{matrix}求得最优解$w^,b^$ . (2) 由此得到分离超平面： w^*\cdot x+b^*=0分类决策函数 f(x)=sign(w^*\cdot x+b^*)学习的对偶算法&emsp;&emsp;构建拉格朗日函数(Lagrange function)，引进拉格朗日乘子(Lagrange multiplier)： L(w,b,\alpha)=\frac{1}{2}\left\|w\right\|^2-\sum\limits_{i=1}^{N} \alpha_iy_i(w\cdot x_i+b)+\sum\limits_{i=1}^{N}\alpha_i&emsp;&emsp;根据拉格朗日对偶性，原始问题的对偶问题是拉格朗日函数的极大极小问题 \max\limits_{\alpha}\min\limits_{w,b}L(w,b,\alpha)&emsp;&emsp;设$a^$是对偶最优化问题的解，则存在下标$j$ 使得$a_j^ &gt;0$ ，并可按下式求得原始最优化问题的解: w^*=\sum\limits_{i=1}^{N}\alpha_i^*y_ix_ib^*=y_i-\sum\limits_{i=1}^{N}\alpha_i^*y_i(x_i\cdot x_j)算法 (线性可分支持向量机学习算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，$i=1,2,…,N$ ； 输出：分离超平面和分类决策函数。 (1) 构造并求解约束最优化问题： \min\limits_{\alpha} \frac{1}{2}\sum\limits_{i=1}^{N}\sum\limits_{j=1}^{N} \alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum\limits_{i=1}^{N}\alpha_i\begin{matrix}s.t. & \sum\limits_{i=1}^{N}\alpha_iy_i=0\end{matrix}\alpha_i\geq0,i=1,2,...,N求得最优解\alpha^*=(\alpha_1^*,\alpha_2^*,...,\alpha_N^*)^T . (2) 计算 w^*=\sum\limits_{i=1}^{N}\alpha_i^*y_ix_i并选择$\alpha^$ 的一个正分量$\alpha_j^&gt;0$ ，计算 b^*=y_i-\sum\limits_{i=1}^{N}\alpha_i^*y_i(x_i\cdot x_j)(3) 求得分离超平面 w^*\cdot x+b^*=0分类决策函数： f(x)=sign(w^*\cdot x+b^*)线性支持向量机&emsp;&emsp;上面所说的线性可分支持向量机是基于训练样本线性可分的理想状态，当训练样本中存在噪声或者特异点而造成线性不可分时，就需要用到线性支持向量机。 &emsp;&emsp;在线性可分支持向量机中，我们假设函数间隔$\hat\gamma$ 为1，若存在噪声或特异点函数间隔处于 $(0,1)$ 中间，那么这些点就不满足问题的约束条件，也就线性不可分。为了解决这样的问题，引入了松弛变量$\xi_i\geq0$ ，使得函数间隔与松弛变量的和大于等于1，从而约束条件变为： y_i(w\cdot x_i+b)\geq1-\xi_i&emsp;&emsp;同时因为约束条件引入了$\xi_i$ ，所以目标函数也要改变，改为： \frac{1}{2}\left\| w \right\|^2+C\sum\limits_{i=1}^N \xi_i&emsp;&emsp;这里，$C&gt;0$ 称为惩罚参数，由问题决定。 &emsp;&emsp;依然构造拉格朗日函数，并转换为对偶问题： \begin{matrix}\min\limits_{\alpha} & \frac{1}{2}\sum\limits_{i=1}^{N}\sum\limits_{j=1}^{N} \alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum\limits_{i=1}^{N}\alpha_i \end{matrix}\begin{matrix}s.t. & \sum\limits_{i=1}^{N}\alpha_iy_i=0\end{matrix}0\leq\alpha_i\leq C,i=1,2,...,N&emsp;&emsp;其拉格朗日函数是 L(w,b,\xi,\alpha,\mu)\equiv \frac{1}{2}\left\| w \right\|^2+C\sum\limits_{i=1}^N \xi_i -\sum\limits_{i=1}^{N} \alpha_i(y_i(w\cdot x_i+b)-1+\xi_i)-\sum\limits_{i=1}^{N}\mu_i\xi_i其中，$\alpha_i\geq0,\mu_i\geq0$ . 算法 (线性支持向量机学习算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，$i=1,2,…,N$ ； 输出：分离超平面和分类决策函数。 (1) 选择惩罚参数$C&gt;0$ ，构造并求解凸二次规划问题： \begin{matrix}\min\limits_{\alpha} & \frac{1}{2}\sum\limits_{i=1}^{N}\sum\limits_{j=1}^{N} \alpha_i\alpha_jy_iy_j(x_i\cdot x_j)-\sum\limits_{i=1}^{N}\alpha_i \end{matrix}\begin{matrix}s.t. & \sum\limits_{i=1}^{N}\alpha_iy_i=0\end{matrix}0\leq\alpha_i\leq C,i=1,2,...,N求得最优解$\alpha^=(\alpha_1^,\alpha_2^,…,\alpha_N^)^T$ . (2) 计算 w^*=\sum\limits_{i=1}^{N}\alpha_i^*y_ix_i并选择$\alpha^$ 的一个分量$\alpha_j^$ 适合条件$0&lt;\alpha_j^*&lt;C$ ，计算 b^*=y_i-\sum\limits_{i=1}^{N}y_i\alpha_i^*(x_i\cdot x_j)(3) 求得分离超平面 w^*\cdot x+b^*=0分类决策函数： f(x)=sign(w^*\cdot x+b^*)支持向量&emsp;&emsp;支持向量有两种解释，一种是直观的解释，一种与对偶最优化问题的解$\alpha^*$ 联系起来。 1. 支持向量和间隔边界&emsp;&emsp;在线性可分情况下，训练数据集的样本点中与分离超平面跄离最近的样本点的实例称为支持向量( support vector )。支持向量是使约束条件式等号成立的点，即 y_i(w\cdot x_i+b)-1=0对$y_i=+1$ 的正例点，支持向量在超平面$H_1:w\cdot x+b=1$ 对$y_i=-1$ 的负例点，支持向量在超平面$H_2:w\cdot x+b=-1$ &emsp;&emsp;$H_1$ 和$H_2$ 之间的距离称为间隔(margin)。间隔依赖于分离超平面的法向量$w$ ，等于$\frac{2}{\left|w\right|}$ 。$H_1$ 和$H_2$ 称为间隔边界。 &emsp;&emsp;在决定分离超平面时只有支持向量起作用，而其他实例点并不起作用。如果移动支持向量将改变所求的解；但是如果移动其他实例点，甚至去掉这些点，则解是不会改变的。由于支持向量在确定分离超平面中起决定性作用，所以将这种分类模型称为支持向量机。支持向量的个数一般很少，所以支持向量机由很少的“重要的”训练样本确定。 2. 支持向量和对偶最优化问题的解$α^∗$&emsp;&emsp;在线性可分支持向量机中，$(w^∗,b^∗)$只依赖于训练数据中对应于$α^∗_i&gt;0$的样本点$(x_i,y_i)$ ，而其他样本点对$(w^∗,b^∗)$ 没有影响，将训练数据中对应于$α^∗_i&gt;0$ 的实例点$(x_i,y_i)$ 称为支持向量。 &emsp;&emsp;支持向量一定在间隔边界上，由KKT互补条件可知: α^∗_i(y_i(w^∗⋅x_i+b^∗)−1)=0,i=1,2,⋯,N&emsp;&emsp;对应于$α^∗_i&gt;0$ 的实例点$(x_i,y_i)$ ，则有： y_i(w^∗⋅x_i+b^∗)−1=0&emsp;&emsp;即$(x_i,y_i)$ 一定在间隔边界上，和前面的的支持向量定义是一致的。 &emsp;&emsp;同时可以得出，非支持向量对应的$α^∗_i=0$，因为$y_i(w^∗⋅x_i+b^∗)−1&gt;0$ ，故$α^∗_i=0$ 。 合页损失函数&emsp;&emsp;线性支持向量机学习还有另外一种解释，就是最小化以下目标函数 \sum\limits_{i=1}^{N}\left [1-y_i(w\cdot x_i+b) \right]_++\lambda\left\|w \right\|^2&emsp;&emsp;目标函数的第1项是经验损失或经验风险，函数 L(y(w\cdot x+b))=\left[1-y(w\cdot x+b) \right]_+称为合页损失函数.下标“+”表示下取正值的函数 \left [ z \right ]_+=\begin{cases}z, & \text{ } z>0 \\ 0 & \text{ } z\leq0\end{cases}&emsp;&emsp;合页损失函数不仅要分类正确，而且确信度足够高时损失才是0。 非线性支持向量机核技巧非线性分类问题：如果能用$\mathbb{R}^n$ 中的一个超曲面将正负例正确分开，则称这个问题为非线性可分问题. 求解方法：进行非线性变换，将非线性问题变成线性问题。 &emsp;&emsp;学习是隐式地在特征空间进行的，不需要显式地定义特征空间和映射函数。这样的技巧称为核技巧。 &emsp;&emsp;核技巧应用到支持向量机，其基本想法就是通过一个非线性变换将输入空间(欧氏空间$\mathbb{R}^n$ 或离散集合)对应于一个特征空间(希尔伯特空间$H$ )，使得在输入空间$\mathbb{R}^n$ 中的超曲面模型对应于特征空间$H$ 中的超平面模型(支持向量机)。 &emsp;&emsp;设$X$ 是输入空间，$H$ 为特征空间，如果存在一个映射映射函数 \phi(x):X\rightarrow H&emsp;&emsp;使得对所有$x,z\in X$ ，函数$K(x,z)$ 满足条件 K(x,z)=\phi(x)\cdot \phi(z)则称$K(x,z)$ 为核函数。 &emsp;&emsp;核技巧的想法是，在学习与预测中只定义核函数$K(x,z)$ ，而不显式地定义映射函数。对于给定的核$K(x,z)$ ，特征空间x和映射函数的取法并不唯一，可以取不同的特征空间，即便是在同一特征空间里也可以取不同的映射。 &emsp;&emsp;在对偶问题的目标函数中的内积$(x_i\cdot x_j)$ 可以用核函数$K(x_i, x_j)$ 来代替： w(\alpha)= \frac{1}{2}\sum\limits_{i=1}^{N}\sum\limits_{j=1}^{N} \alpha_i\alpha_jy_iy_jK(x_i,x_j)-\sum\limits_{i=1}^{N}\alpha_i&emsp;&emsp;分类决策函数也可用核函数代替，变为： f(x)=sign\left( \sum\limits_{i=1}^{N_s}a_i^*y_i\phi(x_i)\cdot\phi(x)+b^* \right)=sign\left( \sum\limits_{i=1}^{n_s}a_i^*y_iK(x_i,x)+b^* \right)&emsp;&emsp;这等价于经过映射函数将原来的输入空间变换到一个新的特征空间，将输入空间中的内积$x_i\cdot x_j$ 变换为特征空间中的内积$\phi(x_i)\cdot \phi(x_j)$ . &emsp;&emsp;在新的特征空间里从训练样本中学习线性支持向量机。当映射函数是非线性函数时，学习到的含有核函数的支持向量机是非线性分类模型。 &emsp;&emsp;在核函数给定的条件下，可以利用解线性分类问题的方法求解非线性分类问题的支持向量机。 &emsp;&emsp;这里给出判定正定核的充要条件： &emsp;&emsp;设$Κ：X\times X→\mathbb{R}$ 是对称函数，则$Κ(x,z)$ 为正定核函数的充要条件是对任意$x_i∈X$ ,$i=1,2,…,m$,$Κ(x,z)$ 对应的Gram矩阵： K=\left [ K(x_i,x_j) \right]_{m\times n}是半正定矩阵。 &emsp;&emsp;由充要条件可以给出判定正定核的等价定义： &emsp;&emsp;设$X$ 为输入空间，$Κ(x,z)$ 是定义在$X\times X$ 对称函数，如果对任意$x_i∈X$ , $i=1,2,…,m$ , $Κ(x,z)$ 对应的Gram矩阵： K=\left [ K(x_i,x_j) \right]_{m\times n}是半正定矩阵，则称$Κ(x,z)$ 是正定核。 符合这样条件的函数，我们称它为正定核函数。 注意：也有的核函数是非正定核，如多元二次核函数$K(x,z)=(\left| x-z \right|^2+c^2)^{\frac{1}{2}}$ &emsp;&emsp;在实际应用中，还经常用到Mercer定理还确定核函数。由Mercer定理得到的核函数称为Mercer核，正定核比Mercer核更具有一般性，因为正定核要求函数为定义空间上的对称函数，而Mercer核要求函数为对称连续函数。 常用核函数1. 线性核函数&emsp;&emsp;线性核函数是最简单的核函数，是径向基核函数的一个特例，公式为： K(x,z)=x^Ty+c&emsp;&emsp;主要用于线性可分的情形，在原始空间中寻找最优线性分类器，具有参数少速度快的优势。 2. 多项式核函数&emsp;&emsp;多项式核适合于正交归一化数据，公式为： K(x,z)=(x\cdot z+1)^p&emsp;&emsp;多项式核函数属于全局核函数，允许相距很远的数据点对核函数的值有影响。参数$p$ 越大，映射的维度越高，计算量就会越大。当$p$ 过大时，学习复杂性也会过高，易出现过拟合。 3. 径向基核函数&emsp;&emsp;径向基核函数属于局部核函数，当数据点距离中心点变远时，取值会变小，公式为： K(x,z)=\exp(-\gamma\left\| x-z \right\|^2)4. 高斯核函数&emsp;&emsp;高斯核函数可以看作是径向基核函数的另一种形式： K(x,z)=\exp\left(-\frac{\left\| x-z \right\|^2}{2\sigma^2}\right)&emsp;&emsp;高斯(径向基)核对数据中存在的噪声有着较好的抗干扰能力，由于其很强的局部性，其参数决定了函数作用范围，随着参数$\sigma$ 的增大而减弱。 5. 字符串核函数&emsp;&emsp;核函数不仅可以定义在欧氏空间上，还可以定义在离散数据的集合上。字符串核函数是定义在字符串集合上的核函数，可以直观地理解为度量一对字符串的相似度，在文本分类、信息检索等方面都有应用。 k_n(s,t)=\sum\limits_{u\in\Sigma^n}[\phi_n(s)]_u[\phi_n(t)]_u=\sum\limits_{u\in\Sigma^n}\sum\limits_{(i,j):s(i)=t(j)=u}\lambda^{l(i)}\lambda^{l(j)}&emsp;&emsp;字符串核函数$k_n(s,t)$ 给出了字符串$s$ 和$t$ 中长度等于$n$ 的所有子串组成的特征向量的余弦相似度。两个字符串相同的子串越多，他们就越相似，字符串核函数的值就越大。字符串核函数可以由动态规划快速的计算。 6. Sigmoid核函数&emsp;&emsp;Sigmoid核函数来源于神经网络，被广泛用于深度学习和机器学习中，公式为： K(x,z)=\tanh(x\cdot z+c)&emsp;&emsp;采用Sigmoid函数作为核函数时，支持向量机实现的就是一种多层感知器神经网络。支持向量机的理论基础（凸二次规划）决定了它最终求得的为全局最优值而不是局部最优值，也保证了它对未知样本的良好泛化能力。 算法 (非线性支持向量机学习算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，$i=1,2,…,N$ ； 输出：分类决策函数。 (1) 选择惩罚参数$C&gt;0$ ，构造并求解凸二次规划问题： \begin{matrix}\min\limits_{\alpha} & \frac{1}{2}\sum\limits_{i=1}^{N}\sum\limits_{j=1}^{N} \alpha_i\alpha_jy_iy_jK(x_i,x_j)-\sum\limits_{i=1}^{N}\alpha_i \end{matrix}\begin{matrix}s.t. & \sum\limits_{i=1}^{N}\alpha_iy_i=0\end{matrix}0\leq\alpha_i\leq C,i=1,2,...,N求得最优解$\alpha^=(\alpha_1^,\alpha_2^,…,\alpha_N^)^T$ . (2) 选择$\alpha^$ 的一个分量$\alpha_j^$ 适合条件$0&lt;\alpha_j^*&lt;C$ ，计算 b^*=y_i-\sum\limits_{i=1}^{N}y_i\alpha_i^*K(x_i, x_j)(3) 分类决策函数： f(x)=sign\left( \sum\limits_{i=1}^{n_s}a_i^*y_iK(x_i,x)+b^* \right)SMO算法&emsp;&emsp;SMO算法是一种启发式算法，其基本思路是：如果所有变量的解都满足此最优化问题的KKT条件(Karush-Kuhn-Tucker conditions)，那么这个最优化问题的解就得到了。因为KKT条件是该最优化问题的充分必要条件。否则，选择两个变量，固定其他变量，针对这两个变量构建一个二次规划问题。这个二次规划问题关于这两个变量的解应该更接近原始二次规划问题的解，因为这会使得原始二次规划问题的目标函数值变得更小。重要的是，这时子问题可以通过解析方法求解，这样就可以大大提高整个算法的计算速度。子问题有两个变量，一个是违反KKT条件最严重的那一个，另一个由约束条件自动确定。如此，SMO算法将原问题不断分解为子问题并对子问题求解，进而达到求解原问题的目的。 概要：SMO方法的中心思想是每次取一对$α_i$ 和$α_j$ ，调整这两个值。 参数：训练数据/分类数据/$C$ /$\xi$ /最大迭代数 过程： 初始化$\alpha$为0； 在每次迭代中 （小于等于最大迭代数）， 找到第一个不满足KKT条件的训练数据，对应的$α_i$， 在其它不满足KKT条件的训练数据中，找到误差最大的x，对应的index的$α_j$ ， $α_i$ 和$α_j$ 组成了一对，根据约束条件调整$α_i$ , $α_j$ 。 &emsp;&emsp;整个SMO算法包括两个部分:求解两个变量二次规划的解析方法和选择变量的启发式方法. 坐标上升法&emsp;&emsp;假设有优化问题： \begin{matrix} \max\limits_{\alpha}&W(\alpha_1,\alpha_2,...,\alpha_m) \end{matrix}&emsp;&emsp;W是α向量的函数。利用坐标上升法（求目标函数的最小时即为坐标下降法）求解问题最优的过程如下： //循环到函数收敛 Loop until convergence{ ​ //依次选取一个变量，将其作为固定值 ​ For i = 1,2,…,m{​ \alpha_i = \arg \max \limits_{\alpha_i} W(\alpha_1,\alpha_2,...,\alpha_i,...,\alpha_m)​ }} &emsp;&emsp;算法的思想为：每次只考虑一个变量进行优化，将其他变量固定。这时整个函数可以看作只关于该变量的函数，可以对其直接求导计算。然后继续求其他分变量的值，整个内循环下来就得到了$\alpha$ 的一组值，若该组值满足条件，即为我们求的值，否则继续迭代计算直至收敛。 SMO算法&emsp;&emsp;参考坐标上升法，我们选择向量$\alpha$ 的一个变量，将其他变量固定进行优化，该处优化问题包含了约束条件， 变量必须满足等式约束$\sum\limits_{i=1}^{N}\alpha_iy_i=0$ ，所以每次选择两个变量进行优化 &emsp;&emsp;不失一般性，将设选择的两个变量为$\alpha_1，\alpha_2$，其他变量$\alpha_i (i=3,4,…,N)$ 是固定的。 于是优化问题的子问题可以写作： \begin{matrix}\min\limits_{\alpha_1,\alpha_2} & W(\alpha_1,\alpha_2)=\frac{1}{2}K_{11}\alpha_1^2+\frac{1}{2}K_{22}\alpha_2^2+y_1y_2K_{12}\alpha_1\alpha_2-(\alpha_1+\alpha_2) \\&+y_1\alpha_1\sum\limits_{i=3}^N y_i\alpha_iK_{i1}+y_2\alpha_2\sum\limits_{i=3}^{N}y_i\alpha_iK_i2\\s.t. & \alpha_1y_1+\alpha_2y_2=-\sum\limits_{i=3}^{N}y_i\alpha_i=\varsigma \\ & 0\leq\alpha_i\leq C,i=1,2 \end{matrix}其中，$K_{ij}=K(x_i,x_j),i,j=1,2,…,N$ ，$\varsigma$ 是常数。 &emsp;&emsp;现在的问题就是如何选择两个变量构造最优子问题。SMO采用启发式选择方法选择变量。所谓启发式，即每次选择拉格朗日乘子时，优先选择前面样本系数中满足条件$0&lt;α_i &lt; C$ 的 $α_i$ 作优化，不考虑约束条件中相等的情况是因为在界上的样例对应的系数$α_i$ 一般都不会改变。 &emsp;&emsp;通过启发式搜索找到第一个变量，因为要考虑算法的收敛性，第二个变量显然不是随便选的。实际上，只要选择的两个变量中有一个违背KKT条件，那么目标函数在一步迭代后值就会减小,并且我们希望找到的$α_2$ 在更新后能够有足够大的变化。 算法 (SMO算法)输入：线性可分训练数据集$T = \left \{ (x_1,y_1),(x_2,y_2),…,(x_N,y_N) \right \}$ ，其中，$x_i\in X=\mathbb{R}^n$ ，$y_i\in Y=\{-1,+1\}$ ，$i=1,2,…,N$ ，精度$\varepsilon$ ； 输出：近似解$\hat\alpha$。 (1) 取初值$\alpha^{(0)}=0$，令$k$ ； (2) 选取优化变量$\alpha_1^{(k)},\alpha_2^{(k)}$ ，解析求解两个变量的最优化问题，求得最优解$\alpha_1^{(k+1)},\alpha_2^{(k+1)}$ ，更新$\alpha$ 为$\alpha^{(k+1)}$ ； (3) 若精度$\varepsilon$ 范围内满足停机条件 \sum\limits_{i=1}^{N}\alpha_iy_i=00\leq\alpha_i\leq C,i=1,2,...,Ny_i\cdot g(x_i)=\begin{cases} \geq1,& \{x_i|\alpha_i=0\} \\=1,& \{x_i|0]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——感知机算法实战Iris数据集]]></title>
    <url>%2F2018%2F05%2F14%2Fpreceptron_Iris%2F</url>
    <content type="text"><![CDATA[关于感知机的相关理论知识请查看：感知机 关于Iris数据集 Iris也称鸢尾花卉数据集，是一类多重变量分析的数据集。数据集包含150个数据集，分为3类，每类50个数据，每个数据包含4个属性。可通过花萼长度，花萼宽度，花瓣长度，花瓣宽度4个属性预测鸢尾花卉属于（Setosa，Versicolour，Virginica）三个种类中的哪一类。 Iris以鸢尾花的特征作为数据来源，常用在分类操作中。该数据集由3种不同类型的鸢尾花的50个样本数据构成。其中的一个种类与另外两个种类是线性可分离的，后两个种类是非线性可分离的。 该数据集包含了5个属性： &amp; Sepal.Length（花萼长度），单位是cm; &amp; Sepal.Width（花萼宽度），单位是cm; &amp; Petal.Length（花瓣长度），单位是cm; &amp; Petal.Width（花瓣宽度），单位是cm; &amp; 种类：Iris Setosa（山鸢尾）、Iris Versicolour（杂色鸢尾），以及Iris Virginica（维吉尼亚鸢尾）。 代码实战先介绍一下如何搭建一个感知机，我们需要用到numpy库 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import numpy as npclass Perception(object): """ eta:学习率 n_iter:权重向量的训练次数 w_:神经分叉权重向量 error_:用于记录神经元判断出错次数 """ def __init__(self, eta = 0.01, n_iter = 10): self.eta = eta self.n_iter = n_iter pass def fit(self, x, y): """ 输入训练数据，培训神经元，x输入样本向量，y对应样本分类 x:shape[n_samples, n_features] x:[[1, 2, 3], [4, 5, 6]] n_samples:2 n_features:3 y:[1, -1] """ """ 初始化权重向量为0 加一是因为前面算法提到的w0，也就是步调函数的阈值 """ self.w_ = np.zeros(1 + x.shape[1]) self.errors_ = [] for _ in range(self.n_iter): errors = 0 """ x:[[1, 2, 3], [4, 5, 6]] y:[1, -1] zip(x,y) = [[1, 2, 3, 1], [4, 5, 6, -1]] """ for xi, target in zip(x, y): """ update = η * (y - y') """ update = self.eta * (target - self.predict(xi)) """ xi是一个向量 update * xi 等价： [▽w[1]=x[1]*update,▽w[2]=x[2]*update,▽w[3]=x[3]*update] """ self.w_[1:] += update * xi self.w_[0] += update errors += int(update != 0.0) self.errors_.append(errors) pass pass pass def net_input(self, x): return np.dot(x, self.w_[1:]) + self.w_[0] pass def predict(self, x): return np.where(self.net_input(x) &gt;= 0.0, 1, -1) pass 上面我们完成了一个最基本的感知机的搭建，下面我们就要开始处理数据了 首先，我们需要使用pandas库来读取数据 1234import pandas as pdfile = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'df= pd.read_csv(file,header=None)df.head(10) 我们查看一下前十行数据 通过这些数字我们并不能明显看出什么关系，所以接下来，我们用matplotlib库画出其中两种花的两个变量的关系，我这里选取的是花瓣长度和花茎的长度 12345678910111213import matplotlib.pyplot as plty = df.loc[0:100, 4].valuesy = np.where(y == 'Iris-setosa',-1,1)x = df.loc[0:100,[0,2]].valuesplt.scatter(x[:50,0],x[:50,1],color='red',marker='o',label='setosa')plt.scatter(x[50:100,0],x[50:100,1],color='blue',marker='x',label='versicolor')plt.xlabel('花瓣的长度')plt.ylabel('花茎的长度')plt.legend(loc = 'upper left')plt.show() 通过图像我们可以很明显地看出，这两种花具有的特点 下面我们调用之前定义好的感知机模型，让它学习这些数据，然后我们同样画出感知机学习过程中的错误次数 123456ppn = Perception(eta=0.1, n_iter=10)ppn.fit(x, y)plt.plot(range(1,len(ppn.errors_) + 1),ppn.errors_, marker='o')plt.xlabel('Epoch')plt.ylabel('错误分类次数')plt.show() 通过图中可以看出，在刚开始学习时，分类错误比较多，到后面就基本没有错误了 如果我们想要查看一下感知机学习出来的分离超平面可以定义如下一个绘图函数 1234567891011121314151617181920212223242526272829from matplotlib.colors import ListedColormapdef plot_decision_regions(x, y, classifier, resolution = 0.02): marker = ('s', 'x', 'o', 'v') colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan') cmap = ListedColormap(colors[:len(np.unique(y))]) x1_min, x1_max = x[:,0].min() - 1, x[:,0].max() x2_min, x2_max = x[:,1].min() - 1, x[:,1].max() #print(x1_min, x1_max) #print(x2_min, x2_max) xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution)) z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T) #print(xx1.ravel()) #print(xx2.ravel()) #print(z) z = z.reshape(xx1.shape) plt.contourf(xx1, xx2, z, alpha=0.4, cmap=cmap) plt.xlim(xx1.min(), xx1.max()) plt.ylim(xx2.min(), xx2.max()) for idx, cl in enumerate(np.unique(y)): plt.scatter(x=x[y==cl, 0],y=x[y==cl, 1], alpha=0.8, c=cmap(idx), marker=marker[idx], label=cl) 我们通过调用这个函数可以画出我们学习到的超平面 12345plot_decision_regions(x, y, ppn, resolution=0.02)plt.xlabel('花瓣的长度')plt.ylabel('花茎的长度')plt.legend(loc = 'upper left')plt.show() (PS: 在画图的时候忘记了中文的问题了。。。)]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Iris</tag>
        <tag>perceptron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——KNN实战Iris数据集]]></title>
    <url>%2F2018%2F05%2F14%2FKNN_Iris%2F</url>
    <content type="text"><![CDATA[关于KNN的相关理论知识请查看：KNN 关于Iris数据集的相关信息可查看我的上一篇博客：感知机算法实战Iris数据集 接下来的实战我们将使用sklearn库 代码实战首先，我们还是先导入数据集 123from sklearn.datasets import load_irisiris = load_iris()iris.data.shape (150, 4) sklearn的datasets都有详细的数据集信息，我们可以把这些信息打印出来查看 1print(iris.DESCR) Iris Plants DatabaseNotesData Set Characteristics: :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, predictive attributes and the class :Attribute Information: - sepal length in cm - sepal width in cm - petal length in cm - petal width in cm - class: - Iris-Setosa - Iris-Versicolour - Iris-Virginica :Summary Statistics: ============== ==== ==== ======= ===== ==================== Min Max Mean SD Class Correlation ============== ==== ==== ======= ===== ==================== sepal length: 4.3 7.9 5.84 0.83 0.7826 sepal width: 2.0 4.4 3.05 0.43 -0.4194 petal length: 1.0 6.9 3.76 1.76 0.9490 (high!) petal width: 0.1 2.5 1.20 0.76 0.9565 (high!) ============== ==== ==== ======= ===== ==================== :Missing Attribute Values: None :Class Distribution: 33.3% for each of 3 classes. :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 This is a copy of UCI ML iris datasets.http://archive.ics.uci.edu/ml/datasets/Iris The famous Iris database, first used by Sir R.A Fisher This is perhaps the best known database to be found in thepattern recognition literature. Fisher’s paper is a classic in the field andis referenced frequently to this day. (See Duda &amp; Hart, for example.) Thedata set contains 3 classes of 50 instances each, where each class refers to atype of iris plant. One class is linearly separable from the other 2; thelatter are NOT linearly separable from each other. References Fisher,R.A. “The use of multiple measurements in taxonomic problems”Annual Eugenics, 7, Part II, 179-188 (1936); also in “Contributions toMathematical Statistics” (John Wiley, NY, 1950). Duda,R.O., &amp; Hart,P.E. (1973) Pattern Classification and Scene Analysis.(Q327.D83) John Wiley &amp; Sons. ISBN 0-471-22361-1. See page 218. Dasarathy, B.V. (1980) “Nosing Around the Neighborhood: A New SystemStructure and Classification Rule for Recognition in Partially ExposedEnvironments”. IEEE Transactions on Pattern Analysis and MachineIntelligence, Vol. PAMI-2, No. 1, 67-71. Gates, G.W. (1972) “The Reduced Nearest Neighbor Rule”. IEEE Transactionson Information Theory, May 1972, 431-433. See also: 1988 MLC Proceedings, 54-64. Cheeseman et al”s AUTOCLASS IIconceptual clustering system finds 3 classes in the data. Many, many more … 按照一般机器学习的套路，我们将整个数据分成训练集和测试集，75%的训练集和25%的测试集 12from sklearn.cross_validation import train_test_splitX_train,X_test,Y_train,Y_test = train_test_split(iris.data,iris.target,test_size=0.25,random_state=33) 下一步，我们将数据进行标准化处理，然后导入KNN模型，进行训练（这些都是套路） 12345678910from sklearn.preprocessing import StandardScalerfrom sklearn.neighbors import KNeighborsClassifierss = StandardScaler()X_train = ss.fit_transform(X_train)X_test = ss.fit_transform(X_test)knc = KNeighborsClassifier()knc.fit(X_train,Y_train)y_predict = knc.predict(X_test) 最后，我们来检验一下模型的好坏 1234print('The accuracy of K-Nearest Neighbor Classifier is',knc.score(X_test,Y_test))from sklearn.metrics import classification_reportprint(classification_report(Y_test,y_predict,target_names=iris.target_names)) 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>KNN</tag>
        <tag>Iris</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——朴素贝叶斯实战新闻组数据集]]></title>
    <url>%2F2018%2F05%2F14%2Fnaive_bayes_news%2F</url>
    <content type="text"><![CDATA[## 朴素贝叶斯实战新闻组数据集 关于朴素贝叶斯的相关理论知识可查看：朴素贝叶斯法 关于新闻组数据集20newsgroups数据集是用于文本分类、文本挖据和信息检索研究的国际标准数据集之一。一些新闻组的主题特别相似(e.g. comp.sys.ibm.pc.hardware/comp.sys.mac.hardware)，还有一些却完全不相关 (e.g misc.forsale /soc.religion.christian)。 20个新闻组数据集包含大约18000个新闻组，其中20个主题分成两个子集:一个用于训练(或开发)，另一个用于测试(或用于性能评估)。训练集和测试集之间的分割是基于特定日期之前和之后发布的消息。 代码实战首先，还是导入数据集 12345from sklearn.datasets import fetch_20newsgroupsnews = fetch_20newsgroups(subset='all')print(len(news.data))print(news.data[0]) 我们这里打印出来一个新闻例子，如下 18846From: Mamatha Devineni Ratnam &#109;&#114;&#x34;&#55;&#43;&#x40;&#97;&#110;&#x64;&#114;&#101;&#x77;&#x2e;&#x63;&#x6d;&#x75;&#x2e;&#x65;&#100;&#117;Subject: Pens fans reactionsOrganization: Post Office, Carnegie Mellon, Pittsburgh, PALines: 12NNTP-Posting-Host: po4.andrew.cmu.edu I am sure some bashers of Pens fans are pretty confused about the lackof any kind of posts about the recent Pens massacre of the Devils. Actually,I am bit puzzled too and a bit relieved. However, I am going to put an endto non-PIttsburghers’ relief with a bit of praise for the Pens. Man, theyare killing those Devils worse than I thought. Jagr just showed you whyhe is much better than his regular season stats. He is also a lotfo fun to watch in the playoffs. Bowman should let JAgr have a lot offun in the next couple of games since the Pens are going to beat the pulp out of Jersey anyway. I was very disappointed not to see the Islanders lose the finalregular season game. PENS RULE!!! 接下来，划分数据集，还是75%训练集，25%测试集 12from sklearn.cross_validation import train_test_splitX_train,X_test,Y_train,Y_test = train_test_split(news.data,news.target,test_size=0.25,random_state=33) 我们需要对文本特征进行提取，我们这里使用CountVectorizer来提取特征。CountVectorizer能够将文本词块化，通过计算词汇的数量来将文本转化成向量（更多文本特征提取内容可查看https://www.cnblogs.com/Haichao-Zhang/p/5220974.html）。然后我们导入模型来学习数据。 123456789from sklearn.feature_extraction.text import CountVectorizervec = CountVectorizer()X_train = vec.fit_transform(X_train)X_test = vec.transform(X_test)from sklearn.naive_bayes import MultinomialNBmnb = MultinomialNB()mnb.fit(X_train,Y_train)y_predict = mnb.predict(X_test) 最后，我们还是一样，检验一下模型的准确度 123from sklearn.metrics import classification_reportprint('The Accuracy of Navie Bayes Classifier is',mnb.score(X_test,Y_test))print(classification_report(Y_test,y_predict,target_names = news.target_names)) 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>naive bayes</tag>
        <tag>20newsgroups</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——决策树算法实战Titanic数据集]]></title>
    <url>%2F2018%2F05%2F14%2Fdecision_tree_titanic%2F</url>
    <content type="text"><![CDATA[关于决策树的理论知识可以查看：决策树 Titanic数据集概述&emsp;&emsp;RMS泰坦尼克号的沉没是历史上最臭名昭着的沉船之一。 1912年4月15日，在首航期间，泰坦尼克号撞上一座冰山后沉没，2224名乘客和机组人员中有1502人遇难。这一耸人听闻的悲剧震撼了国际社会，导致了更好的船舶安全条例。预测是否有乘客幸存下来的泰坦尼克号。 代码实战首先，一如既往导入数据集，并查看一下部分数据 1234import pandas as pdtitanic = pd.read_csv('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt')titanic.head() info可以查看一下数据集的基本信息，我们可以看到数据集中有部分缺失值 1titanic.info() 12345678910111213141516&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; RangeIndex: 1313 entries, 0 to 1312&gt; Data columns (total 11 columns):&gt; row.names 1313 non-null int64&gt; pclass 1313 non-null object&gt; survived 1313 non-null int64&gt; name 1313 non-null object&gt; age 633 non-null float64&gt; embarked 821 non-null object&gt; home.dest 754 non-null object&gt; room 77 non-null object&gt; ticket 69 non-null object&gt; boat 347 non-null object&gt; sex 1313 non-null object&gt; dtypes: float64(1), int64(2), object(8)&gt; memory usage: 112.9+ KB 我们从中选取三个特征来对数据进行预测 1234X = titanic[['pclass','age','sex']]y = titanic['survived']X.info() 12345678&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; RangeIndex: 1313 entries, 0 to 1312&gt; Data columns (total 3 columns):&gt; pclass 1313 non-null object&gt; age 633 non-null float64&gt; sex 1313 non-null object&gt; dtypes: float64(1), object(2)&gt; memory usage: 30.9+ KB age具有缺失值，所以我们要对缺失值进行处理 12X['age'].fillna(X['age'].mean(),inplace=True)X.info() 12345678&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; RangeIndex: 1313 entries, 0 to 1312&gt; Data columns (total 3 columns):&gt; pclass 1313 non-null object&gt; age 1313 non-null float64&gt; sex 1313 non-null object&gt; dtypes: float64(1), object(2)&gt; memory usage: 30.9+ KB 之后就是将数据集划分成训练集和测试集 123456789from sklearn.cross_validation import train_test_splitX_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.25,random_state=33)from sklearn.feature_extraction import DictVectorizervec = DictVectorizer(sparse=False)X_train = vec.fit_transform(X_train.to_dict(orient='record'))print(vec.feature_names_)X_test = vec.fit_transform(X_test.to_dict(orient='record')) [‘age’, ‘pclass=1st’, ‘pclass=2nd’, ‘pclass=3rd’, ‘sex=female’, ‘sex=male’] 导入决策树模型，并进行预测 12345from sklearn.tree import DecisionTreeClassifierdtc = DecisionTreeClassifier()dtc.fit(X_train,Y_train)y_predict = dtc.predict(X_test) 最后，检查一下模型的效果 1234from sklearn.metrics import classification_reportprint(dtc.score(X_test,Y_test))print(classification_report(y_predict,Y_test,target_names=['died','survived'])) 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Titanic</tag>
        <tag>decision tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——逻辑斯谛回归实战breast cancer数据集]]></title>
    <url>%2F2018%2F05%2F14%2Flogistic_breast_cancer%2F</url>
    <content type="text"><![CDATA[更多有关逻辑斯谛回归的理论知识查看：逻辑斯谛回归 代码实战首先，我们还是先将需要用到的库导入，应为此数据集缺少名称，所以，使用pandas导入数据时，我们需要手动添加名称 12345678import pandas as pdimport numpy as npimport tensorflow as tfcolumn_names = ['Sample code number','Clump Thickness','Uniformity of Cell Size', 'Uniformity of Cell Shape','Marginal Adhesion','Single Epithelial Cell Size', 'Bare Nuclei','Bland Chromatin','Normal Nucleoli','Mitoses','Class']data = pd.read_csv('breast-cancer-train.csv',names=column_names)data.head() 为了更好的了解数据集的情况，我们查看一下数据信息 1234data.info()data = data.replace(to_replace='?',value=np.nan)data = data.dropna(how='any')data.shape 1234567891011121314151617&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; Int64Index: 683 entries, 0 to 698&gt; Data columns (total 11 columns):&gt; Sample code number 683 non-null int64&gt; Clump Thickness 683 non-null int64&gt; Uniformity of Cell Size 683 non-null int64&gt; Uniformity of Cell Shape 683 non-null int64&gt; Marginal Adhesion 683 non-null int64&gt; Single Epithelial Cell Size 683 non-null int64&gt; Bare Nuclei 683 non-null object&gt; Bland Chromatin 683 non-null int64&gt; Normal Nucleoli 683 non-null int64&gt; Mitoses 683 non-null int64&gt; Class 683 non-null int64&gt; dtypes: int64(10), object(1)&gt; memory usage: 84.0+ KB&gt; 接下来，我们将数据集划分为训练集和测试集 12from sklearn.cross_validation import train_test_splitx_train,x_test,y_train,y_test = train_test_split(data[column_names[1:10]],data[column_names[10]],test_size=0.25,random_state=33) 将数据标准化，导入逻辑斯谛回归模型，然后就可以进行预测了 123456789101112from sklearn.preprocessing import StandardScalerfrom sklearn.linear_model import LogisticRegressionss = StandardScaler()x_train = ss.fit_transform(x_train)x_test = ss.transform(x_test)print(X_train.shape,Y_train.shape)lr = LogisticRegression()lr.fit(x_train,y_train)y_predict = lr.predict(x_test) 最后，我们查看一下模型的效果 12from sklearn.metrics import classification_reportprint(lr.score(x_test,y_test)) 0.988304093567 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>logistic</tag>
        <tag>breast cancer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——线性支持向量机实战digits数据集]]></title>
    <url>%2F2018%2F05%2F14%2FSVM_digits%2F</url>
    <content type="text"><![CDATA[关于支持向量机的理论知识查看：支持向量机 digits数据集概述digits.data：手写数字特征向量数据集，每一个元素都是一个64维的特征向量。 digits.target：特征向量对应的标记，每一个元素都是自然是0-9的数字。 digits.images：对应着data中的数据，每一个元素都是8*8的二维数组，其元素代表的是灰度值，转化为以为是便是特征向量。 代码实战先导入数据，我们直接使用sklearn为我们准备好的数据集 1234from sklearn.datasets import load_digitsdigits = load_digits()digits.data.shape (1797, 64) 将数据集进行划分 12from sklearn.cross_validation import train_test_splitX_train,X_test,Y_train,Y_test = train_test_split(digits.data,digits.target,test_size=0.25,random_state=33) 数据标准化，导入线性支持向量机并训练 12345678910from sklearn.preprocessing import StandardScalerfrom sklearn.svm import LinearSVCss = StandardScaler()X_train = ss.fit_transform(X_train)X_test = ss.fit_transform(X_test)lsvc = LinearSVC()lsvc.fit(X_train,Y_train)Y_predict = lsvc.predict(X_test) 然后，我们对模型进行评估 1print('The Accuracy of Linear SVC is',lsvc.score(X_test,Y_test)) The Accuracy of Linear SVC is 0.948888888889 12from sklearn.metrics import classification_reportprint(classification_report(Y_test,Y_predict,target_names=digits.target_names.astype(str))) 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>SVM</tag>
        <tag>digits</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门实战——支持向量机实战Boston房价数据集]]></title>
    <url>%2F2018%2F05%2F14%2FSVM_boston%2F</url>
    <content type="text"><![CDATA[更多支持向量机的理论知识查看：支持向量机 该数据集来源于1978年美国某经济学杂志上。该数据集包含若干波士顿房屋的价格及其各项数据，每个数据项包含14个数据，分别是房屋均价及周边犯罪率、是否在河边等相关信息，其中最后一个数据是房屋均价。 代码实战这里我们说简单点儿，我们从sklearn中的datasets中导入数据集，导入需要的库，将数据集进行划分，再标准化 1234567891011121314151617181920from sklearn.datasets import load_bostonboston = load_boston()from sklearn.cross_validation import train_test_splitimport numpy as npX = boston.datay = boston.targetX_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.25,random_state=33)from sklearn.preprocessing import StandardScalerss_X = StandardScaler()ss_Y = StandardScaler()X_train = ss_X.fit_transform(X_train)X_test = ss_X.fit_transform(X_test)Y_train = ss_Y.fit_transform(Y_train)Y_test = ss_Y.fit_transform(Y_test) 由于支持向量机的核函数我们可以自己选择，所以我们选择三种核函数进行对比 123456789101112from sklearn.svm import SVRlinear_svr = SVR(kernel='linear')linear_svr.fit(X_train,Y_train)linear_svr_y_predict = linear_svr.predict(X_test)poly_svr = SVR(kernel='poly')poly_svr.fit(X_train,Y_train)poly_svr_y_predict = poly_svr.predict(X_test)rbf_svr = SVR(kernel='rbf')rbf_svr.fit(X_train,Y_train)rbf_svr_y_predict = rbf_svr.predict(X_test) 我们来分别检测一下模型的性能 123456789101112from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_errorprint("The value of R-squared of linear SVR is",linear_svr.score(X_test,Y_test))print("The mean squared error of linear SVR is",mean_squared_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(linear_svr_y_predict)))print("The mean absolute error of linear SVR is",mean_absolute_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(linear_svr_y_predict)))print("The value of R-squared of poly SVR is",poly_svr.score(X_test,Y_test))print("The mean squared error of poly SVR is",mean_squared_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(poly_svr_y_predict)))print("The mean absolute error of poly SVR is",mean_absolute_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(poly_svr_y_predict)))print("The value of R-squared of RBF SVR is",rbf_svr.score(X_test,Y_test))print("The mean squared error of RBF SVR is",mean_squared_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(rbf_svr_y_predict)))print("The mean absolute error of RBF SVR is",mean_absolute_error(ss_Y.inverse_transform(Y_test),ss_Y.inverse_transform(rbf_svr_y_predict))) The value of R-squared of linear SVR is 0.654497663771The mean squared error of linear SVR is 26.7906984256The mean absolute error of linear SVR is 3.41002068375The value of R-squared of poly SVR is 0.23496198912The mean squared error of poly SVR is 59.3220377532The mean absolute error of poly SVR is 4.19595019294The value of R-squared of RBF SVR is 0.71072756206The mean squared error of RBF SVR is 22.4305593192The mean absolute error of RBF SVR is 2.81406224321 代码参考：《Python机器学习及实践：从零开始通往Kaggle竞赛之路》]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>SVM</tag>
        <tag>Boston</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Unreal Circle（北京站）（多图）]]></title>
    <url>%2F2018%2F04%2F01%2FUnreal_Circle%2F</url>
    <content type="text"><![CDATA[有幸参加了Unreal Circle北京站的活动，晒一下活动时的照片]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>Unreal Circle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝桥杯日常刷题——历届试题1434：回文数字]]></title>
    <url>%2F2018%2F03%2F17%2FPalindromeNum%2F</url>
    <content type="text"><![CDATA[题目描述 观察数字：12321，123321 都有一个共同的特征，无论从左到右读还是从右向左读，都是相同的。这样的数字叫做：回文数字。本题要求你找到一些5位或6位的十进制数字。满足如下要求：该数字的各个数位之和等于输入的整数。 输入 一个正整数 n (10&lt; n&lt; 100), 表示要求满足的数位和。 输出 若干行，每行包含一个满足要求的5位或6位整数。数字按从小到大的顺序排列。如果没有满足条件的，输出：-1 样例输入 144 样例输出 1234567891011121314151617181920212299899499994589985598895679976688886697796769967778877787787796697859958868868877778886688895598949949958859967769976679985589994499 题目分析 解法一： 暴力破解法 既然题目中说了是五位和六位的数字，那么我们可以直接遍历从10000到999999的所有数字，从中进行筛选 题目代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;using namespace std;int n;bool flag = false;bool huiwen(long a)&#123; long temp = a; long b = 0; while(temp)&#123; b = b*10; b += temp % 10; temp /= 10; &#125; return a == b;&#125;bool xiangjia(long a)&#123; long sum = 0; while(a)&#123; sum += a%10; a /= 10; &#125; if(sum == n)&#123; return true; &#125; return false;&#125;int main()&#123; cin &gt;&gt; n; for(long i = 10000; i &lt; 1000000; i++)&#123; if(huiwen(i))&#123; if(xiangjia(i)) &#123; cout &lt;&lt; i &lt;&lt; endl; flag = true; &#125; &#125; &#125; if(!flag) cout &lt;&lt; "-1" &lt;&lt; endl; return 0;&#125; 解法二： 暴力破解法虽然简单但是遍历10000到999999之间的所有数浪费了很多时间，所以为了降低运行时间，我们将每一位单独讨论首尾相等我们用一个变量保存，这样下来，我们只需遍历9^3次。 题目代码 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;using namespace std;bool flag = false;void solve(int x,int y,int z,int n)&#123; int a[3] = &#123;0,0,0&#125;; for(a[0] = 1 ;a[0]&lt;=9;a[0]++) for(a[1] = 0 ;a[1]&lt;=9;a[1]++) for(a[2] = 0 ;a[2]&lt;=9;a[2]++) if(z == 1)&#123; if(x*a[0]+y*a[1]+z*a[2] == n)&#123; cout&lt;&lt;a[0]&lt;&lt;a[1]&lt;&lt;a[2]&lt;&lt;a[1]&lt;&lt;a[0]&lt;&lt;endl; flag = true; &#125; &#125; else&#123; if(x*a[0]+y*a[1]+z*a[2] == n)&#123; cout&lt;&lt;a[0]&lt;&lt;a[1]&lt;&lt;a[2]&lt;&lt;a[2]&lt;&lt;a[1]&lt;&lt;a[0]&lt;&lt;endl; flag = true; &#125; &#125;&#125;int main()&#123; int n = 0; cin&gt;&gt;n; solve(2,2,1,n); solve(2,2,2,n); if(flag == false) cout&lt;&lt;"-1"&lt;&lt;endl; return 0;&#125; 原题链接：C语言网]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝桥杯日常刷题——练习1097：蛇行矩阵]]></title>
    <url>%2F2018%2F03%2F17%2FSnakeMat%2F</url>
    <content type="text"><![CDATA[题目描述 蛇形矩阵是由1开始的自然数依次排列成的一个矩阵上三角形。 输入 本题有多组数据，每组数据由一个正整数N组成。（N不大于100） 输出 对于每一组数据，输出一个N行的蛇形矩阵。两组输出之间不要额外的空行。矩阵三角中同一行的数字用一个空格分开。行尾不要多余的空格。 样例输入 15 样例输出 123451 3 6 10 152 5 9 144 8 137 1211 题目分析 解法一： 如果，我们只从数学规律角度去分析这道题，应该把这道问题分成行和列来分别计算 列的规律 1234511+11+1+21+1+2+3... 我们可以写成公式1+\sum\limits_{i = 1}^{n}(i-1) 而行的规律 121 1+2 1+2+3 1+2+3+4 ...2 2+3 2+3+4 设行首数据为a_0 写成公式\sum\limits_{i=1}^{n}(a_0+i-1) 题目代码 12345678910111213141516171819202122232425#include&lt;cstdio&gt;using namespace std;int main()&#123; int b; while(~scanf("%d",&amp;b)) &#123; int a = 1,m=1,n=2,s=0; for(int j = 0;j&lt;b;j++)&#123; m+=j; printf("%d ",m); for(int k = n ;k&lt;=b;k++)&#123; s=s+k; printf("%d",m+s); if(k!=b) printf(" "); &#125; s=0; n++; printf("\n"); &#125; &#125; return 0;&#125; 解法二： 其实也不难发现，我们如果将第一行的数据存储一下，或许还可以使算法更高效 我们发现以下规律 123a[0] a[1] a[2] ...a[1]-1 a[2]-1 a[3]-1 ...... 题目代码 12345678910111213141516171819202122232425#include&lt;cstdio&gt;using namespace std;const int Max_N = 100;int main()&#123; int a[Max_N],n; while(~scanf("%d",&amp;n)) &#123; for(int i = 0;i&lt;n;i++) &#123; a[i] = (i+1)*(i+2)/2; &#125; for(int j = 0;j&lt;n;j++) &#123; for(int k = j;k&lt;n;k++) &#123; printf("%d",a[k]); if(k!=n-1) printf(" "); else printf("\n"); a[k] = a[k]-1; &#125; &#125; &#125; return 0;&#125; 原题链接：C语言网]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝桥杯日常刷题——练习1118：Tom数]]></title>
    <url>%2F2018%2F03%2F16%2FTomNum%2F</url>
    <content type="text"><![CDATA[题目描述 ​ 正整数的各位数字之和被Tom称为Tom数。求输入数（&lt;2^32）的Tom数! 输入 ​ 每行一个整数(&lt;2^32). 输出 ​ 每行一个输出,对应该数的各位数之和. 样例输入 123123455612382 样例输出 123151710 题目分析 这个题目考的是基本的数学知识，没有啥可分析的，直接看代码吧 题目代码 1234567891011121314151617181920212223#include&lt;cstdio&gt;using namespace std;int Tom(long a)&#123; int sum=0; while(a) &#123; sum+=a%10; a/=10; &#125; return sum;&#125;int main()&#123; long n; while(~scanf("%ld",&amp;n)) &#123; printf("%d\n",Tom(n)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构详解——线性表（C++实现）]]></title>
    <url>%2F2018%2F03%2F11%2Flist%2F</url>
    <content type="text"><![CDATA[线性表 &emsp;&emsp;线性表是最常用且是最简单的一种数据结构。形如：A1、A2、A3….An这样含有有限的数据序列，我们就称之为线性表。 一、线性表的定义线性表：零个或多个数据元素的有限序列。 线性表、包括顺序表和链表顺序表（其实就是数组）里面元素的地址是连续的，链表里面节点的地址不是连续的，是通过指针连起来的。 二、线性表的抽象数据类型&emsp;&emsp;线性表的抽象数据类型定义如下： 123456789101112131415161718&gt; ADT 线性表(List)&gt; Data&gt; 线性表的数据对象集合为&#123;a1,a2,....,an&#125;,每个元素的类型均为DataType。其中，除了第一个元素a1外，每一个元素有且只有一个直接前驱元素，除最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。&gt;&gt; Operation&gt; InitList(*L):初始化操作，建立一个空的线性表。&gt; ListEmpty(L):若线性表为空，返回true，否则返回false。&gt; ClearList(*L):线性表清空。&gt; GetElem(L,i,*e):将线性表L中第i个位置元素返回给e。&gt; LocateElem(L,e):在线性表L中查找与给定值e相等的元素，如果查找成功,返回该元素在表中的序列号；否则，返回0表示失败。&gt; ListInsert(*L,i,e):在线性表的第i个位置插入元素e。&gt; ListDelete(*L,i,*e):删除线性表L中的第i个元素，并用e返回其值&gt; ListLength(L):返回线性表L的元素个数。&gt; PrintList(L):打印线性表&gt; &gt; 对于不同的应用，线性表的基本操作是不同的，上述操作是最基本的。&gt; 对于实际问题中涉及的关于线性表的更复杂操作，完全可以用这些基本操作的组合来实现。&gt; 三、线性表的顺序存储1. 顺序存储定义&emsp;&emsp;顺序表，一般使用数组实现，事实上就是在内存中找个初始地址，然后通过占位的形式，把一定连续的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中，数组大小有两种方式指定，一是静态分配，二是动态扩展。 &emsp;&emsp;顺序表相关的操作跟数组有关，一般都是移动数组元素。 2. 顺序存储的实现方式结构 &emsp;&emsp;我们直接来看顺序表的模板类的代码： 123456789101112131415161718const int MaxSize = 100;template &lt;class DataType&gt;class SeqList&#123;public: SeqList()&#123;length=0;&#125; //无参数构造方法 SeqList(DataType a[],int n); //有参数构造方法 ~SeqList()&#123;&#125; //析构函数 int Length()&#123;return length;&#125; //线性表长度 DataType Get(int i); //按位查找 int Locate(DataType x); //按值查找 void Insert(int i,DataType x); //插入 DataType Delete(int i); //删除 void PrintList(); //遍历private: DataType data[MaxSize]; //顺序表使用数组实现 int length; //存储顺序表的长度&#125;; 顺序表的封装需要三个属性： 存储空间的起始位置。数组data的存储位置就是线性表存储空间的存储位置 线性表的最大存储容量。数组长度MAXSIZE 线性表的当前长度。length 注意：数组的长度与线性表的当前长度是不一样的。数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。而线性表的当前长度是线性表中元素的个数，是会改变的。 &emsp;&emsp;下面我们将实现顺序表的各个功能： 有参数构造： &emsp;&emsp;创建一个长度为n的顺序表，需要将给定的数组元素作为线性表的数据元素传入顺序表中，并将传入的元素个数作为顺序表的长度 12345678template &lt;class DataType&gt;SeqList&lt;DataType&gt;::SeqList(DataType a[],int n)&#123; if(n&gt;MaxSize) throw "wrong parameter"; for(int i=0;i&lt;n;i++) data[i]=a[i]; length=n;&#125; 按位查找 &emsp;&emsp;按位查找的时间复杂度为O(1) 。 123456template &lt;class DataType&gt;DataType SeqList&lt;DataType&gt;::Get(int i)&#123; if(i&lt;1 &amp;&amp; i&gt;length) throw "wrong Location"; else return data[i-1];&#125; 按值查找 &emsp;&emsp;按值查找，需要对顺序表中的元素依次进行比较。 1234567template &lt;class DataType&gt;int SeqList&lt;DataType&gt;::Locate(DataType x)&#123; for(int i=0;i&lt;length;i++) if(data[i]==x) return i+1; return 0;&#125; 插入 &emsp;&emsp;插入的过程中需要注意元素移动的方向，必须从最后一个元素开始移动，如果表满了，则引发上溢；如果插入位置不合理，则引发位置异常。 12345678910template &lt;class DataType&gt;void SeqList&lt;DataType&gt;::Insert(int i,DataType x)&#123; if(length&gt;=MaxSize) throw "Overflow"; if(i&lt;1 || i&gt;length+1) throw "Location"; for(int j=length;j&gt;=i;j--) data[j]=data[j-1]; data[i-1]=x; length++;&#125; 删除 &emsp;&emsp;注意算法中元素移动方向，移动元素之前必须取出被删的元素，如果表为空则发生下溢，如果删除位置不合理，则引发删除位置异常。 123456789101112template &lt;class DataType&gt;DataType SeqList&lt;DataType&gt;::Delete(int i)&#123; int x; if(length==0) throw "Underflow"; if(i&lt;1 || i&gt;length) throw "Location"; x = data[i-1]; for(int j=i;j&lt;length;j++) data[j-1] = data[j]; length--; return x;&#125; 遍历 &emsp;&emsp;按下标依次输出各元素 123456template &lt;class DataType&gt;void SeqList&lt;DataType&gt;::PrintList()&#123; for(int i=0;i&lt;length;i++) cout&lt;&lt;data[i]&lt;&lt;endl;&#125; &emsp;&emsp;完整代码示例(更多数据结构完整示例可见GitHub)： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;iostream&gt;using namespace std;const int MaxSize = 100;template &lt;class DataType&gt;class SeqList&#123;public: SeqList()&#123;length=0;&#125; SeqList(DataType a[],int n); ~SeqList()&#123;&#125; int Length()&#123;return length;&#125; DataType Get(int i); int Locate(DataType x); void Insert(int i,DataType x); DataType Delete(int i); void PrintList(); private: DataType data[MaxSize]; int length; &#125;;template &lt;class DataType&gt;SeqList&lt;DataType&gt;::SeqList(DataType a[],int n)&#123; if(n&gt;MaxSize) throw "wrong parameter"; for(int i=0;i&lt;n;i++) data[i]=a[i]; length=n;&#125;template &lt;class DataType&gt;DataType SeqList&lt;DataType&gt;::Get(int i)&#123; if(i&lt;1 &amp;&amp; i&gt;length) throw "wrong Location"; else return data[i-1];&#125;template &lt;class DataType&gt;int SeqList&lt;DataType&gt;::Locate(DataType x)&#123; for(int i=0;i&lt;length;i++) if(data[i]==x) return i+1; return 0;&#125;template &lt;class DataType&gt;void SeqList&lt;DataType&gt;::Insert(int i,DataType x)&#123; if(length&gt;=MaxSize) throw "Overflow"; if(i&lt;1 || i&gt;length+1) throw "Location"; for(int j=length;j&gt;=i;j--) data[j]=data[j-1]; data[i-1]=x; length++;&#125;template &lt;class DataType&gt;DataType SeqList&lt;DataType&gt;::Delete(int i)&#123; int x; if(length==0) throw "Underflow"; if(i&lt;1 || i&gt;length) throw "Location"; x = data[i-1]; for(int j=i;j&lt;length;j++) data[j-1] = data[j]; length--; return x;&#125;template &lt;class DataType&gt;void SeqList&lt;DataType&gt;::PrintList()&#123; for(int i=0;i&lt;length;i++) cout&lt;&lt;data[i]&lt;&lt;endl;&#125;int main()&#123; SeqList&lt;int&gt; p; p.Insert(1,5); p.Insert(2,9); p.PrintList(); p.Insert(2,3); cout&lt;&lt;p.Length()&lt;&lt;endl; p.PrintList(); cout&lt;&lt;p.Get(3)&lt;&lt;endl; p.Delete(2); p.PrintList(); return 0;&#125; 3. 顺序存储的优缺点优点： 随机访问特性，查找O(1)时间，存储密度高； 逻辑上相邻的元素，物理上也相邻； 无须为表中元素之间的逻辑关系而增加额外的存储空间； 缺点： 插入和删除需移动大量元素； 当线性表长度变化较大时，难以确定存储空间的容量； 造成存储空间的“碎片” 四、线性表的链式存储1. 链式存储定义&emsp;&emsp;线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。这就意味着，这些元素可以存在内存未被占用的任意位置。 &emsp;&emsp;链表的定义是递归的，它或者为空null，或者指向另一个节点node的引用，这个节点含有下一个节点或链表的引用，线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）。 2. 链式存储的实现方式存储方法 123456template&lt;class DataType&gt;struct Node&#123; DataType data; //存储数据 Node&lt;DataType&gt; *next; //存储下一个结点的地址&#125;; &emsp;&emsp;结点由存放数据元素的数据域和存放后继结点地址的指针域组成。 结构 &emsp;&emsp;单链表的模板类的代码： 12345678910111213141516template&lt;class DataType&gt;class LinkList&#123;public: LinkList(); LinkList(DataType a[], int n); ~LinkList(); int Length(); DataType Get(int i); int Locate(DataType x); void Insert(int i, DataType x); DataType Delete(int i); void PrintList(); private: Node&lt;DataType&gt; *first; &#125;; 特点： 用一组任意的存储单元存储线性表的数据元素， 这组存储单元可以存在内存中未被占用的任意位置 顺序存储结构每个数据元素只需要存储一个位置就可以了，而链式存储结构中，除了要存储数据信息外，还要存储它的后继元素的存储地址 无参数构造 &emsp;&emsp;生成只有头结点的空链表 123456template&lt;class DataType&gt;LinkList&lt;DataType&gt;::LinkList()&#123; first = new Node&lt;DataType&gt;; first-&gt;next = NULL;&#125; 头插法构造单链表 &emsp;&emsp;头插法是每次将新申请的结点插在头结点后面 12345678910111213template&lt;class DataType&gt;LinkList&lt;DataType&gt;::LinkList(DataType a[], int n)&#123; first = new Node&lt;DataType&gt;; first-&gt;next = NULL; for (int i = 0; i &lt; n; i++) &#123; Node&lt;DataType&gt; *s = new Node&lt;DataType&gt;; s-&gt;data = a[i]; s-&gt;next = first-&gt;next; first-&gt;next = s; &#125;&#125; 尾插法构造单链表 &emsp;&emsp;尾插法就是每次将新申请的结点插在终端节点的后面 1234567891011121314template&lt;class DataType&gt;LinkList&lt;DataType&gt;::LinkList(DataType a[], int n)&#123; first = new Node&lt;DataType&gt;; Node&lt;DataType&gt; *r = first; for (int i = 0; i &lt; n; i++) &#123; Node&lt;DataType&gt; *s = new Node&lt;DataType&gt;; s-&gt;data = a[i]; r-&gt;next = s; r = s; &#125; r-&gt;next = NULL;&#125; 析构函数 &emsp;&emsp;单链表类中的结点是用new申请的，在释放的时候无法自动释放，所以，析构函数要将单链表中的结点空间释放 12345678910template&lt;class DataType&gt;LinkList&lt;DataType&gt;::~LinkList()&#123; while (first != NULL) &#123; Node&lt;DataType&gt;* q = first; first = first-&gt;next; delete q; &#125;&#125; 计算长度 &emsp;&emsp;单链表中不能直接求出长度，所以我们只能将单链表扫描一遍，所以时间复杂度为O(n) 123456789101112template&lt;class DataType&gt;int LinkList&lt;DataType&gt;::Length()&#123; Node&lt;DataType&gt;* p = first-&gt;next; int count = 0; while (p != NULL) &#123; p = p-&gt;next; count++; &#125; return count;&#125; 按位查找 &emsp;&emsp;单链表中即使知道节点位置也不能直接访问，需要从头指针开始逐个节点向下搜索，平均时间性能为O(n) ，单链表是顺序存取结构 12345678910111213template&lt;class DataType&gt;DataType LinkList&lt;DataType&gt;::Get(int i)&#123; Node&lt;DataType&gt;* p = first-&gt;next; int count = 1; while (p != NULL &amp;&amp; count&lt;i) &#123; p = p-&gt;next; count++; &#125; if (p == NULL) throw "Location"; else return p-&gt;data;&#125; 按值查找 &emsp;&emsp;单链表中按值查找与顺序表中的实现方法类似，对链表中的元素依次进行比较，平均时间性能为O(n) . 12345678910111213template&lt;class DataType&gt;int LinkList&lt;DataType&gt;::Locate(DataType x)&#123; Node&lt;DataType&gt; *p = first-&gt;next; int count = 1; while (p != NULL) &#123; if (p-&gt;data == x) return count; p = p-&gt;next; count++; &#125; return 0;&#125; 插入 &emsp;&emsp;单链表在插入过程中需要注意分析在表头、表中间、表尾的三种情况，由于单链表带头结点，这三种情况的操作语句一致，不用特殊处理，时间复杂度为O(n) 123456789101112131415161718template&lt;class DataType&gt;void LinkList&lt;DataType&gt;::Insert(int i, DataType x)&#123; Node&lt;DataType&gt; *p = first; int count = 0; while (p != NULL &amp;&amp; count&lt;i - 1) &#123; p = p-&gt;next; count++; &#125; if (p == NULL) throw "Location"; else &#123; Node&lt;DataType&gt; *s = new Node&lt;DataType&gt;; s-&gt;data = x; s-&gt;next = p-&gt;next; p-&gt;next = s; &#125;&#125; 删除 &emsp;&emsp;删除操作时需要注意表尾的特殊情况，此时虽然被删结点不存在，但其前驱结点却存在。因此仅当被删结点的前驱结点存在且不是终端节点时，才能确定被删节点存在，时间复杂度为O(n) . 123456789101112131415161718template&lt;class DataType&gt;DataType LinkList&lt;DataType&gt;::Delete(int i)&#123; Node&lt;DataType&gt; *p = first; int count = 0; while (p != NULL &amp;&amp; count&lt;i - 1) &#123; p = p-&gt;next; count++; &#125; if (p == NULL || p-&gt;next == NULL) throw "Location"; else &#123; Node&lt;DataType&gt; *q = p-&gt;next; int x = q-&gt;data; p-&gt;next = q-&gt;next; return x; &#125;&#125; 遍历 &emsp;&emsp;遍历单链表时间复杂度为O(n) . 12345678910template&lt;class DataType&gt;void LinkList&lt;DataType&gt;::PrintList()&#123; Node&lt;DataType&gt; *p = first-&gt;next; while (p != NULL) &#123; cout &lt;&lt; p-&gt;data &lt;&lt; endl; p = p-&gt;next; &#125;&#125; &emsp;&emsp;完整代码示例(更多数据结构完整示例可见GitHub)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164#include&lt;iostream&gt;using namespace std;template&lt;class DataType&gt;struct Node&#123; DataType data; Node&lt;DataType&gt; *next;&#125;;template&lt;class DataType&gt;class LinkList&#123;public: LinkList(); LinkList(DataType a[], int n); ~LinkList(); int Length(); DataType Get(int i); int Locate(DataType x); void Insert(int i, DataType x); DataType Delete(int i); void PrintList(); private: Node&lt;DataType&gt; *first; &#125;;template&lt;class DataType&gt;LinkList&lt;DataType&gt;::LinkList()&#123; first = new Node&lt;DataType&gt;; first-&gt;next = NULL;&#125;template&lt;class DataType&gt;LinkList&lt;DataType&gt;::LinkList(DataType a[], int n)&#123; first = new Node&lt;DataType&gt;; first-&gt;next = NULL; for (int i = 0; i &lt; n; i++) &#123; Node&lt;DataType&gt; *s = new Node&lt;DataType&gt;; s-&gt;data = a[i]; s-&gt;next = first-&gt;next; first-&gt;next = s; &#125;&#125;template&lt;class DataType&gt;LinkList&lt;DataType&gt;::~LinkList()&#123; while (first != NULL) &#123; Node&lt;DataType&gt;* q = first; first = first-&gt;next; delete q; &#125;&#125;template&lt;class DataType&gt;int LinkList&lt;DataType&gt;::Length()&#123; Node&lt;DataType&gt;* p = first-&gt;next; int count = 0; while (p != NULL) &#123; p = p-&gt;next; count++; &#125; return count;&#125;template&lt;class DataType&gt;DataType LinkList&lt;DataType&gt;::Get(int i)&#123; Node&lt;DataType&gt;* p = first-&gt;next; int count = 1; while (p != NULL &amp;&amp; count&lt;i) &#123; p = p-&gt;next; count++; &#125; if (p == NULL) throw "Location"; else return p-&gt;data;&#125;template&lt;class DataType&gt;int LinkList&lt;DataType&gt;::Locate(DataType x)&#123; Node&lt;DataType&gt; *p = first-&gt;next; int count = 1; while (p != NULL) &#123; if (p-&gt;data == x) return count; p = p-&gt;next; count++; &#125; return 0;&#125;template&lt;class DataType&gt;void LinkList&lt;DataType&gt;::Insert(int i, DataType x)&#123; Node&lt;DataType&gt; *p = first; int count = 0; while (p != NULL &amp;&amp; count&lt;i - 1) &#123; p = p-&gt;next; count++; &#125; if (p == NULL) throw "Location"; else &#123; Node&lt;DataType&gt; *s = new Node&lt;DataType&gt;; s-&gt;data = x; s-&gt;next = p-&gt;next; p-&gt;next = s; &#125;&#125;template&lt;class DataType&gt;DataType LinkList&lt;DataType&gt;::Delete(int i)&#123; Node&lt;DataType&gt; *p = first; int count = 0; while (p != NULL &amp;&amp; count&lt;i - 1) &#123; p = p-&gt;next; count++; &#125; if (p == NULL || p-&gt;next == NULL) throw "Location"; else &#123; Node&lt;DataType&gt; *q = p-&gt;next; int x = q-&gt;data; p-&gt;next = q-&gt;next; return x; &#125;&#125;template&lt;class DataType&gt;void LinkList&lt;DataType&gt;::PrintList()&#123; Node&lt;DataType&gt; *p = first-&gt;next; while (p != NULL) &#123; cout &lt;&lt; p-&gt;data &lt;&lt; endl; p = p-&gt;next; &#125;&#125;int main()&#123; LinkList&lt;int&gt; p; p.Insert(1, 6); p.Insert(2, 9); p.PrintList(); p.Insert(2, 3); p.PrintList(); cout &lt;&lt; p.Get(2) &lt;&lt; endl; cout &lt;&lt; p.Locate(9) &lt;&lt; endl; cout &lt;&lt; p.Length() &lt;&lt; endl; p.Delete(1); p.PrintList(); return 0;&#125; 链式存储的优缺点优点： 插入、删除不需移动其他元素，只需改变指针. 链表各个节点在内存中空间不要求连续，空间利用率高 缺点： 查找需要遍历操作，比较麻烦 五、其他线性表循环链表&emsp;&emsp;循环链表是另一种形式的链式存储结构。它的特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环。（通常为了使空表和非空表的处理一致，通常也附加一个头结点） &emsp;&emsp;在很多实际问题中，一般都使用尾指针来指示循环链表，因为使用尾指针查找开始结点和终端结点都很方便。 &emsp;&emsp;循环链表没有增加任何存储量，仅对链接方式稍作改变，循环链表仅在循环条件与单链表不同。从循环链表的任一结点出发可扫描到其他结点，增加了灵活性。但是，由于循环链表没有明显的尾端，所以链表操作有进入死循环的危险。通常以判断指针是否等于某一指定指针来判定是否扫描了整个循环链表。 双链表&emsp;&emsp;循环链表虽然可以从任意结点出发扫描其他结点，但是如果要查找其前驱结点，则需遍历整个循环链表。为了快速确定任意结点的前驱结点，可以再每个节点中再设置一个指向前驱结点的指针域，这样就形成了双链表。 存储方法 123456template&lt;class DataType&gt;struct Node&#123; DataType data; Node&lt;DataType&gt; *prior,*next;&#125;; &emsp;&emsp;结点p的地址既存储在其前驱结点的后继指针域内，又存储在它后继结点的前驱指针域中 需要注意： 循环双链表中求表长、按位查找、按值查找、遍历等操作的实现与单链表基本相同。 插入操作需要修改4个指针，并且要注意修改的相对顺序。 静态链表&emsp;&emsp;静态链表是用数组来表示单链表，用数组元素的下标来模拟单链表的指针。 静态链表的存储结构： 123456const int MaxSize = 100;template&lt;class DataType&gt;struct Node&#123; DataType data; int next;&#125;SList[MaxSize]; 静态链表存储示意图： 静态链表插入操作示意图： 静态链表删除操作示意图： &emsp;&emsp;静态链表虽然是用数组来存储线性表的元素，但在插入和删除操作时，只需要修改游标，不需要移动表中的元素，从而改进了在顺序表中插入和删除操作需要移动大量元素的缺点，但是它并没有解决连续存储分配带来的表长难以确定的问题。 间接寻址&emsp;&emsp;间接寻址是将数组和指针结合起来的一种方法，它将数组中存储的单元改为存储指向该元素的指针。 &emsp;&emsp;该算法的时间复杂度仍为O(n) ，但当每个元素占用较大空间时，比顺序表的插入快的多。线性表的间接寻址保持了顺序表随机存取的优点，同时改进了插入和删除操作的时间性能，但是它也没有解决连续存储分配带来的表长难以确定的问题。 &emsp;&emsp;具体代码实现均可在GitHub中找到。如有错误，请在评论区指正。 参考 数据结构（C++版）王红梅等编著]]></content>
      <categories>
        <category>Data Structures</category>
      </categories>
      <tags>
        <tag>Linear List</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络笔记整理——绪论]]></title>
    <url>%2F2018%2F03%2F11%2FInternet%2F</url>
    <content type="text"><![CDATA[因特网所有接入因特网的设备都称为主机 或端系统。 主机通过通信链路和分组交换机连接，路由器和链路层交换机都是分组交换机。 一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径。 ISP是因特网服务供应商，有不同层级，每个ISP是一个由多个分组交换机和多段通信链路组成的网络。 协议控制着因特网中信息的接收和发送。因特网的主要协议统称为TCP/IP。 TCP 可靠 面向连接 确保传递与流量控制 IP UDP 不可靠 非面向连接 因特网的两种描述方法：一种是根据它的硬件和软件组成来描述，另一种是根据基础设施向分布式应用程序提供的服务来描述。 通信链路有不同的物理媒体组成，不同媒体具有不同速率，包括同轴电缆、铜线、光缆、无线电 分组： 当一台端系统有数据要向另一台端系统发送时，端系统将数据分段并在每段加上首部字节，由此形成的信息包称为分组。 一个协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及在报文或其他事件方面所采取的动作、传输和/或接收。 端系统 = 主机：和因特网相连的计算机等设备（如TV，Web服务器，手提电脑）。 主机有时候有进一步分为两类：客户机（client）和服务器（server）。 在网络软件的上下文中，客户机和服务器有另一种定义，客户机程序（client program）是运行在一个端系统上的程序，它发出请求，并从运行在另一个端系统上的服务器程序（server program）接收服务。 客户机-服务器因特网应用程序是分布式应用程序（distributed application）。 还有的应用程序是P2P对等应用程序，其中的端系统互相作用并运行执行客户机和服务器功能的程序。 网络边缘互联网的边缘部分也叫资源子网。 接入网：将端系统连接到边缘路由器（edge router）的物理链路。 边缘路由器：端系统到任何其他远程端系统的路径上的第一台路由器。 网络接入类型网络接入的三种类型：（分类并不严格） 住宅接入（residential access），将家庭端系统（PC或家庭网络）和网络相连。 ​ 1. 通过普通模拟电话线用拨号调制解调器（dial-up modem）与住宅ISP相连。家用调制解调器将PC输出的数字信号转化为模拟形式，以便在模拟电话线上传输。模拟电话线由双绞铜线构成，就是用于打普通电话的电话线。允许56kbps接入（下载上传速度慢），用户上网就不能打电话了。 ​ 2. 数字用户线（digital subscriber line，DSL）:一种新型的调制解调器技术，类似于拨号调制解调器，也运行在现有的双绞线电话线上，通过限制用户和ISP调制解调器之间的距离，DSL能够以高得多的速率传输和接受数据。（使用频分多路复用技术），分为上行信道和下行信道，两个信道速率不一样。 ​ 3. 混合光纤同轴电缆（hybrid fiber-coaxial cable， HFC）：使用了光缆和同轴电缆相结合的技术。扩展了当前用于广播电缆电视的电缆网络，需要电缆调制解调器（cable modem），分为上行信道和下行信道，共享广播媒体（HFC特有），信道都是共享的，需要一个分布式多路访问协议，以协调传输和避免碰撞。 公司接入（company access），将商业或教育机构中的端系统和网络相连 ​ 1. 局域网（LAN） ​ 2. 以太网 ​ 1. 共享以太网 ​ 2. 交换以太网 无线接入（wireless access），将移动端系统与网络相连。分为两类 ​ 1. 无线局域网（wireless LAN）：无线用户与位于几十米半径内的基站（无线接入点）之间传输/接收分组。这些基站和有线的因特网相连接，因而为无线用户提供连接到有线网络的服务。 广域无线接入网（wide-area wireless access network）：分组经用于蜂窝电话的相同无线基础设施进行发送，基站由电信提供商管理，为数万米半径内的用户提供无线接入服务。 基于IEEE 802.11技术的无线局域网也被称为无线以太网和WiFi。 HFC使用了光缆和同轴电缆相结合的技术，拨号56kbps调制解调器和ASDL使用了双绞铜线；移动接入网络使用了无线电频谱。 物理媒体物理媒体分为两类： ​ 1. 导引型媒体（guided media）：电波沿着固体媒体（光缆，双绞铜线或同轴电缆）被导引。 非导引型媒体（unguided media）：电波在空气或外层空间（在无线局域网或数字卫星频道）中传播； 导引型媒体（guided media） ​ 1. 双绞铜线：最便宜，使用最普遍，两根线被绞合起来，以减少对邻近双绞线的电气干扰。一根电缆由许多双绞线捆扎在一起，并在外面覆盖上保护性防护层，一堆电线构成一个通信链路。非屏蔽双绞线UTP常用于建筑物内的计算机网络中，即用于局域网（LAN）中。双绞线最终已经成为高速LAN联网的主要方式。 ​ 2. 同轴电缆：能作为导引式共享媒体，具有高比特速率。 光缆：不受电磁干扰，长达100km的光缆信号衰减极低，并且很难接头。 非导引型媒体（unguided media）：电波在空气或外层空间（在无线局域网或数字卫星频道）中传播； ​ 1. 陆地无线电信道：具有穿透墙壁，提供与移动用户的连接以及长距离承载信号的能力。 卫星无线电信道 一颗通信卫星连接两个或多个位于地球的微波发射方/接收方，它们被称为地面站。卫星无线电信道分为同步卫星和低地球轨道卫星。 同步卫星永久的停留在地球上方相同的点，卫星链路常用于电话网或因特网的主干。卫星链路在那些无法使用DSL或基于电缆的因特网接入区域，也越来越多地用作高速住宅因特网接入。 低地球轨道卫星 围绕地球旋转，彼此通信，未来低地球轨道卫星技术也许能用于因特网接入。 网络核心网络核心，即互联了因特网端系统的分组交换机和链路的网状网络，也叫通信子网。 通过网络链路和交换机移动数据有两种基本方法：电路交换（circuit switching）和分组交换（packet swiitching）。 电路交换网络中，沿着端系统通信路径，为端系统之间通信所提供的资源在通信会话期间会被预留。例子有电话网络。 分组交换网络中，这些资源不被预留。例子有因特网网络。 电路交换：创建专用的端到端连接，独占带宽 有独立的建立、连接过程； 电路交换网络中的多路复用 ​ 1. 频分多路复用（Frequency-Division Multiplexing，FDM） ​ 2. 时分多路复用（Time-Division Multiplexing，TDM） 分组交换：共享带宽 ​ 存储转发传输机制：在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。 分组交换和电路交换对比：统计多路复用 分组交换​ 分组交换是以分组为单位进行传输和交换的，它是一种存储——转发交换方式，即将到达交换机的分组先送到存储器暂时存储和处理，等到相应的输出电路有空闲时再送出。 ​ 优点： ​ （1）分组交换不需要为通信双反预先建立一条专用的通信线路，不存在连接建立时延，用户可随时发送分组。 ​ （2）由于采用存储转发方式，加之交换节点具有路径选择，当某条传输线路故障时可选择其他传输线路，提高了传输的可靠性。 ​ （3）通信双反不是固定的战友一条通信线路，而是在不同的时间一段一段地部分占有这条物理通路，因而大大提高了通信线路的利用率。 ​ （4）加速了数据在网络中的传输。因而分组是逐个传输，可以使后一个分组的存储操作与前一个分组的转发操作并行，这种流水线式传输方式减少了传输时间。 ​ （5）分组长度固定，相应的缓冲区的大小也固定，所以简化了交换节点中存储器的管理。 ​ （6）分组较短，出错几率减少，每次重发的数据量也减少，不仅提高了可靠性，也减少了时延。 ​ 缺点： ​ （1）由于数据进入交换节点后要经历存储转发这一过程，从而引起的转发时延（包括接受分组、检验正确性、排队、发送时间等），而且网络的通信量越大，造成的时延就越大，实时性较差。 ​ （2）分组交换只适用于数字信号。 ​ （3）分组交换可能出现失序，丢失或重复分组，分组到达目的节点时，对分组按编号进行排序等工作，增加了麻烦。 ​ 综上，若传输的数据量很大，而且传送时间远大于呼叫时间，则采用电路交换较为合适；当端到端的通路有很多段链路组成是，采用分组交换较为合适。从提高整个网络的信道利用率上看，分组交换优于电路交换。 电路交换​ 电路交换是以电路连接为目的的交换方式，通信之前要在通信双方之间建立一条被双方独占的物理通道。 ​ 电路交换的三个阶段： ​ （1）建立连接 （2）通信 （3）释放连接 ​ 优点： ​ （1）由于通信线路为通信双方用户专用，数据直达，所以传输数据的时延非常小。 ​ （2）通信双方之间的屋里通路一旦建立，双方可以随时通信，实时性强。 ​ （3）双方通信时按发送顺序传送数据，不存在失序问题。 ​ （4）电路交换既适用于传输模拟信号，也适用于传输数字信号。 ​ （5）电路交换的交换设备及控制均比较简单。 ​ 缺点： ​ （1）电路交换平均连接建立时间对计算机通信来说较长。 ​ （2）电路交换家里连接后，物理通路被通信双方独占，即使通信线路空闲，也不能供其他用户使用，因而信道利用率低。 ​ （3）电路交换时，数据直达，不同类型，不同规格，不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制。 时延、丢包和吞吐量时延分为节点处理时延（nodal processing delay），排队时延（queuing delay），传输时延（transmission delay）和传播时延（propagation delay），这些加起来就是节点总时延（total nodal delay），即 节点总时延 = 节点处理时延 + 排队时延 + 传输时延 + 传播时延 时延类型 处理时延 检查分组首部和决定将分组导向哪一个队列； 其他：检查比特级差错所需要的时间。 排队时延 在队列中，当分组在链路上等待传输时所需的时间，取决于先期到达的，正在排队等待想链路传输分组的数量。 传输时延 将所有分组的比特推向链路所需要的时间。 用L比特表示分组的长度，用R bps表示从路由器A到路由器B的链路传输速率。（对于一条10Mbps的以太网链路，速率R = 10Mbps）,传输时延（又称为存储转发时延）是L/R。 传播时延 ​ 1. 从该链路的起点到路由器B传播所需要的时间是传播时延。该比特以该链路的传播速率传播。 ​ 2. 传播时延 = 两台路由器的距离d / 传播速率s。 传播速率取决于该链路的物理媒体（即光纤，双绞铜线等），速率范围是2\times10^8\sim3\times10^8 m/s 端到端时延假定在源主机和目的主机之间有N-1台路由器，并且该网络是无拥塞的（因此排队时延是微不足道的），处理时延为d_{proc} ，每台路由器和源主机的输出速率是 R bps，每条链路的传播时延是d_{proc} ，节点时延累加起来得到端到端时延 d_{end-end} = N（d_{proc} + d_{trans} + d_{prop}）d_{trans} = L /R Traceroute程序 能够在任何因特网主机上运行。当用户指定一个目的主机名字时，元主机中的改程序朝着该目的地发送多个特殊分组之一时，它向源回送一个短报文，该报文包括该路由器的名字和地址。RFC1393描述了Traceroute。 端系统、应用程序和其他时延 ​ 除了处理时延，传输时延，传播时延外，端系统中还有一些其他重要的时延： ​ 1. 拨号调制解调器引入的调制/编码时延，量级在几十毫秒，对于以太网，电缆调制解调器和DSL等接入技术，这种时延是不太多的； ​ 2. 向共享媒体传输分组的端系统可以将有意地延迟传输作为其协议的一部分，以便与其他端系统共享媒体。（第五章探讨） ​ 3. 媒体分组化时延，在IP话音（VoIP）应用中。在VoIP中，发送方在向因特网传递分组之前必须首先用编码的数字化语音填充分组，这种填充分组的时间就是分组化时延。（可能比较大） 计算机网络中的吞吐量​ 除了时延和丢包外，计网中另个一个必不可少的性能测度就是端到端吞吐量。 ​ 吞吐量分为瞬时吞吐量（instancous throughput）和平均吞吐量（average throughput），我们可以把他们类比为以前物理学过的瞬时速度和平均速度。 ​ 瞬时吞吐量是主机B接受到该文件的一个速率，平均吞吐量是所有比特F/T秒，即F/T bps。 ​ 对于某些应用程序（譬如因特网电话），希望他们具有低时延，并保持高于某一阈值的一致的瞬时吞吐量，对于其他应用程序（譬如文件传输等等），时延不是很重要，但是希望能具有尽可能高的吞吐量。 ​ 吞吐量：单位时间内通过某个网络（或信道、接口）的数据量。 协议层次因特网协议栈： 应用层、运输层、网络层、数据链路层、物理层。 OIS的七层协议： 应用层、表示层、会话层、运输层、网络层、数据链路层、物理层。 TCP/IP四层协议： 应用层、运输层、网际层、网络接口层 物理层：最基础的一层，建立在传输媒介基础上，起到建立、维护和取消物理连接的作用，实现设备之间的物理接口。物理层只接收和发送一串比特流，不考虑信息的意义和信息结构。包括对连接到网络上的设备描述其各种机械的、电气的、功能的规定。典型设备有：光纤、同轴电缆、双绞线、中继器和集线器。 数据链路层：在物理层提供比特流服务的基础上，将比特信息封装成数据帧Frame，起到在物理层上建立、撤销、标识逻辑链接和链路复用以及差错校验等功能。通过使用接收系统的硬件地址或物理地址来寻址。建立相邻结点之间的数据链接，通过差错控制提供数据帧（Frame）在信道上无差错的传输，同时为其上面的网络层提供有效的服务。数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据检错、重发等。典型设备有：二层交换机、网桥、网卡。差错控制：在数据传输过程中如何发现并更在错误；流量控制：通信双方速度存在差异，需要协调匹配通信正常。 网络层：或通信子网层，是高层协议之间的界面层，用于控制通信子网的操作，是通信子网与资源子网的接口。在网络间进行通信的计算机之间可能会通过多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点，确保数据及时传送。网络层将解封装数据链路层收到的帧，提取数据包，包中封装有网络层包头，其中含有逻辑地址信息，包括源站点和目的站点地址的网络地址。典型设备是路由器。网络层主要功能为管理数据通信，实现端到端的数据传送服务；主体协议是IP协议 运输层：建立在网络层和会话层之间，实质上它是网络体系结构中低层与高层之间衔接的一个接口层。用一个寻址机制来标识一个特殊的应用程序（端口号）。传输层不仅是一个独立的结构层，它还是整个分层体系结构的核心。传输层的数据单元是由数据组织成的数据段（Segment）这个层负责获取全部信息，因此它必须跟踪数据单元碎片、乱序到达的数据包和其他在传输过程中可能发生的危险。主要功能为负责总体的数据传输和数据控制，主要包括两个协议：TCP：传输控制协议；UDP：用户报文协议 会话层：也称会晤层或对话层，在会话层及以上的高层次中，数据传达的单位不再另外命名，统称为报文。会话层不参与具体传送，它提供包括访问校验和会话管理在内的建立和维护应用之间通信的机制。会话层提供的服务可使应用建立和维持会话，并使会话同步，会话层使用校验点可以使通信会话在通信失效时从校验点继续恢复通信，这对传送大型文件极为重要。主要功能是为通信进程建立连接。 表示层：对上服务应用层，对下接收会话层的服务，是为应用过程之中传送的信息提供表示方法的服务，它关心的只是发出的信息的语义和语法。表示层要完成某些特定的功能，主要有不同的数据编码格式的转换，提供数据压缩、解压缩服务，对数据进行加密、解密。如图像格式的显示就是由位于表示层的协议来支持的。表示层提供的服务包括：语法选择、语法转换等，语法选择是提供一种初始语法和以后修改这种选择的手段。语法转换涉及代码转换和字符集的转换、数据格式的修改以及对数据结构操作的适配。主要功能是进行加密和压缩。 应用层：是通信用户之间的窗口，为用户提供网络管理、文件传输、事务处理等服务。其中包含了若干独立的用户通用的服务协议模块。网络应用层是OSI的最高层，为网络用户之间的通信提供专用的程序。主要功能是为通信进程建立连接。 攻击威胁下的网络 坏家伙能够经因特网将恶意软件放入你的计算机 坏家伙能够攻击服务器和网络基础设施 能够嗅探分组 能够伪装成信任的人：IP哄骗（IP spoofing）可用端点鉴别（end-point authentication）机制 修改或删除报文：中间人攻击 恶意软件（malware）：删除文件、收集隐私信息 僵尸网络（botnet）：对目标主机展开垃圾邮件分发或分布式拒绝服务攻击。 病毒（virus）：恶意可执行代码并自我复制 蠕虫（worm）：不需明显交互即可感染 特洛伊木马（Trojan horse）：为进行非法目的的计算机病毒 计算机网络发展史 分组交换 1961-1972 第一个分组交换网ARPANET 专用网络和网络互联 1972-1980 开始产生TCP、UDP等协议 网络的激增 1980-1990 建立CSFNET 因特网爆炸 20世纪90年代万维网应用出现 参考文章计算机网络－笔记 电路交换与分组交换的区别 《计算机网络自顶向下方法》读书笔记]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017~2018年寒假总结]]></title>
    <url>%2F2018%2F03%2F06%2F2017_2018_winter_holiday%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;又一个寒假过去了，逢年过节胖三斤。。。上称一称，唉~胖了五斤 o(≧口≦)o &emsp;&emsp;假期里除了吃饭睡觉串亲戚，还有算法博客拜年祭。 &emsp;&emsp;开学刚回学校就闹胃病 (╯﹏╰) ，现在我要顶着胃部的不适，完成这篇假期总结 假期总结 学习李航的《统计学习方法》并做好笔记整理（学是学完了，笔记整理可累死我了…到现在还没整完） 用TensorFlow搭建一个完整的图像分类器 利用TensorFlow神经网络参加Kaggle竞赛两次（过年这几天都是晚上回家白天出去，所以没时间搭模型，只参加了Titanic生还者预测和Digit手写字体识别） 大年三十准时观看bilibili拜年祭（因为春晚太无聊了。。。所以我估计以后的除夕夜我都是看拜年祭的） 学习Andrew Ng的Coursera课程（只看到第四部分卷积神经网络） 搭建个人博客（嗯，你们如果看到这篇文章就一定也知道我的博客长什么样了） 给一个初一的小妹妹补数学（滑稽脸）]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>假期总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——决策树]]></title>
    <url>%2F2018%2F03%2F03%2Fdecision_tree%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;决策树是一种基本的分类和回归算法。&emsp;&emsp;决策树模型呈树形结构，可以认为是if-then规则的集合，也可以认为是定义在特征空间与类空间上的条件概率分布。&emsp;&emsp;决策树模型由结点和有向边组成，结点分为内部结点和叶结点，内部结点表示特征，叶结点表示类，有向边表示某一特征的取值。 决策树模型与学习决策树模型&emsp;&emsp;分类决策树模型是一种描述对实例进行分类的树形结构。决策树由结点（node）和有向边（directed edge）组成。结点有两种类型：内结点（internal node）和叶结点（leaf node）。内部结点表示一个特征或者属性，叶结点表示一个类。 决策树与if-then规则&emsp;&emsp;可以将决策树看成是一个if-then规则的集合。将决策树转化成if-then规则的过程是这样的：由决策树的根结点到叶结点的每一条路径构建一条规则;路径上内部结点的特征对应着规则的条件，而叶结点的类对应着规则的结论。 决策树与条件概率分布&emsp;&emsp;决策树还表示给定特征条件下的类的条件概率分布。这一条件概率分布定义在特征空间的一个划分（partition）上。将特征空间划分为互不相交的单元（cell）或者区域（region），并在每个单元定义一个类的概率分布就构成了一个条件概率分布。 决策树学习&emsp;&emsp;决策树学习，假定给定训练数据集 D = \left \{ (x_1,y_1),(x_2,y_2),...,(x_n,y_n) \right \}$$ , &emsp;&emsp;其中$$x_i = (x_i^{(1)},x_i^{(2)},...,x_i^{(n)} )^T$$ ，$$n$$ 为特征个数，$$y_i\in \left \{ 1,2,...,K \right \}$$ ，为类的标记，$$i=1,2,...,N$$ ，$$N$$ 为样本容量。学习的目标是根据给定的训练数据集构建一个决策树模型，使它能够对实例进行正确的分类。 ![这里写图片描述](http://img.blog.csdn.net/20180303170018174?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzA2MTE2MDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70) &emsp;&emsp;决策树学习本质上是从训练数据集中归纳出一组分类规则。我们需要的是一个与训练数据矛盾较小的决策树，同时具有很好的泛化能力。另一个角度看，决策树学习是由训练数据集估计条件概率模型。我们选择的条件概率模型应该不仅对训练数据有很好的拟合，而且对未知数据有很好的预测。 &emsp;&emsp;决策树学习用损失函数表示这一目标。如下所述，决策树学习的损失函数通常是正则化的极大似然函数。决策树学习的策略是以损失函数为目标函数的最小化。 &emsp;&emsp;当损失函数确定以后，学习问题就变为在损失函数意义下选择最优决策树的问题。因为从所有可能的决策树中选取最优决策树是NP完全问题（NP的英文全称是Non-deterministic Polynomial的问题，即多项式复杂程度的非确定性问题），所以现实中决策树学习算法通常采用启发式方法，近似求解这一最优化问题。这样得到的决策树是次最优(sub-optimal)的。 &emsp;&emsp;决策树学习的算法通常是一个递归地选择最优特征，并根据该特征对训练数据进行分割，使得对各个子数据集有一个最好的分类的过程。 学习模型：根据给定的训练数据集构建一个决策树模型，使它能够对实例进行正确分类。该模型不仅对训练数据有很好的拟合，而且对未知数据有很好的越策 学习策略：通常选择正则化的极大似然函数作为损失函数，损失函数最小化 学习算法：采用启发式算法，近似求解上述最优化问题。递归地选择最优特征，并根据该特征对训练数据进行分割，使得对各个子数据集有一个最好的分类。 过拟合：以上方法生成的决策树可能对训练数据有很好的分类能力，但对未知的数据却未必，即可能发生过拟合。 剪枝：对生成的树自下而上进行剪枝，将树变得更简单，从而使它具有更好的泛化能力。 特征选择：如果特征数量很多，也可以在学习开始的时候，对特征进行选择。 ## 特征选择 ### 特征选择问题 &emsp;&emsp;特征选择在于选取对训练数据具有分类能力的特征。这样可以提高决策树学习的效率。如果利用一个特征进行分类的结果与随机分类的结果没有很大差别，则称这个特征是没有分类能力的。经验上扔掉这样的特征对决策树学习的精度影响不大。通常特征选择的准则是信息增益或信息增益比。 ### 信息增益 ####熵 &emsp;&emsp;在信息论与概率统计中，熵（entropy）是表示随机变量不确定性的度量。设$$X$$ 是一个取有限个值的离散随机变量，其概率分布为 $$P(X=x_i)=p_i, i=1,2,...,n&emsp;&emsp;则随机变量X 的熵定义为 H(X)=-\sum \limits_{i=1}^n p_i \log p_i&emsp;&emsp;通常上式中的对数以2为底或者以自然对数e为底，这时熵的单位分别称作比特（bit）或纳特（nat）。由定义可知，熵只依赖于X 分布，而与X 的取值无关，所以也可以将X 的熵记作H(p) ，即 H(p)=-\sum \limits_{i=1}^n p_i \log p_i&emsp;&emsp;熵越大，随机变量的不确定性就越大。从定义可以验证 0\leq H(p)\leq \log n&emsp;&emsp;当随机变量只取2个值时，当取值概率为0/1时，熵为0，此时完全没有不确定性。 条件熵&emsp;&emsp;已知随机变量(X,Y) 的联合概率分布为： P(X=x_i,Y=y_i)=p_{ij}, i=1,2,...,n;j=1,2,...,m&emsp;&emsp;条件熵H(Y|X) 表示已知X 情况下，Y 的分布的不确定性。计算如下： H(Y|X)=\sum \limits_{i=1}^n p_iH(Y|X=x_i)&emsp;&emsp;这里，p_i=P(X=x_i),i=1,2,...,n 信息增益&emsp;&emsp;信息增益表示得知了特征X 的信息，使得类Y 的信息不确定性减小的程度。也叫作互信息（mutual information），决策树中的信息增益等价于训练集中的类与特征的互信息。 &emsp;&emsp;特征A 对训练数据集D 的信息增益g(D,A) ，定义为集合D 的经验熵H(D) 与特征A 给定条件下D 的经验条件熵H(D|A) 之差，即 g(D,A)=H(D)−H(D|A)&emsp;&emsp;决策树学习应用信息增益准则选择特征。信息增益大的特征具有更强的分类能力。&emsp;&emsp;根据信息增益准则的特征选择方法是：对训练数据集（或子集）D ,计算其每个特征的信息增益，并比较他们的大小，选择信息增益最大的特征。 算法 (信息增益的算法)输入：训练数据集D 和特征A ； 输出：特征A 对训练数据集D 的信息增益g(D,A) 。 (1) 计算数据集D 的经验熵H(D) H(D)=-\sum \limits_{k=1}^K \frac{\left | C_k \right |}{\left | D \right |}\log_2 \frac{\left | C_k \right |}{\left | D \right |}(2) 计算特征A 对数据集D 的经验条件熵H(D|A) H(D|A)=\sum \limits_{i=1}^n \frac{\left | D_i \right |}{\left | D \right |}H(D_i)=-\sum \limits_{i=1}^n \frac{\left | D_i \right |}{\left | D \right |} \sum \limits_{k=1}^K \frac{\left | D_{ik}\right |}{\left | D_i \right |} \log_2 \frac{\left | D_{ik} \right |}{\left | D_i \right |}(3) 计算信息增益 g(D,A)=H(D)-H(D|A)&emsp;&emsp;实现信息增益的python代码： 123456789101112131415161718192021222324252627282930313233343536373839def calc_ent(x): """ calculate shanno ent of x """ x_value_list = set([x[i] for i in range(x.shape[0])]) ent = 0.0 for x_value in x_value_list: p = float(x[x == x_value].shape[0]) / x.shape[0] logp = np.log2(p) ent -= p * logp return entdef calc_condition_ent(x, y): """ calculate ent H(y|x) """ # calc ent(y|x) x_value_list = set([x[i] for i in range(x.shape[0])]) ent = 0.0 for x_value in x_value_list: sub_y = y[x == x_value] temp_ent = calc_ent(sub_y) ent += (float(sub_y.shape[0]) / y.shape[0]) * temp_ent return entdef calc_ent_grap(x,y): """ calculate ent grap """ base_ent = calc_ent(y) condition_ent = calc_condition_ent(x, y) ent_grap = base_ent - condition_ent return ent_grap 信息增益比&emsp;&emsp;以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题。使用信息增益比（information gain ratio）可以对这一问题进行校正。这是特征选择的另一准则。 &emsp;&emsp;特征A 对训练数据集D 的信息增益比g_R(D,A) 定义为其信息增益g(D,A) 与训练数据集D 关于特征A 的值的熵H_A(D) 之比，即 g_R(D,A)=\frac{g(D,A)} {H_A(D)}&emsp;&emsp;其中，H_A(D)=-\sum \limits_{i=1}^n \frac{\left | D_i \right |}{\left | D \right |}\log_2 \frac{\left | D_i \right |}{\left | D \right |} 决策树的生成ID3算法&emsp;&emsp;ID3算法（interative dichotomiser 3）的核心是在决策树各个结点上应用信息增益准则选择特征，递归地构建决策树。具体方法是：从根结点（root node）开始，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子结点；再对子结点递归地调用以上方法，构建决策树；直到所有特征的信息增益均很小或没有特征可以选择为止。最后得到一个决策树。ID3相当于用极大似然法进行概率模型的选择。&emsp;&emsp;ID3算法只有树的生成，所以该算法生成的树容易产生过拟合。 算法 (ID3算法)输入：训练数据集D ，特征集A ，阈值\varepsilon ； 输出：决策树T 。 (1) 如果D 中的所有实例属于同一类C_{k} ，则置T 为单结点树，并将C_{k} 作为该结点的类，返回T ； (2) 如果A=\phi ，则置T 为单节点树，并将D 中实例数最大的类C_{k} 作为该结点的类，返回T ； (3) 否则，按g(D,A)=H(D)-H(D|A) 计算A 中个特征对D 的信息增益比，选择信息增益比最大的特征A_{g} ； (4) 如果A_{g} 的信息增益比小于阈值\varepsilon ，则置T 为单结点树，并将D 中实例数最大的类C_{k} 作为该结点的类，返回T ； (5) 否则，对A_{g} 的每一可能值a_{i} ，依A_{g} = a_{i} 将D 分割为子集若干非空D_{i} ，将D_{i} 中实例树最大的类作为标记，构建子结点，由结点及其子结点构成树T 返回T ； (6) 对结点i ，以D_{i} 为训练集，以A - \left \{A_{g}\right \} 为特征集，递归地调用步(1)~步(5)，得到子树T_{i} ，返回T_{i} . 例子 ：对下表训练数据，利用ID3算法建立决策树。 &emsp;&emsp;下面给出python代码(绘图代码不在建立决策树之内)： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161import mathdef majorityCnt(classList): """返回出现次数最多的分类名称 :param classList: 类列表 :return: 出现次数最多的类名称 """ classCount = &#123;&#125; # 这是一个字典 for vote in classList: if vote not in classCount.keys(): classCount[vote] = 0 classCount[vote] += 1 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) return sortedClassCount[0][0] def chooseBestFeatureToSplitByID3(dataSet): """选择最好的数据集划分方式 :param dataSet: :return: """ numFeatures = len(dataSet[0]) - 1 # 最后一列是分类 baseEntropy = calcShannonEnt(dataSet) bestInfoGain = 0.0 bestFeature = - 1 for i in range(numFeatures): # 遍历所有维度特征 infoGain = calcInformationGain(dataSet, baseEntropy, i) if (infoGain &gt; bestInfoGain): # 选择最大的信息增益 bestInfoGain = infoGain bestFeature = i return bestFeature # 返回最佳特征对应的维度 def createTree(dataSet, labels, chooseBestFeatureToSplitFunc=chooseBestFeatureToSplitByID3): """创建决策树 :param dataSet:数据集 :param labels:数据集每一维的名称 :return:决策树 """ classList = [example[-1] for example in dataSet] # 类别列表 if classList.count(classList[0]) == len(classList): return classList[0] # 当类别完全相同则停止继续划分 if len(dataSet[0]) == 1: # 当只有一个特征的时候，遍历完所有实例返回出现次数最多的类别 return majorityCnt(classList) bestFeat = chooseBestFeatureToSplitFunc(dataSet) bestFeatLabel = labels[bestFeat] myTree = &#123;bestFeatLabel: &#123;&#125;&#125; del (labels[bestFeat]) featValues = [example[bestFeat] for example in dataSet] uniqueVals = set(featValues) for value in uniqueVals: subLabels = labels[:] # 复制操作 myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value), subLabels) return myTreedef createDataSet(): """创建数据集 :return: """ dataSet = [[u'青年', u'否', u'否', u'一般', u'拒绝'], [u'青年', u'否', u'否', u'好', u'拒绝'], [u'青年', u'是', u'否', u'好', u'同意'], [u'青年', u'是', u'是', u'一般', u'同意'], [u'青年', u'否', u'否', u'一般', u'拒绝'], [u'中年', u'否', u'否', u'一般', u'拒绝'], [u'中年', u'否', u'否', u'好', u'拒绝'], [u'中年', u'是', u'是', u'好', u'同意'], [u'中年', u'否', u'是', u'非常好', u'同意'], [u'中年', u'否', u'是', u'非常好', u'同意'], [u'老年', u'否', u'是', u'非常好', u'同意'], [u'老年', u'否', u'是', u'好', u'同意'], [u'老年', u'是', u'否', u'好', u'同意'], [u'老年', u'是', u'否', u'非常好', u'同意'], [u'老年', u'否', u'否', u'一般', u'拒绝'], ] labels = [u'年龄', u'有工作', u'有房子', u'信贷情况'] # 返回数据集和每个维度的名称 return dataSet, labelsdef splitDataSet(dataSet, axis, value): """按照给定特征划分数据集 :param dataSet: 待划分的数据集 :param axis: 划分数据集的特征的维度 :param value: 特征的值 :return: 符合该特征的所有实例（并且自动移除掉这维特征） """ retDataSet = [] for featVec in dataSet: if featVec[axis] == value: reducedFeatVec = featVec[:axis] # 删掉这一维特征 reducedFeatVec.extend(featVec[axis + 1:]) retDataSet.append(reducedFeatVec) return retDataSetdef calcShannonEnt(dataSet): """计算训练数据集中的Y随机变量的香农熵 :param dataSet: :return: """ numEntries = len(dataSet) # 实例的个数 labelCounts = &#123;&#125; for featVec in dataSet: # 遍历每个实例，统计标签的频次 currentLabel = featVec[-1] if currentLabel not in labelCounts.keys(): labelCounts[currentLabel] = 0 labelCounts[currentLabel] += 1 shannonEnt = 0.0 for key in labelCounts: prob = float(labelCounts[key]) / numEntries shannonEnt -= prob * math.log(prob, 2) # log base 2 return shannonEntdef calcConditionalEntropy(dataSet, i, featList, uniqueVals): ''' 计算X_i给定的条件下，Y的条件熵 :param dataSet:数据集 :param i:维度i :param featList: 数据集特征列表 :param uniqueVals: 数据集特征集合 :return:条件熵 ''' ce = 0.0 for value in uniqueVals: subDataSet = splitDataSet(dataSet, i, value) prob = len(subDataSet) / float(len(dataSet)) # 极大似然估计概率 ce += prob * calcShannonEnt(subDataSet) # ∑pH(Y|X=xi) 条件熵的计算 return cedef calcInformationGain(dataSet, baseEntropy, i): """ 计算信息增益 :param dataSet:数据集 :param baseEntropy:数据集中Y的信息熵 :param i: 特征维度i :return: 特征i对数据集的信息增益g(dataSet|X_i) """ featList = [example[i] for example in dataSet] # 第i维特征列表 uniqueVals = set(featList) # 转换成集合 newEntropy = calcConditionalEntropy(dataSet, i, featList, uniqueVals) infoGain = baseEntropy - newEntropy # 信息增益，就是熵的减少，也就是不确定性的减少 return infoGaindef calcInformationGainRate(dataSet, baseEntropy, i): """ 计算信息增益比 :param dataSet:数据集 :param baseEntropy:数据集中Y的信息熵 :param i: 特征维度i :return: 特征i对数据集的信息增益g(dataSet|X_i) """ return calcInformationGain(dataSet, baseEntropy, i) / baseEntropy# 决策树的构建myDat, labels = createDataSet()myTree = createTree(myDat, labels) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 绘制决策树import matplotlib.pyplot as plt # 定义文本框和箭头格式decisionNode = dict(boxstyle="round4", color='#3366FF') #定义判断结点形态leafNode = dict(boxstyle="circle", color='#FF6633') #定义叶结点形态arrow_args = dict(arrowstyle="&lt;-", color='g') #定义箭头 #绘制带箭头的注释def plotNode(nodeTxt, centerPt, parentPt, nodeType): createPlot.ax1.annotate(nodeTxt, xy=parentPt, xycoords='axes fraction', xytext=centerPt, textcoords='axes fraction', va="center", ha="center", bbox=nodeType, arrowprops=arrow_args) #计算叶结点数def getNumLeafs(myTree): numLeafs = 0 firstStr = list(myTree.keys())[0] secondDict = myTree[firstStr] for key in secondDict.keys(): if type(secondDict[key]).__name__ == 'dict': numLeafs += getNumLeafs(secondDict[key]) else: numLeafs += 1 return numLeafs #计算树的层数def getTreeDepth(myTree): maxDepth = 0 firstStr = list(myTree.keys())[0] secondDict = myTree[firstStr] for key in secondDict.keys(): if type(secondDict[key]).__name__ == 'dict': thisDepth = 1 + getTreeDepth(secondDict[key]) else: thisDepth = 1 if thisDepth &gt; maxDepth: maxDepth = thisDepth return maxDepth #在父子结点间填充文本信息def plotMidText(cntrPt, parentPt, txtString): xMid = (parentPt[0] - cntrPt[0]) / 2.0 + cntrPt[0] yMid = (parentPt[1] - cntrPt[1]) / 2.0 + cntrPt[1] createPlot.ax1.text(xMid, yMid, txtString, va="center", ha="center", rotation=30) def plotTree(myTree, parentPt, nodeTxt): numLeafs = getNumLeafs(myTree) depth = getTreeDepth(myTree) firstStr = list(myTree.keys())[0] cntrPt = (plotTree.xOff + (1.0 + float(numLeafs)) / 2.0 / plotTree.totalW, plotTree.yOff) plotMidText(cntrPt, parentPt, nodeTxt) #在父子结点间填充文本信息 plotNode(firstStr, cntrPt, parentPt, decisionNode) #绘制带箭头的注释 secondDict = myTree[firstStr] plotTree.yOff = plotTree.yOff - 1.0 / plotTree.totalD for key in secondDict.keys(): if type(secondDict[key]).__name__ == 'dict': plotTree(secondDict[key], cntrPt, str(key)) else: plotTree.xOff = plotTree.xOff + 1.0 / plotTree.totalW plotNode(secondDict[key], (plotTree.xOff, plotTree.yOff), cntrPt, leafNode) plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key)) plotTree.yOff = plotTree.yOff + 1.0 / plotTree.totalD def createPlot(inTree): fig = plt.figure(1, facecolor='white') fig.clf() axprops = dict(xticks=[], yticks=[]) createPlot.ax1 = plt.subplot(111, frameon=False, **axprops) plotTree.totalW = float(getNumLeafs(inTree)) plotTree.totalD = float(getTreeDepth(inTree)) plotTree.xOff = - 0.5 / plotTree.totalW; plotTree.yOff = 1.0; plotTree(inTree, (0.5, 1.0), '') plt.show() createPlot(myTree) &emsp;&emsp;我们应该可以得到如下差不多的图： C4.5的生成算法&emsp;&emsp;C4.5算法与ID3算法相似，C4.5算法对ID3算法进行了改进。C4.5在生成的过程中，用信息增益比来选择特征。 算法 (C4.5的生成算法)：输入：训练数据集D ，特征集A ，阈值\varepsilon 输出：决策树T (1) 如果D 中的所有实例属于同一类C_{k} ，则置T 为单结点树，并将C_{k} 作为该结点的类，返回T ； (2) 如果A=\phi ，则置T 为单节点树，并将D 中实例数最大的类C_{k} 作为该结点的类，返回T ； (3) 否则，按g_{R}(D,A) = \frac{g(D/A)}{H_{A}(D)} 计算A 中个特征对D 的信息增益比，选择信息增益比最大的特征A_{g} ； (4) 如果A_{g} 的信息增益比小于阈值\varepsilon ，则置T 为单结点树，并将D 中实例数最大的类C_{k} 作为该结点的类，返回T ； (5) 否则，对A_{g} 的每一可能值a_{i} ，依A_{g} = a_{i} 将D 分割为子集若干非空D_{i} ，将D_{i} 中实例树最大的类作为标记，构建子结点，由结点及其子结点构成树T 返回T ； (6) 对结点i ，以D_{i} 为训练集，以A - \left \{A_{g}\right \} 为特征集，递归地调用步(1)~步(5)，得到子树T_{i} ，返回T_{i} . &emsp;&emsp;实现的python代码(省略与之前重复的代码)： 12345678910111213141516def chooseBestFeatureToSplitByC45(dataSet): """ 选择最好的数据集划分方式 :param dataSet: :return: """ numFeatures = len(dataSet[0]) – 1 # 最后一列是分类 baseEntropy = calcShannonEnt(dataSet) bestInfoGainRate = 0.0 bestFeature = –1 for i in range(numFeatures): # 遍历所有维度特征 infoGainRate = calcInformationGainRate(dataSet, baseEntropy, i) if (infoGainRate &gt; bestInfoGainRate): # 选择最大的信息增益 bestInfoGainRate = infoGainRate bestFeature = i return bestFeature # 返回最佳特征对应的维度 决策树的剪枝&emsp;&emsp;决策树很容易发生过拟合，过拟合的原因在于学习的时候过多地考虑如何提高对训练数据的正确分类，从而构建出过于复杂的决策树。解决这个问题的办法就是简化已生成的决策树，也就是剪枝。 &emsp;&emsp;决策树的剪枝往往通过极小化决策树整体的损失函数或代价函数来实现。 决策树生成：考虑更好的拟合训练集数据 —— 学习局部的模型剪枝：通过优化损失函数还考虑了减小模型复杂度 —— 学习整体的模型 &emsp;&emsp;设树T的叶节点个数为\left |T\right| ，每个叶节点即为沿从root的某条路径条件下的一类。t 是树T 的叶节点，该节点有N_t 个样本点，其中属于各个分类的点为N_{tk} 个。 &emsp;&emsp;该叶节点的经验熵为： H_t(T)=-\sum \limits_{k=1}^K \frac{\left | N_{tk} \right |}{\left | N_t \right |}\log_2 \frac{\left | N_{tk} \right |}{\left | N_t \right |}&emsp;&emsp;则决策树学习的损失函数可以定义为： C_{\alpha}(T)=\sum \limits_{t=1}^{\left |T\right |} N_tH_t(T) + \alpha \left |T\right|&emsp;&emsp;记右端第一项为 C(T)=\sum \limits_{t=1}^{\left |T\right |} N_tH_t(T)=-\sum \limits_{t=1}^{\left |T\right |} \sum \limits_{k=1}^{K} N_{tk} \log \frac{N_{tk}}{N_t}&emsp;&emsp;有C_{\alpha}(T)=C(T) + \alpha \left |T\right| &emsp;&emsp;第一项反映对训练集的拟合程度，第二项反映模型复杂度。等价于正则化的极大似然估计。 &emsp;&emsp;L1范数是指向量中各个元素绝对值之和，也叫“稀疏规则算子”（Lasso regularization）。 &emsp;&emsp;L2范数是指向量各元素的平方和然后求平方根。 算法 (树的剪枝算法)输入：生成的树T ，参数α输出：子树T_α (1) 计算每个节点的经验熵。 (2) 递归地从叶节点向上收缩。 设有一组叶节点回缩前后的整体树分别为T_B ,T_A ，对应的损失函数如果是： C_{\alpha}(T_A)\leq C_{\alpha}(T_B)剪枝后损失函数更小，则说明应该剪枝，将父结点变为新的叶节点。(3) 返回(2)直至不能继续为止。得到损失函数最小的子树T_{\alpha} 。 &emsp;&emsp;注意(1)我们计算的是所有节点的经验熵，虽然我们考虑叶节点比较，但因为不断剪枝时，每个节点都可能变为叶节点。所以计算全部存起来。 &emsp;&emsp;注意：每次考虑两个树的损失函数的查，计算可以在局部进行，所以剪枝算法可以由一种动态规划的算法实现。 CART算法&emsp;&emsp;分类与回归树(classification and regression tree, CART)，即可用于分类，也可用于回归。由三步组成：特征选择，生成树，剪枝。 &emsp;&emsp;CART树假设决策树为二叉树，每个结点为2分支，“是”与“否”。 CART生成对回归树：平方误差最小化对分类树：基尼指数-Gini index 回归树的生成&emsp;&emsp;一个回归树对应特征空间的一个划分，每个划分单元上输出一个值。假设已将输入空间划分成M 个单元R_1,R_2...,R_M ，对应输出值为c_1,c_2...,c_M ，那么，回归树模型表示为： f(x)=\sum \limits_{m=1}^{M} c_mI(x\in R_m)&emsp;&emsp;当输入空间的划分确定时，可以用平方误差\sum \limits_{x_i\in R_m} (y_i-f(x_i))^2 表示回归树对训练集D 的预测误差 &emsp;&emsp;每个单元上的均值为\hat{c}_m= ave(y_i|x_i \in R_m) &emsp;&emsp;用启发式的方法对空间进行划分，选择切分变量和切分值：特征的第j 个变量，以及其取值s ，将空间划分为两个子空间： R_1(j,s)=\left \{x|x^{(j)} \leq s\right \}$$ 和 $$R_2(j,s)=\left \{x|x^(j)>s\right \}&emsp;&emsp;然后我们求解这个划分下的最小值： \min \limits_{j,s}\left [ \min \limits_{c_1} \sum \limits_{x_i\in R_1(j,s)} (y_i-c_1)^2+\min \limits_{c_2} (y_i-c_2)^2 \right ]&emsp;&emsp;这样，我们可以遍历j 和s ，对每一组情况下，算出[ ]中的最小值。在所有j ，s 组合情况下找出一个最小值。此时的j 和s 就是我们需要的。第一次划分后，对两个子区域迭代这样做，就可以将空间不断细化。 算法 (最小二乘回归树生成算法)输入：训练数据集D 输出：回归树f(x)(1) 选择最优切分变量j 和切分点s 。求解： \min \limits_{j,s}\left [ \min \limits_{c_1} \sum \limits_{x_i\in R_1(j,s)} (y_i-c_1)^2+\min \limits_{c_2} (y_i-c_2)^2 \right ]遍历j 和s ，对某个j 扫描s ，使得上式最小 (2) 用选好的(j, s) 划分区域，并决定各分区的输出值： R_1(j,s)=\left \{x|x^{(j)} \leq s\right \}$$ 和 $$R_2(j,s)=\left \{x|x^(j)>s\right \}\hat{c}_m=\frac{1}{N_m} \sum \limits_{x_i\in R_1(j,s)} y_i$$ ，$$x\in R_m,m=1,2(3) 继续对两个子区域调用步骤(1)，(2)，直到满足停止的条件 (4) 将输入空间划分为M 个区域R_1,R_2,...,R_M ，生成决策树： f(x)=\sum \limits_{m=1}^{M} \hat{c_m} I(x\in R_m)分类树的生成&emsp;&emsp;对分类问题，随机变量在每个类上都有概率。以数据集中各类个数比上总数，极大似然估计，得到离散的概率分布。 基尼系数： Gini(x)=\sum \limits_{k=1}^{K} p_k(1-p_k)=1-\sum \limits_{k=1}^{K}p_k^2&emsp;&emsp;对于给定的样本集合D ，基尼指数为 Gini(x)=1-\sum \limits_{k=1}^{K}\left ( \frac{\left | C_k \right |}{\left | D \right |} \right )^2&emsp;&emsp;C_k 是D 中第k 类的个数，K 是类别总个数。 &emsp;&emsp;若样本集合D 根据特征A 是否取某一可能值a 被划分为D_1 ,D_2 ，则在特征A 的条件下，集合D 的基尼指数为 Gini(D,A)=\frac{\left |D_1\right |}{\left |D\right |}Gini(D_1)+\frac{\left |D_2\right |}{\left |D\right |}Gini(D_2)算法 (CART生成算法)输入：训练数据集D ，停止计算的条件 输出：CART决策树 根据训练数据集，从根结点开始，递归地对每个结点进行一下操作，构建二叉决策树：(1)设结点的训练数据集为D ,计算现有特征对该数据集的基尼指数。此时，对每一个特征A ，对其可能取的每个值a ，根据样本点对A=a 的测试是“是”或“否”将D 分割成D_1 和D_2 两部分(2)在所有可能的特征A 以及它们所有可能的切分点a 中，选择基尼指数最小的特征及其对应的切分点作为最优特征与最优切分点，依最优特征与最优切分点，从现结点生成两个子结点，将训练数据集依特征分配到两个子结点中(3)对两个子结点递归地调用(1),(2),直至满足停止条件(4)生成CART决策树&emsp;&emsp;算法停止的条件是结点中的样本个数小于预定阈值，或样本集的基尼指数小于预定阈值（样本基本属于同一类），或者没有更多特征。 CART剪枝&emsp;&emsp;CART剪枝算法从“完全生长”的决策树的底端剪去一些子树，使决策树变小（模型变简单），从而能够对未知数据有更准确的预测。CART剪枝算法由两步组成：首先，从生成算法产生的决策树T_0 底端开始不断剪枝，直到T_0 的根结点，形成一个子树序列\left \{T_0,T_1,⋯,T_n\right \} ；然后，通过交叉验证法在独立的验证数据集上对子树序列进行测试，从中选择最优子树。 剪枝，形成一个子树序列&emsp;&emsp;在剪枝过程中，计算子树的损失函数: C_{\alpha}(T)=C(T) + \alpha \left |T\right|&emsp;&emsp;可以用递归的方法对树进行剪枝，将a 从小增大，\alpha_0]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——最大熵模型]]></title>
    <url>%2F2018%2F03%2F03%2Fmaximum_entropy%2F</url>
    <content type="text"><![CDATA[最大熵原理&emsp;&emsp;最大熵原理是概率模型学习的一个准则，最大熵原理认为，学习概率模型时，在所有的可能的概率模型中，熵最大的模型是最好的模型。通常用约束条件来确定概率模型的集合，所以，熵最大原理也可以描述为在满足约束条件的模型集合中选取熵最大的模型。 首先回顾几个概念： 熵 &emsp;&emsp;假设离散随机变量X 的概率分布是P(X) ，则其熵为 H(P)=-\sum \limits_x P(x)\log P(x)&emsp;&emsp;满足下列不等式: 0\leq H(P) \leq \log \left |X\right |联合熵和条件熵 &emsp;&emsp;两个随机变量的X，Y 的联合分布，可以形成联合熵，用H(X,Y) 表示 条件熵H(X|Y) = H(X,Y) - H(Y) H(X|Y) = H(X,Y) - H(Y)=-\sum \limits_{x,y} p(x,y)\log p(x|y)相对熵与互信息 &emsp;&emsp;设p(x),q(x) 是X 中取值的两个概率分布，则p 对q 的相对熵是： D(p||q)=\sum \limits_x p(x) \log \frac{p(x)}{q(x)}=E_{p(x)}\log \frac{p(x)}{q(x)}&emsp;&emsp;两个随机变量X，Y 的互信息，定义为X，Y 的联合分布和独立分布乘积的相对熵。 I(X,Y)=D(P(X,Y)||P(X)P(Y))I(X,Y)=\sum \limits_{x,y} p(x,y) \log \frac{p(x,y)}{p(x)p(y)}直观讲， 最大熵原理认为要选择的概率模型 （1）首先必须满足已有的事实，即约束条件。 （2）在没有更多信息的情况下，就假设那些不确定的部分都是等可能的。 &emsp;&emsp;但是等可能不容易操作，而熵是一个可优化的数值指标。最大熵原理通过熵的最大化来表示等可能性。 最大熵模型的定义&emsp;&emsp;最大熵模型假设分类模型是一个条件概率分布P(Y|X) ,X 为特征，Y 为输出。 &emsp;&emsp;给定一个训练集T=\{(x_{1},y_{1}),(x_2,y_2),...，(x_N,y_N)\} ,其中x 为n 维特征向量，y 为类别输出。我们的目标就是用最大熵模型选择一个最好的分类类型。 &emsp;&emsp;在给定训练集的情况下，我们可以得到总体联合分布P(X,Y) 的经验分布\tilde{P}(X,Y) 和边缘分布P(X) 的经验分布\tilde P(X) 。\tilde{P}(X,Y) 即为训练集中X,Y 同时出现的次数除以样本总数N ，\tilde P(X) 即为训练集中X 出现的次数除以样本总数N 。 &emsp;&emsp;用特征函数f(x,y) 描述输入x 和输出y 之间的关系。定义为： f(x)=\begin{cases}1, & \text{ x与y满足某个关系 } \\ 0, & \text{ 否则 } \end{cases}&emsp;&emsp;可以认为只要出现在训练集中出现的(x_i,y_i) ,其f(x_i,y_i)=1 . 同一个训练样本可以有多个约束特征函数。 &emsp;&emsp;特征函数f(x,y) 关于经验分布\tilde{P}(X,Y) 的期望值，用E_{\tilde P}(f) 表示为: E_{\tilde P}(f)=\sum \limits_{x,y} \tilde P(x,y)f(x,y) &emsp;&emsp;特征函数f(x,y) 关于条件分布P(Y|X) 和经验分布\tilde P(X) 的期望值，用E_P(f) 表示为: E_P(f)=\sum \limits_{x,y}\tilde P(x)P(y|x)f(x,y)&emsp;&emsp;如果模型可以从训练集中学习，我们就可以假设这两个期望相等。即： E_{\tilde P}(f)=E_P(f)&emsp;&emsp;上式是最大熵模型学习的约束条件，假如我们有n个特征函数f_i(x,y),i=1,2,...,n 就有n个约束条件。 &emsp;&emsp;这样我们就得到了最大熵模型的定义如下： &emsp;&emsp;假设满足所有约束条件的模型集合为： E_{\tilde P}(f_i)=E_P(f_i),i=1,2,...,n&emsp;&emsp;定义在条件概率分布P(Y|X) 上的条件熵为： H(P)=−\sum \limits_{x,y}\tilde P(x)P(y|x)\log P(y|x)&emsp;&emsp;我们的目标是得到使H(P) 最大的时候对应的P(y|x) ，这里可以对H(P) 加了个负号求极小值，这样做的目的是为了使−H(P) 为凸函数，方便使用凸优化的方法来求极值。 最大熵模型的学习&emsp;&emsp;对于给定的训练数据集T=\{（x_1，y_1）,（x_2，y_2）,(x_3，y_3),...,(x_n，y_n)\} 以及特征函数f_i(x,y),i=1,2,3,...,n ，最大熵模型的学习等价于约束的最优化问题： \begin{matrix} \max \limits_{P \in C} & H(P)=-\sum \limits_{x,y} \tilde P(x)P(y|x)\log P(y|x) \\ s.t. & E_p(f_i)=E_{\tilde P},i=1,2,...,n \\ & \sum \limits_y P(y|x) =1 \end{matrix}&emsp;&emsp;引入朗格朗日乘子w ，定义拉格朗日函数L(P,w) \begin{align*} L(P,w) &= -H(P)+w_0 \left ( 1-\sum \limits_y P(y|x) \right ) +\sum \limits_{i=1}^{n} w_i(E_{\tilde P}(f_i)-E_p(f_i)) \\ &=\sum \limits_{x,y} \tilde P(x)P(y|x)\log P(y|x)+w_0\left( 1-\sum \limits_{y} P(y|x) \right) \\ &+\sum \limits_{x,y}^{n}w_i \left( \sum \limits_{x,y} \tilde P(x,y)f_i(x,y)-\sum \limits_{x,y} \tilde P(x)P(y|x)f_i(x,y) \right ) \end{align*}最优化的原始问题： \min \limits_{P \in C} \max \limits_w L(P,w)对偶问题是： \max \limits_w \min \limits_{P \in C} L(P,w)&emsp;&emsp;由于L(P,W)是P的凸函数，原始问题的解与对偶问题的解是等价的。这里通过求对偶问题的解来求原始问题的解。 第一步求解内部极小化问题，记为： \Psi(w)=\min \limits_{P \in C} L(P,w)=L(P_w,w)通过微分求导，得出P 的解是： P_w(y|x)=\frac{1}{Z_w(x)}\exp \left( \sum \limits_{i=1}^{n}w_if_i(x,y) \right)Z_w(x)=\sum \limits_y \exp \left ( \sum \limits_{i=1}^{n}w_if_i(x,y) \right)第二步求外部的极大化问题： \max \limits_w \Psi(w)最后的解记为： w^*=\arg \max \limits_w \Psi(w)第三步可以证明对偶函数的极大化等价于第一步求解出的P的极大似然估计，所以将最大熵模型写成更一般的形式. P_w(y|x)=\frac{1}{Z_w(x)}\exp \left(\sum \limits_{i=1}^{n}w_if_i(x,y)\right)Z_w(x)=\sum \limits_y \exp \left ( \sum \limits_{i=1}^{n}w_if_i(x,y) \right)模型学习的最优化算法&emsp;&emsp;最大熵模型的学习最终可以归结为以最大熵模型似然函数为目标函数的优化问题。这时的目标函数是凸函数，因此有很多种方法都能保证找到全局最优解。例如改进的迭代尺度法(IIS)，梯度下降法，牛顿法或拟牛顿法，牛顿法或拟牛顿法一般收敛比较快。 算法 (改进的迭代尺度算法IIS)输入：特征函数f_1,f_2,...,f_n ；经验分布\tilde P(X,Y) ，模型P_w(y|x) 输出：最优参数值w_i^* ，最优模型P_{w^*} (1) 对所有i\in \{ 1,2,...,n \} ，取初值w_i=0 (2) 对每一i\in\{ 1,2,...,n \} ： &emsp;&emsp;(a) 令\delta_i 是方程 \sum \limits_{x,y} \tilde P(x)P(y|x)f_i(x,y)\exp (\delta_i \sum \limits_{i=1}^n f_i(x,y))=E_{\tilde P}(f_i)&emsp;&emsp;(b) 更新w_i ：w_i\leftarrow w_i + \delta_i (3) 如果不是所有w_i 都收敛，重复步(2). 算法 (最大熵模型学习的BFGS算法)输入：特征函数f_1,f_2,...,f_n ；经验分布\tilde P(X,Y) ，目标函数f(w) ，梯度g(w)=\nabla f(w) ，精度要求\varepsilon ； 输出：最优参数值w^* ，最优模型P_{w^*}(y|x) (1) 选定初始点w^{(0)} ，取B_0 为正定对称矩阵，置k=0 (2) 计算g_k=g(w^{(k)}) . 若\left \| g_k \right \|]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>最大熵模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——逻辑斯谛回归]]></title>
    <url>%2F2018%2F03%2F03%2Flogistic_regression%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;逻辑回归(logistic regression)是统计学习中的经典分类方法。其多用在二分类{0,1}问题上。最大嫡是概率模型学习的一个准则将其推广到分类问题得到最大熵模型(maximum entropy model)。逻辑回归模型与最大熵模型都属于对数线性模型。 逻辑斯谛回归模型逻辑斯谛分布&emsp;&emsp;设X是连续随机变量，X 服从逻辑斯谛分布是指X 具有下列分布函数和密度函数 F(x)=P(X\leq x)=\frac{1}{1+e^{-(x-\mu)/\gamma}}f(x)=F^{'}(x)=\frac{e^{-(x-\mu)/\gamma}}{\gamma(1+e^{-(x-\mu)/\gamma})^2}&emsp;&emsp;分布函数属于逻辑斯谛函数，其图形是一条S形曲线。 二项逻辑斯谛回归模型&emsp;&emsp;二项逻辑回归模型(binomial logistic regression model)是一种分类模型，用于二类分类。由条件概率分布P(Y|X) 表示，形式为参数化的逻辑分布。这里，随机变量X取值为实数，随机变量Y取值为1或0。 &emsp;&emsp;二项逻辑斯谛回归模型是如下条件概率分布: P(Y=1|x)=\frac{\exp(w\cdot x+b)}{1+\exp(w\cdot x+b)}P(Y=0|x)=\frac{1}{1+\exp(w\cdot x+b)}&emsp;&emsp;其中，x\in\mathbb{R}^n,Y\in \{ 0,1 \} ，w\in\mathbb{R}^n 和b\in\mathbb{R} . &emsp;&emsp;逻辑回归对线性回归经行了归一化操作，将输出范围规定在{0,1}。 &emsp;&emsp;几率，指一件事件发生的概率与不发生的概率的比值，那么事件的对数几率或logit函数是 logit(p)=\log \frac{p}{1-p}&emsp;&emsp;因此， logit(p)=\log \frac{P(Y=1|x)}{1-P(Y=1|x)}=w\cdot x&emsp;&emsp;这就是说，在逻辑回归模型中，输出Y=1的对数几率是输入x的线性函数。 &emsp;&emsp;通过逻辑回归模型可以将线性函数转化为概率： P(Y=1|x)=\frac{\exp(w\cdot x)}{1+\exp(w\cdot x)}&emsp;&emsp;线性函数值越接近正无穷，概率越接近1；线性函数值越接近负无穷，概率值越接近0。这样的模型称为逻辑回归模型。 Python代码如下： 1234567891011121314import numpy as npdef predict(x,w): return 1.0/1.0+np.e**(-x.dot(w))def iter_w(x, y, a, w): prediction = predict(x,w) g = (prediction - y) * x w = w+ a * g * (1.0 / y.size) return wwhile counter &lt; max_epochs: counter += 1 for i in range(len(Y)): w = update(X[i,:], Y[i], a, w) 模型参数估计&emsp;&emsp;逻辑斯谛回归模型学习时，可以利用极大似然估计法估计模型参数 &emsp;&emsp;似然函数： \prod \limits_{i=1}^{N} P(Y=1|x_i)^{y_i}(1-P(Y=1|x_i))^{1-y_i}&emsp;&emsp;对数似然函数： \begin{align*} &L(w)=\sum \limits_{i=1}^{N}\left [ y_i\log P(Y=1|x_i)+(1-y_i)\log (1-P(Y=1|x_i)) \right ] \\ &=\sum \limits_{i=1}^{N}\left [ y_i\log \frac{P(Y=1|x_i)}{1-P(Y=1|x_i)}+\log (1-P(Y=1|x_i)) \right ] \\ &= \sum \limits_{i=1}^{N}\left [ y_i(w\cdot x_i)-\log (1+\exp(w\cdot x_i)) \right ]\end{align*}&emsp;&emsp;这样子，我们有了损失函数，这里我们只要将该函数极大化即可，求其最大值时的w 即可。 &emsp;&emsp;具体过程可参考Andrew Ng的CS229讲义, Part 2 logistic regression部分,翻译) 多项逻辑斯谛回归&emsp;&emsp;多项逻辑斯谛回归用于多分类问题，其模型为 P(Y=k|x)=\frac{\exp(w_k\cdot x)}{1+\sum \limits_{k=1}^{K-1} \exp(w_k\cdot x)},k=1,2,...,K-1P(Y=K|x)=\frac{1}{1+\sum \limits_{k=1}^{K-1} \exp(w_k\cdot x)}参考文章 《统计学习方法》第六章逻辑斯蒂回归与最大熵模型学习笔记 统计学习方法 李航—-第6章 逻辑回归与最大熵模型]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>logistic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《夜观星空：天文观测实践指南》推荐序]]></title>
    <url>%2F2018%2F02%2F28%2FNight_Watch_Recommend%2F</url>
    <content type="text"><![CDATA[作者：特伦斯·迪金森 译者：谢懿 &emsp;&emsp;本书针对天文爱好者，从宇宙结构讲起，详细介绍了夜空中著名的恒星、行星、星团、星系以及彗星、流星和极光等，并介绍了各种观测方法，既包括目视观测，也包括使用双筒望远镜和天文望远镜观测。同时，本书还详细介绍了各类观星器材以及天文摄影所需的器材，包括品牌、选购方式、适用范围、使用方法等等，并给出了参考价位。书的末尾列出了一些参考资料，帮助读者进一步扩大视野。本书将复杂的天文观测问题直观化、亲切化，让星体观测不再高深得触不可及，让所有人都能享受到天文观测的乐趣。以往的天体观测书都有复杂冗长难懂的科学知识做铺垫，而本书打破常规，通过无公式、无需计算的方法，最大限度地提高读者观测到星体的成功率，为初学者设计的星图往往会添加天空中的网格、望远镜可见的天体以及星座和恒星的名字，但是其真实性和清晰性不够。本书使用了独特的全天双图，既有真实显示每个季节恒星的全彩色星图，又有与其完全相同的包含名称及定位箭头系统的星图，同时使用这两种星图能够克服过去使用的星图的许多问题。 &emsp;&emsp;到了21世纪，人们对宇宙的兴趣与日俱增，他们不仅仅阅读书籍，也会走到户外亲眼观察夜空。观星是一项极为有益的活动，还没有人因为在这一领域中付出的努力而后悔。和对其他事物的兴趣一样，一个人对自己看到的东西了解得越多，就会越发满足。 &emsp;&emsp;这正体现了拥有一本好书的重要性，它是你的观星伴侣，会提醒你，使你在不断阅读中进步。就像好朋友一样，这本书应该知识丰富、可靠、言简意赅，在传达内容的同时不会成为你和星星之间的障碍。无论你是用203毫米（8英寸）的天文望远镜观测木星卫星，还是用双筒望远镜扫视银河，亦或是学习一些星座和星星的名字，这本书都应该耐用并易于使用。 &emsp;&emsp;富有经验的观测者都有他们最青睐的书籍。这些书都经受住了户外使用和室内研读的双重考验，成为了观测者的老朋友，它们就像饱经风霜的老兵，在不计其数的日日夜夜里体现了他们的忠诚。我的“老朋友”包括H.A.雷伊的《星星：观测它们的新方法》（The Stars: A New Way to See Them），这是一本古怪而迷人的星座介绍书；艾伦·桑德奇的《哈勃星系图》（Hubble Atlas of Galaxies）——如果哥伦布是一个好作家并且拥有照相机的话，他可能也会出版一本类似的书；以及罗伯特·伯纳姆的《伯纳姆天体手册》（Burnham’s Celestial Handbook），虽然伯纳姆在世时没有得到足够的回报，这一倾力之作却使他永远活在了人们的心中。 &emsp;&emsp;特伦斯·迪金森的《夜观星空》也有望成为这样一本书。自从问世以来，它赢得了广大天文爱好者的信任与喜爱。迪金森本人既是一个富有经验的观测者，也是一位头脑清醒的作家。他知道天空中有什么以及如何才能最好的观测它们；他以朴实而亲切的语言与读者分享了自己的专长，使自己和他人都受益匪浅；他对天文学的深层次审美则体现在书中优美的图片上。他还不断的完善和更新这本书，直到它自然地融入星空守望者的日常生活，就像渔夫手中锐利而趁手的小刀。在一个晴朗无风的夜晚，何不尝试一下，为自己而眺望星空。 蒂莫西 · 费里斯 美国加利福尼亚大学伯克利分校名誉教授]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>天文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于完成博客的搭建工作了，欢迎大家访问]]></title>
    <url>%2F2018%2F02%2F21%2FNewBlog%2F</url>
    <content type="text"><![CDATA[前两天把自己的博客搭建好了，本来想好好写一篇博客记录一下，但是东西有点多，而且正赶上过年，吃的比较多，人变得有点懒，所以就把我搭建网站时参考的文章整理一下，也刚好可以凑成完整的搭建过程。 每个博客里都有一些值得借鉴的地方，不妨多看几篇作为参考： 我的博客：Quanfita的博客 供想要搭建博客的小伙伴们参考一下： 基本环境 Hexo NexT主题 github coding 腾讯云域名 基本搭建过程Hexo静态博客搭建+个人定制 用Hexo + github搭建自己的博客 —- 再也不用羡慕别人了！ 免费个人博客搭建详解 Hexo 3.1.1 静态博客搭建指南 功能添加Hexo之使用Livere评论代替多说评论 [自制工具]实现自动推送Hexo博客文章至百度 Hexo之使用CodingPages实现全站Https next主题如何添加动态背景 优化美化hexo的next主题个性化教程:打造炫酷网站]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub Pages</tag>
        <tag>coding pages</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记——朴素贝叶斯法]]></title>
    <url>%2F2018%2F02%2F21%2Fnaive_Bayes%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;朴素贝叶斯(naive Bayes)法是基于贝叶斯定理与特征条件独立假设的分类方法。 朴素贝叶斯法&emsp;&emsp;设输入空间X\subseteq \mathbb{R}^n 为n 维向量的集合，输出空间为类标记集合Y=\left \{ c_1,c_2,...,c_K \right \} ，输入特征向量x \in X ，输出类标记为y\in Y ，P(X,Y) 是X 和Y 的联合概率分布，数据集 T = \left \{ (x_1,y_1),(x_2,y_2),...,(x_n,y_n) \right \}由P(X,Y) 独立同分布产生。 &emsp;&emsp;朴素贝叶斯法就是通过训练集来学习联合概率分布P(X,Y) .具体就是从先验概率分布和条件概率分布入手，俩概率相乘即可得联合概率。 &emsp;&emsp;称之为朴素是因为将条件概率的估计简化了，对条件概率分布作了条件独立性假设，这也是朴素贝叶斯法的基石，假设如下 P(X=x|Y=c_k)=P(X^{(1)}=x^{(1)},...,X^{(n)}=x^{(n)}|Y=c_k), k=1,2,...,K&emsp;&emsp;这个公式在之前的假设条件下等价于 \prod \limits_{j=i}^n P(X^{(j)}=x^{(j)}|Y=c_k)&emsp;&emsp;对于给定的输入向量x ,通过学习到的模型计算后验概率分布P(Y=C_k|X=x) ，后验分布中最大的类作为x 的输出结果，根据贝叶斯定理可知后验概率为 P(Y=c_k|X=x)=\frac{P(X=x|Y=c_k)P(Y=c_k)}{\sum_kP(X=x|Y=c_k)P(Y=c_k)}&emsp;&emsp;其中\sum_kP(X=x|Y=c_k)P(Y=c_k)\Leftrightarrow P(X=x) &emsp;&emsp;所有c_k 的P(X=x) 都是相同的，这样我们可以把输出结果化简成 y = arg \max \limits_{c_k} P(Y=c_k) \prod_jP(X^{(j)}=x^{(j)}|Y=c_k)&emsp;&emsp;这样，就了解了朴素贝叶斯法的基本原理了，下面要介绍的是参数估计。 参数估计极大似然估计&emsp;&emsp;我们已经知道对于给定的输入向量x ，其输出结果可以表示为 y = arg \max \limits_{c_k} P(Y=c_k) \prod_jP(X^{(j)}=x^{(j)}|Y=c_k)&emsp;&emsp;可以使用极大似然估计法来估计相应的概率。先验概率P(Y=c_k) 的极大似然估计是 P(Y=c_k)=\frac{\sum \limits_{i=1}^NI(y_i=c_k)} {N}, k=1,2,...,K&emsp;&emsp; 设第j 个特征x^{(j)} 可能的取值的集合为\left \{ a_{j1} ,a_{j2} ,...,a_{js_j} \right \} ，条件概率P(X^{(j)}=a_{jl}|Y=c_k) 的极大似然估计是 P(X^{(j)}=a_{jl},Y=c_k)=\frac{\sum \limits_{i=1}^NI(x_i^{(j)}=a_{jl},y_i=c_k)} {\sum \limits_{i=1}^NI(y_i=c_k)}j=1,2,...,n; l=1,2,...,S_j;k=1,2,...,K学习与分类算法&emsp;&emsp;下面给出朴素贝叶斯法的学习与分类算法。 算法 (朴素贝叶斯算法)输入: 训练数据 T = \left \{ (x_1,y_1),(x_2,y_2),...,(x_n,y_n) \right \} , 其中x_i = (x_i^{(1)},x_i^{(2)},...,x_i^{(n)} )^T ，x_i^{(j)}\in \left \{ a_{j1} ,a_{j2} ,...,a_{js_j} \right \} ，j=1,2,...,n ，l=1,2,...,S_j ，y_i \in \left \{ c_1,c_2,...,c_K \right \} ；实例x ； 输出: 实例x 的分类. (1) 计算先验概率及条件概率 P(Y=c_k)=\frac{\sum \limits_{i=1}^NI(y_i=c_k)} {N}, k=1,2,...,KP(X^{(j)}=a_{jl},Y=c_k)=\frac{\sum \limits_{i=1}^NI(x_i^{(j)}=a_{jl},y_i=c_k)} {\sum \limits_{i=1}^NI(y_i=c_k)}j=1,2,...,n; l=1,2,...,S_j;k=1,2,...,K(2) 对于给定的实例x = (x^{(1)},x^{(2)},...,x^{(n)} )^T ，计算 P(Y=c_k) \prod_jP(X^{(j)}=x^{(j)}|Y=c_k),k=1,2,...,K(3) 确定实例x 的类 y = arg \max \limits_{c_k} P(Y=c_k) \prod_jP(X^{(j)}=x^{(j)}|Y=c_k)例子：试由下表的训练数据学习一个朴素贝叶斯分类器并确定x=(2,S)^T 的类标记，表中X^{(1)},X^{(2)} 为特征，Y 为类标记。 python代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import numpy as np#构造NB分类器def Train(X_train, Y_train, feature): global class_num,label class_num = 2 #分类数目 label = [1, -1] #分类标签 feature_len = 3 #特征长度 #构造3×2的列表 feature = [[1, 'S'], [2, 'M'], [3, 'L']] prior_prob = np.zeros(class_num) # 初始化先验概率 con_prob = np.zeros((class_num,feature_len,2)) # 初始化条件概率 positive_count = 0 #统计正类 negative_count = 0 #统计负类 for i in range(len(Y_train)): if Y_train[i] == 1: positive_count += 1 else: negative_count += 1 prior_prob[0] = positive_count / len(Y_train) #求得正类的先验概率 prior_prob[1] = negative_count / len(Y_train) #求得负类的先验概率 ''' con_prob是一个2*3*2的三维列表，第一维是类别分类，第二维和第三维是一个3*2的特征分类 ''' #分为两个类别 for i in range(class_num): #对特征按行遍历 for j in range(feature_len): #遍历数据集，并依次做判断 for k in range(len(Y_train)): if Y_train[k] == label[i]: #相同类别 if X_train[k][0] == feature[j][0]: con_prob[i][j][0] += 1 if X_train[k][1] == feature[j][1]: con_prob[i][j][1] += 1 class_label_num = [positive_count, negative_count] #存放各类型的数目 for i in range(class_num): for j in range(feature_len): con_prob[i][j][0] = con_prob[i][j][0] / class_label_num[i] #求得i类j行第一个特征的条件概率 con_prob[i][j][1] = con_prob[i][j][1] / class_label_num[i] #求得i类j行第二个特征的条件概率 return prior_prob,con_prob#给定数据进行分类def Predict(testset, prior_prob, con_prob, feature): result = np.zeros(len(label)) for i in range(class_num): for j in range(len(feature)): if feature[j][0] == testset[0]: conA = con_prob[i][j][0] if feature[j][1] == testset[1]: conB = con_prob[i][j][1] result[i] = conA * conB * prior_prob[i] result = np.vstack([result,label]) return resultdef main(): X_train = [[1, 'S'], [1, 'M'], [1, 'M'], [1, 'S'], [1, 'S'], [2, 'S'], [2, 'M'], [2, 'M'], [2, 'L'], [2, 'L'], [3, 'L'], [3, 'M'], [3, 'M'], [3, 'L'], [3, 'L']] Y_train = [-1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1] #构造3×2的列表 feature = [[1, 'S'], [2, 'M'], [3, 'L']] testset = [2, 'S'] prior_prob, con_prob= Train(X_train, Y_train, feature) result = Predict(testset, prior_prob, con_prob, feature) print('The result:',result)main() &emsp;&emsp;得到结果: 123&gt; The result: [[ 0.02222222 0.06666667]&gt; [ 1. -1. ]]&gt; 贝叶斯估计&emsp;&emsp;极大似然估计的一个可能是会出现所要估计的概率值为0的情况，这时会影响到后验概率的计算结果，解决这一问题的方法是采用贝叶斯估计，具体的只需要在极大似然估计的基础上加多一个参数即可。 P_{\lambda}(X^{(j)}=a_{jl},Y=c_k)=\frac{\sum \limits_{i=1}^NI(x_i^{(j)}=a_{jl},y_i=c_k)+\lambda} {\sum \limits_{i=1}^NI(y_i=c_k)+S_j\lambda},\lambda \geq 0&emsp;&emsp;当\lambda=0 时就是最大似然估计。常取\lambda=1 ，这时称为拉普拉斯平滑(Laplace smoothing)。 小结&emsp;&emsp;朴素贝叶斯法高效，且易于实现，但是其缺点就是分类的性能不一定很高。 参考文章 统计学习方法（四）——朴素贝叶斯法 朴素贝叶斯分类器的应用 李航统计学习方法——算法3朴素贝叶斯法 李航《统计学习方法》朴素贝叶斯分类器实现]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Naive Bayes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——K近邻法]]></title>
    <url>%2F2018%2F02%2F12%2Fk_NN%2F</url>
    <content type="text"><![CDATA[k近邻算法&emsp;&emsp;k近邻算法，即是给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的K个实例，这K个实例的多数属于某个类，就把该输入实例分类到这个类中。 &emsp;&emsp;直接给出k近邻算法： 算法 (k近邻法)输入: 训练数据集T = \left \{ (x_1,y_1),(x_2,y_2),...,(x_n,y_n) \right \} , 其中x_i \in X = \mathbb{R}^n,y_i \in Y = \left \{ c_1,c_2,...,c_K \right \},i = 1,2,...,N ；实例特征向量x ； 输出: 实例x 所属的类y . (1) 根据给定的距离度量，在训练集T 中找到与x 最邻近的k 个点，蕴盖这k 个点的x 的邻域记作N_k(x) ； (2) 在N_k(x) 中根据分类决策规则（如多数表决）决定x 的类别y ： y=arg \max \limits_{c_j} \sum \limits_{x_i \in N_k(x)} I(y_i=c_i),i=1,2,...,N; j=1,2,...,K其中，I 为指示函数，即当y_i=c_i 时I 为1，否则I 为0。 &emsp;&emsp;k近邻法没有显式的学习过程。 k近邻模型&emsp;&emsp;k近邻算法使用的模型实际上对应于特征空间的划分，模型由三个基本要素——距离度量、k值的选择和分类决策规则决定。 距离度量&emsp;&emsp;特征空间中俩个实例的距离是俩个实例点相似程度的反映，k近邻中一般使用欧氏距离。 &emsp;&emsp;设特征空间X 是n 维实数向量空间\mathbb{R}^n ，x_i,x_j \in X,x_i=(x_i^{(1)},x_i^{(2)},...,x_i^{(n)})^T,x_j=(x_j^{(1)},x_j^{(2)},...,x_j^{(n)})^T ，x_i,x_j 的L_p 距离为 L_p(x_i,x_j)=\left ( \sum \limits_{l=1}^{n} \left | x_i^{(l)}-x_j^{(l)} \right |^p\right )^{\frac{1}{p}}p \geq 1&emsp;&emsp;当p=2 时，称为欧氏距离(Euclidean distance)，即 L_2(x_i,x_j)=\left ( \sum \limits_{l=1}^{n} \left | x_i^{(l)}-x_j^{(l)} \right |^2\right )^{\frac{1}{2}}&emsp;&emsp;当p=1 时，称为曼哈顿距离(Manhattan distance)，即 L_1(x_i,x_j)=\sum \limits_{l=1}^{n} \left |x_i^{(l)}−x_j^{(l)} \right|&emsp;&emsp;当p=\infty 时，它是各个坐标距离的最大值，即 L_{\infty }(x_i,x_j)=\max \limits_{l} \left |x_i^{(l)}−x_j^{(l)} \right|&emsp;&emsp;不同的距离度量所确定的最近邻点是不同的。 k值选择&emsp;&emsp;k值得选择会对k近邻算法的结果产生重大影响！！！&emsp;&emsp;如果选择的k值较小，就相当于用较小的的邻域中的训练实例进行预测。此时预测的结果会对近邻的实例点非常敏感。&emsp;&emsp;如果选择较大的k值，就相当于在较大的邻域中训练实例进行预测。此时，与输入实例较远的训练实例也会对预测起作用，使预测发生错误。&emsp;&emsp;如果k等于训练样本个数，此时将输入实例简单的预测为训练样本中最多的类。这时模型过于简单，会完全忽略训练样本中的大量有用信息，是不可取的。&emsp;&emsp;在应用中，k值一般选取一个比较小的数值，通常采用交叉验证法来选取最优的k值。 分类决策规则&emsp;&emsp;k近邻算法中分类决策规则往往是多数表决，即由输入实例的k个邻近的训练实例中的多数类决定输入实例的类。 k近邻法的实现：kd树&emsp;&emsp;kd树是一种对k维空间中的样本点进行存储以便对其进行快速检索的树形结构，它是一种二叉树，表示对k维空间的一个划分。构造k树相当于不断的用垂直于坐标轴的超平面去划分k维空间，构成一些列的k维超矩形区域，kd树的每个节点对应于一个k维的超矩形区域。 构造kd树&emsp;&emsp;通俗来讲，对于一个样本空间的样本点，计算每一个维度的方差，按照方差最大的那个维度来排序，因为方差大代表的是数据分散的比较开，这样分割会有更高的分割效率。取中位数作为根节点，小于中位数的样本点作为左子树，大于的作为右子树。重复进行，直到得到一棵完整的二叉树。 算法 (构造平衡kd树)输入：k维空间数据集T=\left \{ x_1,x_2,...,x_N \right \} ，其中x_i = (x_i^{(1)},x_i^{(2)},...,x_i^{(k)})^T, i=1,2,...,N; 输出：kd树 (1) 开始：构造根节点，根节点对应于包含T 的k 维空间的超矩形区域。 &emsp;&emsp;选择中x^{(1)} 为坐标轴，以T 中x^{(1)} 坐标的中位数作为且分点，将根节点对应的超矩形区域切分为两个子区域，切分面为垂直于x^{(1)} 轴的平面。将落在切分面上的点作为根节点，左子节点为对应坐标x^{(1)} 小于切分点的区域，右子节点为对应坐标x^{(1)} 大于切分点的区域。 (2) 重复：对深度为j 的节点，选择中x^{(1)} 为切分的坐标轴，l=j( \mod k )+ 1 ，以该节点的区域中所有实例的x^{(l)} 坐标的中位数为切分点，将该节点对应的超矩形区域切分为两个子区域。 (3) 直到子区域内没有实例存在时停止。 例子 : 给定一个二维空间的数据集：T=\left \{ (2,3)^T,(4,5) ^T,(9,6)^T,(4,7)^T,(8,1)^T,(7,2)^T \right \} 构造一个平衡kd树。(Wikipedia) Python代码如下: 12345678910111213141516171819202122232425262728293031323334from collections import namedtuplefrom operator import itemgetterfrom pprint import pformatclass Node(namedtuple('Node', 'location left_child right_child')): def __repr__(self): return pformat(tuple(self))def kdtree(point_list, depth=0): try: k = len(point_list[0]) # assumes all points have the same dimension except IndexError as e: # if not point_list: return None # Select axis based on depth so that axis cycles through all valid values axis = depth % k # Sort point list and choose median as pivot element point_list.sort(key=itemgetter(axis)) median = len(point_list) // 2 # choose median # Create node and construct subtrees return Node( location=point_list[median], left_child=kdtree(point_list[:median], depth + 1), right_child=kdtree(point_list[median + 1:], depth + 1) )def main(): point_list = [(2,3), (5,4), (9,6), (4,7), (8,1), (7,2)] tree = kdtree(point_list) print(tree)if __name__ == '__main__': main() &emsp;&emsp;我们得到以下结果: 1234&gt; ((7, 2),&gt; ((5, 4), ((2, 3), None, None), ((4, 7), None, None)),&gt; ((9, 6), ((8, 1), None, None), None))&gt; &emsp;&emsp;得到如下所示的特征空间和kd树: 搜索kd树&emsp;&emsp;给定一个目标点，搜索其最近邻，首先找到包含目标点的叶节点，然后从该叶节点出发，依次退回到其父节点，不断查找是否存在比当前最近点更近的点，直到退回到根节点时终止，获得目标点的最近邻点。 算法 (用kd树的最近邻搜索)输入：已构造的kd树；目标点x ； 输出：x 的最近邻。 (1) 首先找到包含目标节点的叶子结点：从根节点出发，按照相应维度比较，递归向下访问kd树，如果目标点x的当前维度的坐标小于根节点，则移动到左子节点，否则移动到右子节点，直到子节点为叶子节点为止。 (2) 以此叶节点为“当前最近点” (3) 递归的向上回退，在每个节点进行以下操作： &emsp;&emsp;(a) 如果该节点保存的实例点距离比当前最近点更小，则该点作为新的“当前最近点” &emsp;&emsp;(b) 检查“当前最近点”的父节点的另一子节点对应的区域是否存在更近的点，如果存在，则移动到该点，接着，递归地进行最近邻搜索。如果不存在，则继续向上回退 (4) 当回到根节点时，搜索结束，获得最近邻点 kd树最近邻搜索实现，Python代码如下： 1234567891011121314151617181920212223242526272829303132333435def get_distance(a, b): return np.linalg.norm(a-b)def nn_search(test_point, node, best_point, best_dist, best_label): if node is not None: cur_dist = get_distance(test_point, node.node_feature) if cur_dist &lt; best_dist: best_dist = cur_dist best_point = node.node_feature best_label = node.node_label axis = node.axis search_left = False if test_point[axis] &lt; node.node_feature[axis]: search_left = True best_point, best_dist, best_label = nn_search(test_point, node.left_child, best_point, best_dist, best_label) else: best_point, best_dist, best_label = nn_search(test_point, node.right_child, best_point, best_dist, best_label) if np.abs(node.node_feature[axis] - test_point[axis]) &lt; best_dist: if search_left: best_point, best_dist, best_label = nn_search(test_point, node.right_child, best_point, best_dist, best_label) else: best_point, best_dist, best_label = nn_search(test_point, node.left_child, best_point, best_dist, best_label) return best_point, best_dist, best_labeldef nn(test_point, tree): best_point , best_dist, best_label = nn_search(test_point, tree, None, np.inf, None) return best_label 小结&emsp;&emsp;KNN是一种lazy-learning算法，它不需要训练，分类的时间复杂度为N（训练样本的个数），引入kd树来实现KNN时间复杂度为logN。kd树更适合于训练样本树远大于空间维度的情况，如果训练样本数接近于空间维度，那么它的效率会迅速下降，几乎接近于线性扫描。 &emsp;&emsp;KNN算法不仅可以用于分类，还可以用于回归。 参考文章 统计学习方法笔记（三）K近邻算法 K近邻算法原理及实现（Python） K-d tree - Wikipedia]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习入门之《统计学习方法》笔记整理——感知机]]></title>
    <url>%2F2018%2F02%2F11%2Fperceptron%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;从头开始学习李航老师的《统计学习方法》，这本书写的很好，非常适合机器学习入门。 感知机模型&emsp;&emsp;什么是感知机？感知机是二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取+1和-1二值。感知机学习旨在求出可以将数据进行划分的分离超平面，所以感知机能够解决的问题首先要求特征空间是线性可分的，再者是二类分类，即将样本分为{+1, -1}两类。分离超平面方程为： w·x+b=0&emsp;&emsp;这样，我们就可以构建一个由输入空间到输出空间的函数： f(x)=sign(w·x+b)&emsp;&emsp;称为感知机。其中，w和b为感知机模型的参数，w \in R^n 叫作权值（weight），b \in R 叫作偏置,sign 是符号函数，即 sign(x)=\begin{cases} +1 & \text{ , } x\geq 0 \\ -1 & \text{ , } x< 0 \end{cases}&emsp;&emsp;感知机模型的假设空间是定义在特征空间中的线性分类模型，即函数集合\left \{ f \mid f(x)=w\cdot x+b \right \} 。 感知机学习策略&emsp;&emsp;给定一个数据集T = \left \{ (x_1,y_1),(x_2,y_2),...,(x_N,y_N) \right \} ，其中，x_i \in X= \mathbb{R}^n ，y_i \in Y = \left \{ +1,-1 \right \} ，i = 1,2,...,N 。我们假定数据集中所有y_i=+1 的实例i，有w\cdot x +b>0 ，对所有y_i=-1 的实例i，有$w\cdot x +b0&emsp;&emsp;因此，误分类点x_i 到超平面S 的距离可以写作： -\frac{1}{\left \| w \right \|} y_i (w\cdot x_i+b)&emsp;&emsp;假设超平面S 的误分类点的集合为M ,那么所有误分类点到超平面S 的总距离为 -\frac{1}{\left \| w \right \|} \sum \limits_{x_i\in M} y_i (w\cdot x_i+b)&emsp;&emsp;这里\left \| w \right \| 的值是固定的，不必考虑，于是我们就可以得到感知机sign(w\cdot x+b) 的损失函数为： L(w,b)=-\sum \limits_{x_i\in M} y_i (w\cdot x_i+b)&emsp;&emsp;这个损失函数就是感知机学习的经验风险函数。 感知机学习算法&emsp;&emsp;通过上面的损失函数，我们很容易得到目标函数 \min \limits_{w,b}L(w,b)=-\sum \limits_{x_i\in M} y_i (w\cdot x_i+b)&emsp;&emsp;感知机学习算法是误分类驱动的，具体采用随机梯度下降法( stochastic gradient descent )。 原始形式&emsp;&emsp;所谓原始形式，就是我们用梯度下降的方法，对参数w 和b 进行不断的迭代更新。任意选取一个超平面w_0,b_0 然后使用梯度下降法不断地极小化目标函数。随机梯度下降的效率要高于批量梯度下降 ( 参考Andrew Ng的CS229讲义, Part 1 LMS algorithm部分,翻译) 。 &emsp;&emsp;假设误分类点集合M 是固定的，那么损失函数L(w,b) 的梯度为 \nabla_w L(w,b) = -\sum \limits_{x_i \in M} y_ix_i\nabla_b L(w,b) = -\sum \limits_{x_i \in M} y_i&emsp;&emsp;接下来，随机选取一个误分类点(x_i,y_i) ，对w,b 进行更新： w \leftarrow w+\eta y_ix_ib \leftarrow b+\eta y_i&emsp;&emsp;其中\eta(0]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Perceptron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GPSR协议的NS2仿真全过程（环境+实验）]]></title>
    <url>%2F2018%2F02%2F07%2FGPSR_NS2%2F</url>
    <content type="text"><![CDATA[前些日子帮老师做了个NS2仿真的小项目，现在项目做完了，写篇博客把流程记录下来。做项目时，NS2和GPSR相关的东西找了好久，总会遇到问题，希望我这篇博客能给广大同学们带来点帮助吧。 NS2环境搭建软硬件环境概述 Windows10(x64) VMware Workstation Pro 12.5 LinuxMint 18.1 ns-allinone-2.35 环境搭建过程首先，在官网下载ns-allinone-2.35.tar.gz压缩包(http://sourceforge.net/projects/nsnam/files/allinone/ns-allinone-2.35/ns-allinone-2.35.tar.gz/download)，再下载GPSR源码，我选择的是CSDN上的KeLiu版(http://download.csdn.net/download/joanna_yan/8474651)。 NS2安装按Ctrl+Alt+T，打开终端 依次输入 sudo apt-get update sudo apt-get upgrade sudo apt-get install build-essential sudo apt-get install tcl8.5 tcl8.5-dev tk8.5 tk8.5-dev sudo apt-get install libxmu-dev libxmu-headers tar xvfz ns-allinone-2.35.tar.gz cd ns-allinone-2.35 sudo ./install 在安装的时候会报个错，这是由于源码gcc版本比较老修改只要在linkstate/ls.h文件137行修改成 然后重新安装如上图所示，这样就安装成功了。 然后我们需要配置环境变量，否则无法启动。 sudo gedit /home/(用户名)/.bashrc 在最后加上下面语句，用户名换成自己的即可 12345export PATH="$PATH:/home/(用户名)/ns-allinone-2.35/bin:/home/(用户名)/ns-allinone-2.35/tcl8.5.10/unix:/home/(用户名)/ns-allinone-2.35/tk8.5.10/unix"export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/home/(用户名)/ns-allinone-2.35/otcl-1.14:/home/(用户名)/ns-allinone-2.35/lib"export TCL_LIBRARY="$TCL_LIBRARY:/home/(用户名)/ns-allinone-2.35/tcl8.5.10/library" 修改完毕，保存，关闭当前终端，再打开一个新的终端，输入ns，回车，如果显示一个%，就证明ns2安装成功了。 NAM安装终端输入nam，如果能够出现nam的窗口则nam可以正常使用，如果提示nam没有安装或者是不能识别的命令，cd /home/ns-allinone-2.35/nam.1.15，ls看看是否有nam文件，如果有的话cp nam ../bin，把nam命令复制到bin中。如果没有的话，sudo ./configure，再sudo make，现在得到了nam，再把nam命令复制到bin中。 接着在终端输入nam检验是否可以运行。 开始实验添加GPSR协议我们搭建好了NS2仿真平台，现在就可以把我们准备好的协议源码解压，放到ns-2.35目录下，然后对ns2的代码进行修改，使我们的协议可以正常运行。 123456789101112131415161718192021222324252627282930311. 进入$HOME/ns-allinone-2.30/ns-2.30/common,修改packet.henum packet_t&#123; //增加 PT_GPSR &#125;class p_info &#123; //增加 name_[PT_GPSR]= “gpsr” &#125;2. 进入$HOME/ns-allinone-2.30/ns-2.30/trace,修改 cmu-trace.cc void CMUTrace::format(Packet* p, const char *why) &#123; //增加 case PT_GPSR; break;&#125;3. 进入$HOME/ns-allinone-2.30/ns-2.30/queue，修改priqueue.ccvoid PriQueue::recv(Packet *p, Handler *h) &#123; //增加 case PT_GPSR:&#125; 12345674. 进入$HOME/ns-allinone-2.30/ns-2.30/tcl/lib,修改ns-packet.tclforeach prot&#123; #增加GPSR &#125; 123456789101112135. 进入$HOME/ns-allinone-2.30/ns-2.30/ ，修改MakefileOBJ_STL = #最后按照格式加入（ gpsr前为TAB键而不是空格） gpsr/gpsr_neighbor.o\ gpsr/gpsr_sinklist.o\ gpsr/gpsr.o#如果需要加入调试信息，则在CCOPT = -Wall 加上 -g, 如下： CCOPT = -g -Wall 6.重新编译，执行如下命令 cd $HOME/ns-allinone-2.30/ns-2.30/common touch packet.cc cd .. sudo make clean sudo make 修改协议源码在仿真过程中，发现KeLiu版GPSR协议在移动场景下存在一些问题，我们进行如下修改：、gpsr.h文件：90行左右：class GPSRUpdateSinkLocTimer : publicTimerHandler &#123;public: GPSRUpdateSinkLocTimer(GPSRAgent *a) : TimerHandler() &#123;a_=a;&#125; &lt;---这7行protected: virtual void expire(Event *e); GPSRAgent *a_;&#125;; class GPSRQueryTimer : public TimerHandler&#123;public: GPSRQueryTimer(GPSRAgent *a) : TimerHandler() &#123;a_=a;&#125;protected: virtual void expire(Event *e); GPSRAgent *a_;&#125;; 106行左右： friend class GPSRHelloTimer; friend class GPSRQueryTimer; friend class GPSRUpdateSinkLocTimer; MobileNode *node_; //the attached mobile node PortClassifier *port_dmux_; //for the higher layer app de-multiplexing 125行左右：GPSRHelloTimer hello_timer_; GPSRQueryTimer query_timer_; GPSRUpdateSinkLocTimer update_sink_loc_timer_; &lt;---这行 intplanar_type_; //1=GG planarize, 0=RNG planarize double hello_period_; double query_period_; double start_update_time_; &lt;--- double update_sink_loc_period_; &lt;---这2行 void turnon(); //setto be alive void turnoff(); //setto be dead void startSink(); voidstartSink(double);165行左右：void hellotout(); //called bytimer::expire(Event*) void querytout(); void updatesinkloctout(); &lt;---这行public: GPSRAgent();2、gpsr.cc文件：70行左右：voidGPSRQueryTimer::expire(Event *e)&#123; a_-&gt;querytout();&#125;voidGPSRUpdateSinkLocTimer::expire(Event *e)&#123; a_-&gt;updatesinkloctout();&#125;voidGPSRAgent::hellotout()&#123; getLoc(); nblist-&gt;myinfo(my_id,my_x,my_y);//sink_list-&gt;update_sink_loc(my_id,my_x,my_y);//printf("%f\n",node_-&gt;speed()); hellomsg(); hello_timer.resched(hello_period);&#125;void GPSRAgent::updatesinkloctout()&#123; getLoc(); sink_list-&gt;update_sink_loc(my_id,my_x,my_y); //printf("__\n"); update_sink_loc_timer.resched(update_sink_loc_period);&#125;voidGPSRAgent::startSink()&#123; if(sink_list-&gt;new_sink(my_id, my_x, my_y, my_id, 0, query_counter)) querytout();&#125;119行左右：GPSRAgent::GPSRAgent() : Agent(PT_GPSR), hello_timer(this), query_timer(this),update_sink_loc_timer_(this), my_id(-1), my_x(0.0), my_y_(0.0), recv_counter(0), query_counter(0), query_period_(INFINITE_DELAY)&#123; bind("planar_type", &amp;planar_type); bind("hello_period", &amp;hello_period); bind("update_sink_loc_period", &amp;update_sink_loc_period); sink_list_ = new Sinks(); nblist_ = new GPSRNeighbors(); for(int i=0; i&lt;5; i++) randSend_.reset_next_substream();&#125;voidGPSRAgent::turnon()&#123; getLoc(); nblist-&gt;myinfo(my_id, my_x, my_y); hello_timer.resched(randSend.uniform(0.0, 0.5)); update_sink_loc_timer.resched(start_update_time);&#125;voidGPSRAgent::turnoff()&#123; hello_timer_.resched(INFINITE_DELAY); query_timer_.resched(INFINITE_DELAY); update_sink_loc_timer_.resched(INFINITE_DELAY);&#125;3、gpsr_sinklist.h文件中：55行：class Sinks &#123; struct sink_entry *sinklist_; public: Sinks(); bool new_sink(nsaddr_t, double, double, nsaddr_t, int, int); bool update_sink_loc(nsaddr_t, double, double); bool remove_sink(nsaddr_t); void getLocbyID(nsaddr_t, double&amp;, double&amp;, int&amp;); void dump();&#125;;4、gpsr_sinklist.cc中：74行： temp-&gt;next_ = sinklist_; sinklist_ = temp; return true;&#125;boolSinks::update_sink_loc(nsaddr_t id,doublex,double y)&#123; struct sink_entry *temp = sinklist_; while(temp)&#123; if(temp-&gt;id_ == id)&#123; temp-&gt;x_ = x; temp-&gt;y_ = y; return true;&#125; temp = temp-&gt;next_; &#125; return false;&#125;boolSinks::remove_sink(nsaddr_t id)&#123; struct sink_entry *temp; struct sink_entry *p, *q; 修改完成后重新编译NS2。 但是NAM还是有问题，这里是自带的TCL文件的问题，做如下修改就可以了： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811961行左右：set opt(tr) trace.tr ;# trace fileset opt(nam) gpsr.nam &lt;---这里set opt(rp) gpsr ;# routing protocol script(dsr or dsdv)set opt(lm) "off" ;# log movement117行左右：（修改比较多，行数不准）# ======================================================================# Agent/GPSR settingAgent/GPSR set planar_type_ 1 ;#1=GG planarize, 0=RNG planarizeAgent/GPSR set hello_period_ 1.5 ;#Hello message periodAgent/GPSR set update_sink_loc_period_ 0.5Agent/GPSR set start_update_time_ 0.001#======================================================================159行左右：set tracefd [open $opt(tr) w]ns_ trace-all tracefd set namfile [open $opt(nam) w]ns_ namtrace-all-wireless namfile opt(x)opt(y)topo load_flatgrid opt(x) $opt(y)prop topography topo 197行左右：source ./gpsr.tclfor &#123;set i 0&#125; &#123;i &lt; opt(nn) &#125; &#123;incr i&#125;&#123; gpsr-create-mobile-node $i ns_ initial_node_pos node_($i) 20 node_(i) namattach $namfile&#125;## Source the Connection and Movementscripts# 下面是CBR和场景文件的问题：给个简单的3个节点的例子，在trace文件中可以看到数据包的转发和接收cbr文件：# GPSR routing agent settingsfor &#123;set i 0&#125; &#123;i &lt; opt(nn)&#125; &#123;incr i&#125; &#123; ns_ at 0.00002 "ragent_($i) turnon" ns_ at 2.0 "ragent_($i) neighborlist"# ns_ at 30.0 "ragent_($i) turnoff"&#125;ns_ at 11.2 "ragent_(2) startSink10.0" #&lt;---这里只要让目标节点startSink就可以，例子是0向2发set null_(1) [new Agent/Null]ns_ attach-agent node(2) $null(1) set udp_(1) [new Agent/UDP]ns_ attach-agent node(0) $udp(1) set cbr_(1) [new Application/Traffic/CBR]$cbr(1) set packetSize 32$cbr(1) set interval 2.0$cbr(1) set random 1# $cbr(1) set maxpkts 100cbr_(1) attach-agent udp_(1)ns_ connect udp(1) $null(1)ns_ at 66.0 "cbr_(1) start"ns_ at 150.0 "cbr_(1) stop" 修改底层协议为802.11pGPSR是路由协议，也就是工作在网络层的，底层的协议默认应该是IEEE802.11。应该用IEEE802.11p，这个才是针在ns-allinone-2.35/ns-2.35/tcl/ex/802.11目录下找到了IEEE802-11p.tcl文件，里面的设置都是符合IEEE802.11p协议的参数对车载自组网的协议。 所以在wireless-gpsr.tcl中把其他的MAC层和物理层的设置都注释掉，换上IEEE802.11p的设置： 12345678910111213141516171819202122232425262728293031323334353694行左右：#Phy/WirelessPhy set CPThresh_ 10.0#Phy/WirelessPhy set CSThresh_ 1.559e-11#Phy/WirelessPhy set RXThresh_ 3.652e-10#Phy/WirelessPhy set Rb_ 2*1e6#Phy/WirelessPhy set freq_ 914e+6 #Phy/WirelessPhy set L_ 1.0 # The transimssion radio range #Phy/WirelessPhy set Pt_ 6.9872e-4 ;# ?m#Phy/WirelessPhy set Pt_ 8.5872e-4 ;# 40m#Phy/WirelessPhy set Pt_ 1.33826e-3 ;# 50m#Phy/WirelessPhy set Pt_ 7.214e-3 ;# 100m#Phy/WirelessPhy set Pt_ 0.2818 ;# 250m #802.11pputs "Loading IEEE802.11pconfiguration..."source ../tcl/ex/802.11/IEEE802-11p.tclputs "Load complete..." 修改无线传输范围ns-2.35/indep-utils/propagation/下有个threshold工具，可以通过距离、功率等等条件算出这些参数。 我们要先对threshold.cc文件进行修改 #include “iostream.h” 修改为#include “iostream”，同时加上using namespace std; 再添加头文件：#include “cstring” 在当前目录终端输入命令，进行编译： cd ns/indep-utils/propagation/ g++ -lm threshold.cc -o threshold 编译成功生成threshold文件这时我们利用threshold工具就可以得到我们需要的RXThresh的值了。 ./threshold -m TwoRayGround -r 1 550 这就是我们需要的RXThresh数值，将我们新得到的数值替换之前的数值，即可改变我们无线传输的范围了。 参数设置好后，我们就可以开始仿真实验了。（中途我还修改了协议其他地方的代码，涉及到项目内容，在此不过多赘述，所以后面的数据跟GPSR协议本身跑出来的数据不大一样） setdest生成随机场景setdest可以随机产生无线网络仿真所需要的移动场景。 setdest程序放在 ns-2.35/indep-utils/cmu-scen-gen/setdest/目录下 usage：setdest [-nnodes][-p pause][-M maxrate][-t time][-x x][-y y] 我们需要50个节点，最大速度10m/s，持续时间20s，场景长250，宽200 ./setdest -n 50-p 0.0 -M 10.0 -t 20 -x 250 -y 200 &gt;scen_50_0_10_20_25_20 cbrgen生成数据流cbrgen工具在ns-2.35/indep-utils/cmu-scen-gen/目录下 usage：cbrgen.tcl [-type cbr][-nn nodes][-seed seed][-mcconnections][-rate rate] 我们此时有50个节点，需要一组数据流所以，输入： ns cbrgen.tcl -type cbr -nn 50 -seed 1 -mc 1-rate 1.0 &gt; cbr_n50_m1_r1 重新编写tcl脚本现在，我们把仿真需要的场景，数据流都准备好了，我们把生成的场景文件移动到gpsr协议的文件夹中，再次修改tcl脚本 添加： 123source scen_50_0_10_20_25_20source cbr_n50_m1_r1 修改完的脚本是这个样子的(这里我另存为gpsr-wireless.tcl文件)：set opt(chan) Channel/WirelessChannelset opt(prop) Propagation/TwoRayGroundset opt(netif) Phy/WirelessPhyset opt(mac) Mac/802_11set opt(ifq) Queue/DropTail/PriQueueset opt(ll) LL set opt(ant) Antenna/OmniAntennaset opt(x) 250set opt(y) 200set opt(ifqlen) 50set opt(nn) 50set opt(seed) 0.0set opt(stop) 20.0set opt(tr) trace.trset opt(nam) out.namset opt(rp) gpsrset opt(lm) "off" LL set mindelay_ 50usLL set delay_ 25usLL set bandwidth_ 0 ;# not usedAgent/Null set sport_ 0Agent/Null set dport_ 0Agent/CBR set sport_ 0Agent/CBR set dport_ 0Agent/UDP set sport_ 0Agent/UDP set dport_ 0Agent/UDP set packetSize_ 1460Queue/DropTail/PriQueue setPrefer_Routing_Protocols 1Antenna/OmniAntenna set X_ 200Antenna/OmniAntenna set Y_ 200Antenna/OmniAntenna set Z_ 1.5Antenna/OmniAntenna set Gt_ 1.0Antenna/OmniAntenna set Gr_ 1.0#802.11pputs "Loading IEEE802.11pconfiguration..."source ../tcl/ex/802.11/IEEE802-11p.tclputs "Load complete..."# Agent/GPSR settingAgent/GPSR set planar_type_ 1 ;#1=GG planarize, 0=RNG planarizeAgent/GPSR set hello_period_ 5.0 ;#Hello message periodAgent/GPSR set update_sink_loc_period_ 0.5Agent/GPSR set start_update_time_ 0.001source ../tcl/lib/ns-bsnode.tclsource ../tcl/mobility/com.tclset ns_ [new Simulator]set chan [new $opt(chan)]set prop [new $opt(prop)]set topo [new Topography] set tracefd [open $opt(tr) w]ns_ trace-all tracefd set namfile [open $opt(nam) w]ns_ namtrace-all-wireless namfile opt(x)opt(y)topo load_flatgrid opt(x) $opt(y)prop topography toposet god_ [create-god $opt(nn)]$ns_ node-config -adhocRouting gpsr \ -llType $opt(ll) \ -macType $opt(mac) \ -ifqType $opt(ifq) \ -ifqLen $opt(ifqlen) \ -antType $opt(ant) \ -propType $opt(prop) \ -phyType $opt(netif) \ -channelType $opt(chan) \ -topoInstance $topo \ -agentTrace ON \ -routerTrace ON \ -macTrace OFF \ -movementTrace OFF source ./gpsr.tclfor &#123;set i 0&#125; &#123;i &lt; opt(nn)&#125; &#123;incr i&#125; &#123; gpsr-create-mobile-node$i; node_(i)namattach $namfile;&#125;source scen_50_0_10_20_25_20source cbr_n50_m1_r1for &#123;set i 0&#125; &#123;i &lt; opt(nn) &#125; &#123;incr i&#125;&#123; node_(i) namattach $namfile&#125;for &#123;set i 0&#125; &#123;i &lt; opt(nn)&#125; &#123;incr i&#125; &#123; ns_ initial_node_pos node_($i) 20&#125;for &#123;set i 0&#125; &#123;i &lt; opt(nn)&#125; &#123;incr i&#125; &#123; ns_at opt(stop).0 "node_(i) reset"&#125;ns_ at opt(stop) "stop"ns_ at opt(stop).01 "puts\"NSEXITING...\" ; $ns_ halt"proc stop &#123;&#125; &#123; globalns_ tracefd namfile $ns_flush-trace close$tracefd close$namfile exit0&#125;puts tracefd "M 0.0 nn opt(nn) xopt(x) y opt(y) rp $opt(rp)"puts tracefd "M 0.0 prop opt(prop)ant $opt(ant)"puts "Starting Simulation..."$ns_ run 我们在此目录中打开终端，输入 ns gpsr-wireless.tcl 如图所示运行nam查看仿真状况 如图我们可以看到节点移动情况 trace文件分析下面是整个仿真过程最重要的部分，trace文件分析 投递率我使用的是grep工具 grep “r.*AGT” trace.tr &gt; g_r grep “s.*AGT” trace.tr &gt; g_s wc g_? 即可得到数据包的发送和接收情况：然后，我们通过awk脚本来获取协议中的时延情况： 脚本代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#BEGIN表明这是程序开头执行的一段语句，且只执行一次。BEGIN &#123;#程序初始化，设定一变量以记录目前处理的封包的最大ID号码。在awk环境下变量的使用不需要声明，直接赋值。highest_uid = 0;&#125;#下面大括号里面的内容会针对要进行处理的记录（也就是我们的trace文件）的每一行都重复执行一次&#123;event = 1; #1表示一行的第一栏，是事件的动作。每一栏默认是以空格分隔的。下同。time = $2; #事件发生的时间node_nb = $3; #发生事件的节点号（但是两边夹着“”，下面一句代码将“”处理掉）node_nb=substr(node_nb,2,1); #第三栏的内容是形如0的节点号码，我只要得出中间的节点号码0，所以要对字符串0进行处理。trace_type = $4; #trace文件跟踪事件的层次（指在路由层或mac层等等） flag = $5; #uid = $6; #包的uid号码（普通包头的uid）pkt_type = $7; #包的类型（是信令或是数据）pkt_size = $8; #包的大小（byte）#下面的代码记录目前最高的CBR流的packet ID，本来的延迟分析是针对所有的包的（包括信令），这里作了简化，只针对CBR封包，以后大家做延时分析可以做相应的改动即可。if ( event=="s" &amp;&amp;node_nb==0 &amp;&amp; pkt_type=="cbr" &amp;&amp; uid &gt; highest_uid)&#123;#if判断句的前三个判断条件就不说了，第四个是说每个包的记录次数不超过1highest_uid = uid;&#125;#记录封包的传送时间if ( event=="s" &amp;&amp;node_nb==0 &amp;&amp; pkt_type=="cbr" &amp;&amp; uid==highest_uid )start_time[uid] = time; # start_time[]表明这是一个数组#记录封包的接收时间if ( event=="r" &amp;&amp;node_nb ==2 &amp;&amp; pkt_type=="cbr" &amp;&amp; uid==highest_uid )end_time[uid] = time;&#125;#END表明这是程序结束前执行的语句，也只执行一次END &#123;#当每行资料都读取完毕后，开始计算有效封包的端到端延迟时间。for ( packet_id = 0; packet_id &lt;=highest_uid; packet_id++ )&#123;start = start_time[packet_id];end = end_time[packet_id];packet_duration = end - start;#只把接收时间大于传送时间的记录打印出来if ( start &lt; end ) printf("%d%f\n", packet_id, packet_duration);&#125;&#125; 我们在终端输入命令： gawk -f delay.awk trace.tr &gt; delay.csv 因为我本人熟悉Python语言，所以绘图我就用Python和matplotlib库来做了： 1234567891011121314151617181920212223242526272829import pandas as pdimport numpy as npimport matplotlib.pyplot as pltcol = ['x','y']data = pd.read_csv("delay.csv",names=col)x = data['x']y = data['y']plt.xlabel('Time(s)')plt.ylabel('Transmission Speed(KB/s)')plt.title('GPSR Analysis')plt.xlim(50,150)plt.ylim(0.0015,0.0055)plt.plot(x0,y0,color='blue',linewidth=1.5,linestyle="-",label='GPSR')plt.plot(x,y,color='red',linewidth=1.5,linestyle="-",label='NNGPSR')plt.show() 得到时延的图 至此，本次ns2实验就结束了。 这篇博客写的比较匆忙，如有错误，可评论区加以说明。 参考文章 NS2笔记八gpsr移植 关于802.11p和场景文件 NS2中cbrgen和setdest的使用 GPSR源码修改 ubuntu14.04LTS下搭建NS2实验环境]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>GPSR</tag>
        <tag>NS2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GPSR协议概述]]></title>
    <url>%2F2018%2F02%2F06%2FGPSR_introduce%2F</url>
    <content type="text"><![CDATA[1. GPSR协议简介&emsp;&emsp;GPSR通过应用邻居节点和终点的地理位置，允许每个节点对全局路由分配做出决策。当一个节点以贪婪算法转发一个包时，它有比自己更接近终点的邻居节点，这个节点就选择距离终点最近的邻居节点来转发该包。当没有这种邻居节点时，数据包进入周围模式，将包向前传送给网络平面字图的临近节点，直到传到距离终点较近的节点，将包转发的方式为贪婪算法模式。 2. GPSR协议流程 3. 协议源文件 gpsr_packet.h : 定义不同类型的包 gpsr_neighbor.h : 定义该gpsr实现所使用的每个节点的邻居列表 gpsr_neighbor.cc : 邻居列表类的实现 gpsr.h : 该实现的GPSR路由代理函数的定义 gpsr.cc : GPSR路由代理的实现 gpsr_sinklist.h: 用于多个接收器的场景的定义 gpsr_sinklist.cc: 实现gpsr_sinklist.h 4. 宏定义123456789101112131415161718192021222324252627282930313233343536373839#define DEFAULT_GPSR_TIMEOUT 200.0 //生存时间#define INIFINITE_DISTANCE 1000000000.0 //无穷大 #define SINK_TRACE_FILE "sink_trace.tr" //sink_trace文件#define NB_TRACE_FILE "gpsrnb_trace.tr" //nb_trace文件#define GPSR_CURRENT Scheduler::instance().clock() //计时器#define INFINITE_DELAY 5000000000000.0 //无穷大#define GPSRTYPE_HELLO 0x01 //hello msg#define GPSRTYPE_QUERY 0x02 //query msg from the sink#define GPSRTYPE_DATA 0x04 //the CBR data msg#define GPSR_MODE_GF 0x01 //greedy forwarding mode#define GPSR_MODE_PERI 0x02 //perimeter routing mode#define HDR_GPSR(p) ((structhdr_gpsr*)hdr_gpsr::access(p)) //gpsr报头#define HDR_GPSR_HELLO(p) ((struct hdr_gpsr_hello*)hdr_gpsr::access(p)) //hello报头#define HDR_GPSR_QUERY(p) ((struct hdr_gpsr_query*)hdr_gpsr::access(p)) //query报头#define HDR_GPSR_DATA(p) ((struct hdr_gpsr_data*)hdr_gpsr::access(p)) //data报头 #define PI 3.141593 //PI#define MAX(a, b)(a&gt;=b?a:b) //最大#define MIN(a, b)(a&gt;=b?b:a) //最小 5. 结构体1234567891011121314151617struct hdr_gpsr //gpsr报头struct hdr_gpsr_hello //hello报头struct hdr_gpsr_query //query报头struct hdr_gpsr_data //data报头union hdr_all_gpsr //总报头 struct gpsr_neighbor //邻居 struct sink_entry //数据接收器 6. 类123456789class Sinks //sink表维护一个数据接收器列表，它用于多个数据接收器，这不是GPSR设计的一部分class GPSRNeighbors //网络中每个节点的邻居列表class GPSRAgent //GPSR路由代理，定义路由代理、路由的方法(行为)class GPSRHelloTimer: public TimerHandler //定时发送‘hello’信息class GPSRQueryTimer: public TimerHandler //数据接收器使用的查询计时器来触发数据查询。它不是GPSR路由设计的一部分。 7. 相关函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114void GPSRHelloTimer::expire(Event*e) //hello计时器计时方法void GPSRQueryTimer::expire(Event*e) //查询计时器计时方法void GPSRUpdateSinkLocTimer::expire(Event *e) //数据接收器更新计时器计时方法void GPSRAgent::hellotout() //侦查函数void GPSRAgent::updatesinkloctout() //数据接收器侦查void GPSRAgent::startSink() //开始接受数据void GPSRAgent::startSink(doublegp) //开始接受数据void GPSRAgent::querytout() //查询侦查void GPSRAgent::getLoc() //获取位置void GPSRAgent::GetLocation(double *x, double *y) //获取位置GPSRAgent::GPSRAgent(): Agent(PT_GPSR), hello_timer(this), query_timer(this), update_sink_loc_timer_(this), my_id(-1), my_x(0.0), my_y_(0.0), recv_counter(0), query_counter(0), query_period_(INFINITE_DELAY) //协议初始化void GPSRAgent::turnon() //开启协议void GPSRAgent::turnoff() //关闭协议void GPSRAgent::hellomsg() //发送hello包void GPSRAgent::query(nsaddr_t id) //开始查询void GPSRAgent::recvHello(Packet *p) //接受hello包void GPSRAgent::recvQuery(Packet*p) //接受查询信息void GPSRAgent::sinkRecv(Packet *p) //数据接收器接受包信息void GPSRAgent::forwardData(Packet*p) //数据信息判断并转发void GPSRAgent::recv(Packet *p, Handler *h) //接受数据包void GPSRAgent::trace(char *fmt, ...) //trace函数int GPSRAgent::command(int argc, const charconst argv) //接受参数命令 GPSRNeighbors::GPSRNeighbors() //邻居表初始化GPSRNeighbors::~GPSRNeighbors() //析构函数double GPSRNeighbors::getdis(double ax, double ay, double bx, double by) //获取位置int GPSRNeighbors::nbsize() //邻居节点数量void GPSRNeighbors::myinfo(nsaddr_t mid, double mx, double my) //获取信息struct gpsr_neighbor* GPSRNeighbors::getnb(nsaddr_t nid) //获取邻居表void GPSRNeighbors::newNB(nsaddr_t nid, double nx, double ny) //添加新的邻居节点void GPSRNeighbors::delnb(nsaddr_t nid) //删除邻居节点void GPSRNeighbors::delnb(struct gpsr_neighbor *nb) //删除邻居节点void GPSRNeighbors::delalltimeout() //删除所有超时节点信息nsaddr_t GPSRNeighbors::gf_nexthop(double dx, double dy) //贪婪模式下一跳struct gpsr_neighbor* GPSRNeighbors::gg_planarize() struct gpsr_neighbor* GPSRNeighbors::rng_planarize() //进行周长路由计算double GPSRNeighbors::angle(double x1, double y1, double x2, double y2) //计算角度int GPSRNeighbors::intersect(nsaddr_t theother, double sx, double sy, double dx, double dy) //检查两条线是否局部相交int GPSRNeighbors::num_of_neighbors(struct gpsr_neighbor *nblist) //给定邻居表的节点数量void GPSRNeighbors::free_neighbors(struct gpsr_neighbor *nblist) //释放邻居节点nsaddr_t GPSRNeighbors::peri_nexthop(inttype_, nsaddr_t last, double sx, double sy,double dx, double dy) //周边模式下一跳void GPSRNeighbors::dump() //转储邻居表 Sinks::Sinks() //数据接收器初始化bool Sinks::new_sink(nsaddr_tid, double x, double y, nsaddr_t lasthop, int hops, int seqno) //创建新的数据接收器bool Sinks::remove_sink(nsaddr_t id) //删除数据接收器void Sinks::getLocbyID(nsaddr_t id, double &amp;x, double &amp;y, int &amp;hops) //通过ID获取节点位置void Sinks::dump() //转储]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>GPSR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李开复《人工智能》读后感]]></title>
    <url>%2F2018%2F02%2F06%2FArtificial_Intelligence_Recommend%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;放假之前，从学校图书馆找资料的时候无意间看到了这本书，觉得可以看看，无聊的时候当个消遣，就借了回来。 &emsp;&emsp;《人工智能》这本书其实就是告诉我们：个人应该做些什么，才能避免被AI取代？企业应该如何升级，才能在新的商业变局到来前抓住先机？本书不太适合作为人工智能入门书籍，因为里面专业知识很少，可以作为科普书籍，能够了解人工智能的一些术语。 &emsp;&emsp;人工智能已经来了，而且它就在我们身边，几乎无处不在。 &emsp;&emsp;我们真的知道什么是人工智能吗？我们真的准备好与人工智能共同发展了吗？我们该如何在心理上将人和机器摆在正确的位置？我们该如何规划人工智能时代的未来生活？ &emsp;&emsp;其实，人工智能已经到处都是，什么都做：可以陪人聊天，可以写标准新闻，能画画，能翻译，能开车，能认出人的样子，能在互联网上搜答案，能在仓库搬货，能送快递到家。 人工智能是什么？有以下五种定义： &emsp;1) 让人觉得不可思议的计算机程序（某方面特别聪明的计算机程序），比如AlphaGo、AlphaGo Zero等等。 &emsp;2) 与人类思考方式相似的计算机程序。但这事儿太难，人的意识（复杂的技术和哲学问题），谁知道自己是怎么思考的，还要交给机器，my god… &emsp;3) 与人类行为方式相似的计算机程序，也就是说机器并不知道怎么想的，行为方式倒是很像人，比如可以和人聊天的ELIZA。 &emsp;4) 学会自己学习的计算机程序，刚开始笨笨的，慢慢地就越来越聪明，最后逆天的那种。AlphaGo也是因为学了很多很多棋谱才变得这么厉害的，还有ImageNet比赛中的算法也是学了海量的图片才达到比人眼更高的图像识别率的。 &emsp;5) 根据对环境的感知，做出合理的行动，并获得最大收益的计算机程序。 这个定义可以算是综合了以上几个定义得出的结论。 &emsp;&emsp;这一次人工智能复兴的最大特点是，AI在语音识别、机器视觉、数据挖掘等多个领域走进了业界的真实应用场景，与商业模式紧密结合，开始在产业界发挥出真正的价值。 &emsp;&emsp;历史上有过3次AI热潮，第一次因为图灵测试，第二次因为语言识别，但是都很快又到了低谷，这一次，深度学习携手大数据引领了第三次热潮，目前正处于技术曲线的攀升期，前景广阔。 &emsp;&emsp;AlphaGo带来的警示是：如果计算机可以在两年内实现大多数人预测要花20年或更长时间才能完成的进步，那么，还有哪些突破会以远超常人预期的速度来临？这些突破会不会超出我们对人工智能的想象，颠覆人类预想中的未来？我们已为这些即将到来的技术突破做好准备了吗？ &emsp;&emsp;“五秒钟准则”：一项人从事的工作，如果可以在5秒钟内完成思考并做出决策，那么这项工作很可能会被人工智能取代。但是人工智能也会带来新的工作。 人工智能分三个层级： &emsp;1) 弱人工智能：在某方面很聪明，但只在这方面聪明，别的事啥也不会。比如AlphaGo，下围棋世界第一，别的方面就是个弱智，连棋子都得别人帮它拿。 &emsp;2) 强人工智能：人能做什么，它就能做什么。跟美剧《西部世界》里的机器人差不多，但它有没有意识，不好说。 &emsp;3) 超人工智能：比最聪明的人类还要聪明100000000倍。。都不止，它的NB，超乎你想象。我们不知道它是谁，不知道它在哪里，不知道它什么时候出现，也不知道它会干什么。 人工智能目前还很“稚嫩”的几个地方： 跨领域推理，人类强大的跨领域联想、类比能力，可以举一反三，触类旁通。不过迁移学习也正在发展，可以将计算机在一个领域学到的经验转换到另一个领域 抽象能力，如皮克斯工作室《头脑特工队》的抽象空间 知其然，也知其所以然，了解事物运行的本质规律 常识 自我意识 审美 情感 &emsp;&emsp;人工智能不仅是一次技术层次的革命，未来它必将与重大的社会经济变革、教育变革、思想变革、文化变革等同步。人工智能可能成为下一次工业革命的核心驱动力，人工智能更有可能成为人类社会全新的一次大发现、大变革、大融合、大发展的开端。 人工智能主要的商业应用场景： 自动驾驶：这个不用多说，Google，Tesla，百度。。都在研究 智慧金融：量化交易与智能投顾、风控、安防与客户身份认证、智能客服、精准营销 智慧生活：机器翻译、智能家居、智能超市 智慧医疗：辅助诊断疾病、对疑难病症的医疗科学研究 艺术创作：机器音乐、机器绘画、机器文学创作 &emsp;&emsp;大多数情况下，人工智能并不是一种全新的业务流程或全新的商业模式，而是对现有业务流程、商业模式的根本性改造。AI重在提升效率，而非发明新流程、新业务。未来10年，不仅仅是高科技领域，任何一个企业，如果不尽早为自己的业务引入“AI+”的先进思维方式，就很容易处于落后的追随者地位。 &emsp;&emsp;大时代，大格局。AI将成为国家科技战略的核心方向，业界的巨大人力物力，软硬件技术的成熟都为人工智能创业奠定了基础。 AI创业的五大基石： 清晰的领域界限 闭环的、自动标注的数据 千万级的数据量 超大规模的计算能力 顶尖的AI科学家 AI产业发展的六大挑战： 前沿科研与工业界尚未紧密衔接 人才缺口巨大，人才结构失衡 数据孤岛化和碎片化问题明显 可复用和标准化的技术框架、平台、工具、服务尚未成熟 一些领域存在超前发展、盲目投资等问题 创业难度相对较高，早期创业团队需要更多支持 创新工场在AI领域的投资分布： 人工智能研究院主要工作任务包括： 对接科研成果与商业实践，帮助海内外顶级人工智能人才创业 培育和孵化高水准的人工智能技术团队 积累和建设人工智能数据集，促进大数据的有序聚合和合理利用 开展广泛合作，促进人工智能产业的可持续发展 &emsp;&emsp;人工智能时代，程式化的、重复性的、仅靠记忆与练习就可以掌握的技能将是最没有价值的技能，几乎一定可以由机器来完成；反之，那些最能体现人的综合素质的技能，例如，人对于复杂系统的综合分析、决策能力，对于艺术和文化的审美能力和创造性思维，由生活经验及文化熏陶产生的直觉、常识，基于人自身的情感（爱、恨、热情、冷漠等）与他人互动的能力……这些是人工智能时代最有价值，最值得培养、学习的技能。 &emsp;&emsp;说道学习，楼教主可是必须提及的，楼教主（楼天城）的编程功力深厚，以及“一个人挑落一个队”的传奇故事，让开复老师在书中都赞扬了一番。（附上楼教主图片一张） AI时代该怎么学？ 主动挑战极限 从实践中学习 关注启发式教育，培养创造力和独立解决问题的能力 互动式的在线学习将愈来愈重要 主动向机器学习 既学习人-人协作，也学习人-机协作 学习要追随兴趣 AI时代该学什么？ &emsp;&emsp;人工智能时代，程式化的、重复性的、仅靠记忆与练习就可以掌握的技能将是最没有价值的技能，几乎一定可以由机器来完成；反之，那些最能体现人的综合素质的技能，例如，人对于复杂系统的综合分析、决策能力，对于艺术和文化的审美能力和创造性思维，由生活经验及文化熏陶产生的直觉、常识，基于人自身的情感（爱、恨、热情、冷漠等）与他人互动的能力……这些是人工智能时代最有价值，最值得培养、学习的技能。而且，这些技能中，大多数都是因人而异的，需要“定制化”教育或培养，不可能从传统的“批量”教育中获取。 &emsp;&emsp;人工智能技术正在彻彻底底改变人类对机器行为的认知，重建人类与机器之间的相互协作关系。史无前例的自动驾驶正在重构我们脑中的出行地图和人类生活图景，今天的人工智能技术也正在机器翻译、机器写作、机器绘画等人文和艺术领域进行大胆的尝试…… &emsp;&emsp;人工智能因为对生产效率的大幅改进、对人类劳动的部分替代、对生活方式的根本变革，而必然触及社会、经济、政治、文学、艺术等人类生活的方方面面。 &emsp;&emsp;我们无需担忧和恐惧这个时代的到来，我们所要做的，应当是尽早认清AI与人类的关系，了解变革的规律，尽早制定更能适应新时代需求的科研战略、经济发展布局、社会保障体系、教育制度等，以便更好地迎接这个时代的到来。 &emsp;&emsp;这是复兴的时代，这是发展的时代，这是人工智能的时代。 &emsp;&emsp;其实，我们不一定要做时代的弄潮儿，但是，随着时代、科技的发展，我们必须要赶上时代的步伐，不能被时代所抛弃。AI只是一种新的工具，不会取代人类，只会丰富人类生活。未来是一个人类和机器共存，协作完成各类工作的全新时代]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>人工智能</tag>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10+Anaconda+TensorFlow(CPU and GPU)环境快速搭建]]></title>
    <url>%2F2018%2F02%2F02%2FAnaconda_TensorFlow%2F</url>
    <content type="text"><![CDATA[今天分享一下本人在笔记本上配置TensorFlow环境的过程。 说明电脑配置： Acer笔记本 CPU Inter Core i5-6200U GPU NVIDIA GeForce 940M(忽略掉我的渣渣GPU) Windows10 所需的环境： Anaconda3(64bit) CUDA-8.0 CuDNN-5.1 Python-3.6 TensorFlow 或者 TensorFlow-gpu 首先安装Anaconda3​ 我们从官网下载(https://www.anaconda.com/download/#windows)，也可以使用我上传百度网盘的版本，链接：https://pan.baidu.com/s/1dGEC57z 密码：2om4使用Linux的小伙伴可以同样下载Linux版本的Anaconda，之后我会再做补充的。 ​ 下载好后，我们进入安装界面： ​ 这里，我们把两个都选上，第一个是加入环境变量，因为我之前安装过一次所以这里提示不要重复添加，第二个是默认的Python3.6，让后Install。 ​ 在完成Anaconda的安装后，我们打开Anaconda的命令行(最好用管理员身份运行，否则可能会有权限的问题)： ​ 我们可以看到一个和Windows命令行很像的一个窗口： 安装CUDA和CuDNN​ 这里为安装GPU版本的TensorFlow做准备，CPU版本可跳过此部分。 ​ CUDA是NVIDIA推出的运算平台，CuDNN是专门针对Deep Learning框架设计的一套GPU计算加速方案。虽然在之后用conda命令安装tensorflow-gpu时会自动安装cudatoolkit和cudnn，但是我总觉得自己安装一遍比较放心。 ​ 我所用的CUDA和CuDNN分享到百度网盘了，链接：https://pan.baidu.com/s/1dGEC57z 密码：2om4 ​ 先安装CUDA ​ 打开首先先解压： ​ 这里我们选择自定义，因为我们只安装CUDA ​ 只选择CUDA其他组件不安装，否则会安装失败 ​ 这里可能会提示你安装Visual Studio，忽略掉就好了 ​ 然后就开始安装了，等待安装结束就好了。 ​ 解压cudnn的压缩包里面有三个文件夹 ​ 把这三个文件夹复制到你cuda的安装目录下，我的地址是C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0 ​ 这样CUDA和CuDNN就安装好了。 创建TensorFlow环境​ 我们在刚刚打开的命令行里输入命令(conda的命令大家可以在这篇博客中找到http://blog.csdn.net/fyuanfena/article/details/52080270)： conda create -n tensorflow_gpu python=3.6 ​ 中间会让我们确认一下，输入个y回车就好了。安装好后会给我们提示用activate，和deactivate进行环境的切换。 ​ 我们先切换到创建好的环境中： activate tensorflow_gpu ​ 现在，基本环境已经配置好了，我们要安装一些重要的Python科学运算库，Anaconda已经为我们准备好的一系列常用的Python苦，例如numpy，pandas，matplotlib等等，所以我们只需要安装一次anaconda库就可以把这些库全部安装好。 conda install anaconda ​ 可以看到，真的有好多常用库。 安装TensorFlow​ 之后就是我们最重要的一步，安装TensorFlow： CPU版本 conda install tensorflow GPU版本 conda install tensorflow-gpu ​ 这样我们的TensorFlow环境已经配置好了。 测试​ 最后，我们进入jupyter notebook(Anaconda自带的Python IDE，自我感觉挺好用的)输入一段官方文档录入的代码测试一下： ​ 直接输入jupyter notebook，回车 1234import tensorflow as tfhello = tf.constant('Hello,TensorFlow!')sess = tf.Session()print(sess.run(hello)) ​ 恭喜，你的TensorFlow已经可以用了，接下来快搭建你自己的神经网络吧~！ 参考文章 Anaconda常用命令大全 NVIDIA CuDNN 安装说明]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tensorflow简单神经网络解决Kaggle比赛Titanic问题]]></title>
    <url>%2F2018%2F02%2F01%2FTensorflow_Kaggle_Titanic%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;又到了假期，忙碌了一个学期，终于可以休息一下了。 &emsp;&emsp;一直想再Kaggle上参加一次比赛，在学校要上课，还跟老师做个项目，现在有时间了，就马上用Kaggle的入门比赛试试手。 &emsp;&emsp;一场比赛，总的来说收获不小，平时学习的时候总是眼高手低，结果中间出现令人吐血的失误 &gt;_&lt; Kaggle比赛介绍 &emsp;&emsp;简而言之，Kaggle 是玩数据、ML 的开发者们展示功力、扬名立万的江湖，网址：https://www.kaggle.com/ &emsp;&emsp;Kaggle虽然高手云集，但是对于萌新们来说也是非常友好的，这次的Titanic问题就是适合萌新Getting Started的入门题。 Kaggle 是当今最大的数据科学家、机器学习开发者社区，其行业地位独一无二。 (此话引用自谷歌收购 Kaggle 为什么会震动三界（AI、机器学习、数据科学界）？) Titanic问题概述Titanic: Machine Learning from Disaster 比赛说明&emsp;&emsp;RMS泰坦尼克号的沉没是历史上最臭名昭着的沉船之一。 1912年4月15日，在首航期间，泰坦尼克号撞上一座冰山后沉没，2224名乘客和机组人员中有1502人遇难。这一耸人听闻的悲剧震撼了国际社会，导致了更好的船舶安全条例。 &emsp;&emsp;沉船导致生命损失的原因之一是乘客和船员没有足够的救生艇。虽然幸存下来的运气有一些因素，但一些人比其他人更有可能生存，比如妇女，儿童和上层阶级。 &emsp;&emsp;在这个挑战中，我们要求你完成对什么样的人可能生存的分析。特别是，我们要求你运用机器学习的工具来预测哪些乘客幸存下来的悲剧。 目标&emsp;&emsp;这是你的工作，以预测是否有乘客幸存下来的泰坦尼克号或不。&emsp;&emsp;对于测试集中的每个PassengerId，您必须预测Survived变量的0或1值。 度量值&emsp;&emsp;您的分数是您正确预测的乘客的百分比。这被称为“准确性”。 提交文件格式&emsp;&emsp;你应该提交一个csv文件，正好有418个条目和一个标题行。如果您有额外的列（超出PassengerId和Survived）或行，您的提交将会显示错误。 该文件应该有2列： &emsp;PassengerId（按任意顺序排序）&emsp;生存（包含你的二元预测：1存活，0死亡） 数据总览&emsp;&emsp;首先，我们先把一些库和训练数据导入 1234567import osimport numpy as npimport pandas as pdimport tensorflow as tftrain_data = pd.read_csv('train.csv')print(train_data.info()) &emsp;&emsp;简单的看一下训练数据的信息，其中Embarked有两个缺失值，Age缺失值较多，Cabin有效值太少了跟本没什么用。 12345678910111213141516171819&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; RangeIndex: 891 entries, 0 to 890&gt; Data columns (total 12 columns):&gt; PassengerId 891 non-null int64&gt; Survived 891 non-null int64&gt; Pclass 891 non-null int64&gt; Name 891 non-null object&gt; Sex 891 non-null object&gt; Age 714 non-null float64&gt; SibSp 891 non-null int64&gt; Parch 891 non-null int64&gt; Ticket 891 non-null object&gt; Fare 891 non-null float64&gt; Cabin 204 non-null object&gt; Embarked 889 non-null object&gt; dtypes: float64(2), int64(5), object(5)&gt; memory usage: 83.6+ KB&gt; None&gt; 数据清洗&emsp;&emsp;在我们开始搭建神经网络进行训练之前，数据清洗是必要的。这一步可以简单一些，不过如果想要得到更好的效果，清洗之前的数据分析还是不可少的。这里的数据分析，我就不再赘述了，给大家推荐一篇博客，上面有很详细的分析过程——Kaggle_Titanic生存预测 &emsp;&emsp;我们用随机森林算法，对’Age’的缺失值进行预测，当然这里也可以用其他回归算法，来进行预测 12345678910from sklearn.ensemble import RandomForestRegressorage = train_data[['Age','Survived','Fare','Parch','SibSp','Pclass']]age_notnull = age.loc[(train_data.Age.notnull())]age_isnull = age.loc[(train_data.Age.isnull())]X = age_notnull.values[:,1:]Y = age_notnull.values[:,0]rfr = RandomForestRegressor(n_estimators=1000,n_jobs=-1)rfr.fit(X,Y)predictAges = rfr.predict(age_isnull.values[:,1:])train_data.loc[(train_data.Age.isnull()),'Age'] = predictAges &emsp;&emsp;如果对上一步觉得太麻烦，或不喜欢的话，可以更简单一点，直接把缺失值都给0 1train_data = train_data.fillna(0) #缺失字段填0 &emsp;&emsp;然后，对于性别’Sex’，我们将其二值化’male’为0，’female’为1 12train_data.loc[train_data['Sex']=='male','Sex'] = 0train_data.loc[train_data['Sex']=='female','Sex'] = 1 &emsp;&emsp;我们把’Embarked’也填补下缺失值，因为缺失值较少，所以我们直接给它填补上它的众数’S’，把’S’，’C’，’Q’定性转换为0,1,2，这样便于机器进行学习 1234train_data['Embarked'] = train_data['Embarked'].fillna('S')train_data.loc[train_data['Embarked'] == 'S','Embarked'] = 0train_data.loc[train_data['Embarked'] == 'C','Embarked'] = 1train_data.loc[train_data['Embarked'] == 'Q','Embarked'] = 2 &emsp;&emsp;最后，把’Cabin’这个与生存关系不重要而且有效数据极少的标签丢掉，再加上一个’Deceased’，代表的是是否遇难，这一步很重要，很重要，很重要！我在做的时候没加这个，后面网络的y的标签我也只设了1，训练出的模型跟没训练一样，所有的都是0。发现的时候，死的心都有了╥﹏╥…（希望不会有初学者和我犯一样的错误 ToT ） 12train_data.drop(['Cabin'],axis=1,inplace=True)train_data['Deceased'] = train_data['Survived'].apply(lambda s: 1 - s) &emsp;&emsp;然后，我们再查看一下数据信息 1train_data.info() &emsp;&emsp;这次信息就整齐多了 123456789101112131415161718&gt; &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;&gt; RangeIndex: 891 entries, 0 to 890&gt; Data columns (total 12 columns):&gt; PassengerId 891 non-null int64&gt; Survived 891 non-null int64&gt; Pclass 891 non-null int64&gt; Name 891 non-null object&gt; Sex 891 non-null object&gt; Age 891 non-null float64&gt; SibSp 891 non-null int64&gt; Parch 891 non-null int64&gt; Ticket 891 non-null object&gt; Fare 891 non-null float64&gt; Embarked 891 non-null object&gt; Deceased 891 non-null int64&gt; dtypes: float64(2), int64(6), object(4)&gt; memory usage: 83.6+ KB&gt; 模型搭建&emsp;&emsp;现在我们把数据的X，Y进行分离，这里我们只选取了6个标签作为X，如果想让结果尽可能准确，请读者自行完善。 12dataset_X = train_data[['Sex','Age','Pclass','SibSp','Parch','Fare']]dataset_Y = train_data[['Deceased','Survived']] &emsp;&emsp;这里，我们进行训练集和验证集的划分，在训练过程中，我们可以更好的观察训练情况，避免过拟合 12345from sklearn.model_selection import train_test_splitX_train,X_val,Y_train,Y_val = train_test_split(dataset_X.as_matrix(), dataset_Y.as_matrix(), test_size = 0.2, random_state = 42) &emsp;&emsp;做完以上工作，我们就可以开始搭建神经网络了，这里，我搭建的是一个简单两层的神经网络，激活函数使用的是线性整流函数Relu，并使用了交叉验证和Adam优化器（也可以使用梯度下降进行优化），设置学习率为0.001 12345678910111213x = tf.placeholder(tf.float32,shape = [None,6],name = 'input')y = tf.placeholder(tf.float32,shape = [None,2],name = 'label')weights1 = tf.Variable(tf.random_normal([6,6]),name = 'weights1')bias1 = tf.Variable(tf.zeros([6]),name = 'bias1')a = tf.nn.relu(tf.matmul(x,weights1) + bias1)weights2 = tf.Variable(tf.random_normal([6,2]),name = 'weights2')bias2 = tf.Variable(tf.zeros([2]),name = 'bias2')z = tf.matmul(a,weights2) + bias2y_pred = tf.nn.softmax(z)cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y,logits=z))correct_pred = tf.equal(tf.argmax(y,1),tf.argmax(y_pred,1))acc_op = tf.reduce_mean(tf.cast(correct_pred,tf.float32))train_op = tf.train.AdamOptimizer(0.001).minimize(cost) &emsp;&emsp;下面开始训练，训练之前我先定义了个Saver，epoch为30次 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# 存档入口saver = tf.train.Saver()# 在Saver声明之后定义的变量将不会被存储# non_storable_variable = tf.Variable(777)ckpt_dir = './ckpt_dir'if not os.path.exists(ckpt_dir): os.makedirs(ckpt_dir)with tf.Session() as sess: tf.global_variables_initializer().run() ckpt = tf.train.latest_checkpoint(ckpt_dir) if ckpt: print('Restoring from checkpoint: %s' % ckpt) saver.restore(sess, ckpt) for epoch in range(30): total_loss = 0. for i in range(len(X_train)): feed_dict = &#123;x: [X_train[i]],y:[Y_train[i]]&#125; _,loss = sess.run([train_op,cost],feed_dict=feed_dict) total_loss +=loss print('Epoch: %4d, total loss = %.12f' % (epoch,total_loss)) if epoch % 10 == 0: accuracy = sess.run(acc_op,feed_dict=&#123;x:X_val,y:Y_val&#125;) print("Accuracy on validation set: %.9f" % accuracy) saver.save(sess, ckpt_dir + '/logistic.ckpt') print('training complete!') accuracy = sess.run(acc_op,feed_dict=&#123;x:X_val,y:Y_val&#125;) print("Accuracy on validation set: %.9f" % accuracy) pred = sess.run(y_pred,feed_dict=&#123;x:X_val&#125;) correct = np.equal(np.argmax(pred,1),np.argmax(Y_val,1)) numpy_accuracy = np.mean(correct.astype(np.float32)) print("Accuracy on validation set (numpy): %.9f" % numpy_accuracy) saver.save(sess, ckpt_dir + '/logistic.ckpt') ''' 测试数据的清洗和训练数据一样，两者可以共同完成 ''' # 读测试数据 test_data = pd.read_csv('test.csv') #数据清洗, 数据预处理 test_data.loc[test_data['Sex']=='male','Sex'] = 0 test_data.loc[test_data['Sex']=='female','Sex'] = 1 age = test_data[['Age','Sex','Parch','SibSp','Pclass']] age_notnull = age.loc[(test_data.Age.notnull())] age_isnull = age.loc[(test_data.Age.isnull())] X = age_notnull.values[:,1:] Y = age_notnull.values[:,0] rfr = RandomForestRegressor(n_estimators=1000,n_jobs=-1) rfr.fit(X,Y) predictAges = rfr.predict(age_isnull.values[:,1:]) test_data.loc[(test_data.Age.isnull()),'Age'] = predictAges test_data['Embarked'] = test_data['Embarked'].fillna('S') test_data.loc[test_data['Embarked'] == 'S','Embarked'] = 0 test_data.loc[test_data['Embarked'] == 'C','Embarked'] = 1 test_data.loc[test_data['Embarked'] == 'Q','Embarked'] = 2 test_data.drop(['Cabin'],axis=1,inplace=True) #特征选择 X_test = test_data[['Sex', 'Age', 'Pclass', 'SibSp', 'Parch', 'Fare']] #评估模型 predictions = np.argmax(sess.run(y_pred, feed_dict=&#123;x: X_test&#125;), 1) #保存结果 submission = pd.DataFrame(&#123; "PassengerId": test_data["PassengerId"], "Survived": predictions &#125;) submission.to_csv("titanic-submission.csv", index=False) &emsp;&emsp;我们把生成的提交文件在Kaggle官网上进行提交，Score为0.79425，效果还可以，不过还有很多需要改进的地方 参考文章 Kaggle_Titanic生存预测 — 详细流程吐血梳理 谷歌收购 Kaggle 为什么会震动三界（AI、机器学习、数据科学界）？ 《深度学习原理与TensorFlow实践》课程代码]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>Titanic</tag>
        <tag>Kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tensorflow实现Neural Style图像风格转移]]></title>
    <url>%2F2018%2F02%2F01%2FTensorflow_Neural_Style%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;刚开始接触TensorFlow，实践个小项目，也参考了一下其他博主的文章，希望大家提出宝贵意见。 文章中的代码和图片已上传到GitHub(https://github.com/Quanfita/Neural-Style)。 什么是图像风格迁移？&emsp;&emsp;以下每一张图都是一种不同的艺术风格。从直观上我们很难找出这些不同风格的图片有什么可以用准确的语言来描述的去别和联系。如何要把一个图像的风格变成另一种风格更是难以定义的问题。作为程序员，又应该如何去用代码去实现？ (图片来自https://zhuanlan.zhihu.com/p/26746283) &emsp;&emsp;在神经网络出现之后，Gatys的几篇论文中提出了一些解决方法，让机器能够理解风格这样模糊的概念：Texture Synthesis Using Convolutional Neural Networks(1505.07376)，A Neural Algorithm of Artistic Style(1508.06576)，Preserving Color in Neural Artistic Style Transfer(1606.05897v1)。&emsp;&emsp;Neural Style成为了一个非常有意思的深度学习应用：输入一张代表内容的图片和一张代表风格的图片，深度学习网络会输出一张融合了这个风格和内容的新作品。&emsp;&emsp;TensorFlow是Google开源的最流行的深度学习框架。在GitHub上有开源的TensorFlow实现的Neural Style代码(地址)。&emsp;&emsp;我们还是先看一下Neural Style这篇论文介绍了怎样的方法来解决这个问题的吧。（以下为论文中的主要内容） 论文内容首先，有几个概念： 卷积神经网络（CNN）&emsp;&emsp;一张输入的图片，会在卷积神经网的各层以一系列过滤后的图像表示。随着层级的一层一层处理，过滤后的图片会通过向下取样的方式不断减小（比如通过池化层）。这使得每层神经网的神经元数量会原来越小。（也就是层越深，因为经过了池化层，单个feature map会越来越小，于是每层中的神经元数量也会越来越少）。 内容重塑&emsp;&emsp;在只知道该层的输出结果，通过重塑输入图像，可以看到CNN不同阶段的图像信息。在原始的VGG-Network上的5个层级:conv1_1,conv1_2,conv1_3,conv1_4,conv1_5上重塑了输入的图像。 &emsp;&emsp;输入的图像是上图中的一排房子，5个层级分别是a,b,c,d,e。在较低层的图像重构（abc）非常完美；在较高层（de），详细的像素信息丢失了。也就是说，这样做提取出了图片的内容，但是抛弃了像素。 风格重塑&emsp;&emsp;在原始的CNN表征之上(feature map)，建立了一个新的特征空间(feature space)，这个特征空间捕获了输入图像的风格。风格的表征计算了在CNN的不同层级间不用特征之间的相似性。通过在CNN隐层的不同的子集上建立起来的风格的表征，我们重构输入图像的风格。如此，便创造了与输入图像一致的风格而丢弃了全局的内容。 &emsp;&emsp;这篇论文的关键是对于内容和风格的表征在CNN中是可以分开的。可以独立地操作两个表征来产生新的，可感知意义的图像。论文中生成一个图片，混合了来自两个不同图片的内容和风格表征。 &emsp;&emsp;一张图片，它同时符合照片的内容表征，和艺术画的风格表征。原始照片的整体布局被保留了，而颜色和局部的结构却由艺术画提供。 &emsp;&emsp;风格表征是一个多尺度的表征，包括了神经网络的多层。在图2中看到的图像，风格的表征包含了整个神经网络的层级。而风格也可以只包含一小部分较低的层级。（见下面的图，第一行是卷基层1，第5行是卷基层5的输出）。若符合了较高层级中的风格表征，局部的图像结构会大规模地增加，从而使得图像在视觉上更平滑与连贯。 &emsp;&emsp;简言之，作者直接把局部特征看做近似的图片内容，这样就得到了一个把图片内容和图片风格（说白了就是纹理）分开的系统，剩下的就是把一个图片的内容和另一个图片的风格合起来。 &emsp;&emsp;图像的内容和风格并不能被完全地分解开。当风格与内容来自不同的两个图像时，这个被合成的新图像并不存在在同一时刻完美地符合了两个约束。但是，在图像合成中最小化的损失函数分别包括了内容与风格两者，它们被很好地分开了。所以，我们可以平滑地将重点既放在内容上又放在风格上 方法：&emsp;&emsp;假设某一层得到的响应是 F^{l} \in R^{N_{l}\times M_{l}} ,其中 N_{l} 为 l 层filter的个数，M_{l}为filter的大小。F_{ij}^{l}表示的是第 l 层第 i 个filter在位置j的输出。 &emsp;&emsp;\vec{p} 代表提供Content的图像，\vec{x} 表示生成的图像，P^l和F^l分别代表它们对于$l$层的响应，因此l层的Content Loss： L_{content}(\vec{p},\vec{x},l) = \frac{1}{2}\sum_{i,j}{(F_{ij}^{l}-P_{ij}^{l})^{2}}&emsp;&emsp;上面我们提到了，某一层的Style可以用G^{l}\in R^{N_{l}\times N_{l}}来表示，其中 ，即不同filter响应的内积。&emsp;&emsp;\vec{a} 代表提供Style的图像，\vec{x} 表示生成的图像，Al和Gl分别代表它们对于l层的Style，因此l层的Style Loss： E_{l} = \frac{1}{4N_{l}^{2}M_{l}^{2}}\sum_{i,j}{(G_{ij}^{l}-A_{ij}^{l})^{2}}&emsp;&emsp;文章中作者使用了多层来表达Style，所以总的Style Loss为： L_{style}(\vec{a},\vec{x}) = \sum_{l=0}^{L}{w_{l}E_{l}}&emsp;&emsp;定义好了两个Loss之后，就利用优化方法来最小化总的Loss： L_{total}(\vec{p},\vec{a},\vec{x}) = αL_{content}(\vec{p},\vec{x}) + βL_{style}(\vec{a},\vec{x})&emsp;&emsp;其中的α和β分别代表了对Content和Style的侧重，文中作者也对α/β取值的效果进行了实验。 &emsp;&emsp;最终迭代出来的\vec{x}​ 既具有\vec{p}​ 的Content，同时也具有\vec{a}​的Style。实验结果也证明了作者文中方法的有效性。 &emsp;&emsp; α和 β分别是内容和风格在图像重构中的权重因子。α和β分别是内容和风格两个损失的权重。α+β=1.如果α比较大，那么输出后的新图会更多地倾向于内容上的吻合，如果β较大，那么输出的新图会更倾向于与风格的吻合。这两个参数是一个trade-off,可以根据自己需求去调整最好的平衡。论文的作者给出了它调整参数的不同结果，如下图，从左到右四列分别是α/β = 10^{-5}, 10^{-4},10^{-3}, 10^{-2}.也就是α越来越大，的确图像也越来越清晰地呈现出了照片的内容。 代码实现环境介绍 Python3.6 TensorFlow 1.2 VGG19 CPU i5-6200U(笔记本) 下面，简单介绍以下VGG19网络： VGG19 网络结构 &emsp;&emsp;每一层神经网络都会利用上一层的输出来进一步提取更加复杂的特征，直到复杂到能被用来识别物体为止，所以每一层都可以被看做很多个局部特征的提取器。VGG19 在物体识别方面的精度甩了之前的算法一大截，之后的物体识别系统也基本都改用深度学习了。VGG19结构如下： (图片来自https://zhuanlan.zhihu.com/p/26746283) 代码详解： TensorFlow版本的源码主要包含了三个文件：neural_style.py, stylize.py和 vgg.py。 neural_style.py：外部接口函数，定义了函数的主要参数以及部分参数的默认值，包含对图像的读取和存贮，对输入图像进行resize，权值分配等操作，并将参数以及resize的图片传入stylize.py中。 stylize.py：核心代码，包含了训练、优化等过程。 vgg.py：定义了网络模型以及相关的运算。 我们可以使用下面的代码vgg.py读取VGG-19神经网络，用于构造Neural Style模型。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import tensorflow as tfimport numpy as npimport scipy.io#需要使用神经网络层VGG19_LAYERS = ( 'conv1_1', 'relu1_1', 'conv1_2', 'relu1_2', 'pool1', 'conv2_1', 'relu2_1', 'conv2_2', 'relu2_2', 'pool2', 'conv3_1', 'relu3_1', 'conv3_2', 'relu3_2', 'conv3_3', 'relu3_3', 'conv3_4', 'relu3_4', 'pool3', 'conv4_1', 'relu4_1', 'conv4_2', 'relu4_2', 'conv4_3', 'relu4_3', 'conv4_4', 'relu4_4', 'pool4', 'conv5_1', 'relu5_1', 'conv5_2', 'relu5_2', 'conv5_3', 'relu5_3', 'conv5_4', 'relu5_4')##我们需要的信息是每层神经网络的kernels和biasdef load_net(data_path): data = scipy.io.loadmat(data_path) if not all(i in data for i in ('layers', 'classes', 'normalization')): raise ValueError("You're using the wrong VGG19 data. Please follow the instructions in the README to download the correct data.") mean = data['normalization'][0][0][0] mean_pixel = np.mean(mean, axis=(0, 1)) weights = data['layers'][0] return weights, mean_pixeldef net_preloaded(weights, input_image, pooling): net = &#123;&#125; current = input_image for i, name in enumerate(VGG19_LAYERS): kind = name[:4] if kind == 'conv': kernels, bias = weights[i][0][0][0][0] kernels = np.transpose(kernels, (1, 0, 2, 3)) bias = bias.reshape(-1) current = _conv_layer(current, kernels, bias) elif kind == 'relu': current = tf.nn.relu(current) elif kind == 'pool': current = _pool_layer(current, pooling) net[name] = current assert len(net) == len(VGG19_LAYERS) return netdef _conv_layer(input, weights, bias): conv = tf.nn.conv2d(input, tf.constant(weights), strides=(1, 1, 1, 1), padding='SAME') return tf.nn.bias_add(conv, bias)def _pool_layer(input, pooling): if pooling == 'avg': return tf.nn.avg_pool(input, ksize=(1, 2, 2, 1), strides=(1, 2, 2, 1), padding='SAME') else: return tf.nn.max_pool(input, ksize=(1, 2, 2, 1), strides=(1, 2, 2, 1), padding='SAME')def preprocess(image, mean_pixel): return image - mean_pixeldef unprocess(image, mean_pixel): return image + mean_pixel 在neural_style.py中我们可以看到，定义了非常长多的参数和外部接口。import osimport numpy as npimport scipy.miscfrom stylize import stylizeimport mathfrom argparse import ArgumentParserfrom PIL import Image# default argumentsCONTENT_WEIGHT = 5e0CONTENT_WEIGHT_BLEND = 1STYLE_WEIGHT = 5e2TV_WEIGHT = 1e2STYLE_LAYER_WEIGHT_EXP = 1LEARNING_RATE = 1e1BETA1 = 0.9BETA2 = 0.999EPSILON = 1e-08STYLE_SCALE = 1.0ITERATIONS = 1000VGG_PATH = 'imagenet-vgg-verydeep-19.mat'POOLING = 'max'def build_parser(): parser = ArgumentParser() parser.add_argument('--content', dest='content', help='content image', metavar='CONTENT', required=True) parser.add_argument('--styles', dest='styles', nargs='+', help='one or more style images', metavar='STYLE', required=True) parser.add_argument('--output', dest='output', help='output path', metavar='OUTPUT', required=True) parser.add_argument('--iterations', type=int, dest='iterations', help='iterations (default %(default)s)', metavar='ITERATIONS', default=ITERATIONS) parser.add_argument('--print-iterations', type=int, dest='print_iterations', help='statistics printing frequency', metavar='PRINT_ITERATIONS') parser.add_argument('--checkpoint-output', dest='checkpoint_output', help='checkpoint output format, e.g. output%%s.jpg', metavar='OUTPUT') parser.add_argument('--checkpoint-iterations', type=int, dest='checkpoint_iterations', help='checkpoint frequency', metavar='CHECKPOINT_ITERATIONS') parser.add_argument('--width', type=int, dest='width', help='output width', metavar='WIDTH') parser.add_argument('--style-scales', type=float, dest='style_scales', nargs='+', help='one or more style scales', metavar='STYLE_SCALE') parser.add_argument('--network', dest='network', help='path to network parameters (default %(default)s)', metavar='VGG_PATH', default=VGG_PATH) parser.add_argument('--content-weight-blend', type=float, dest='content_weight_blend', help='content weight blend, conv4_2 * blend + conv5_2 * (1-blend) (default %(default)s)', metavar='CONTENT_WEIGHT_BLEND', default=CONTENT_WEIGHT_BLEND) parser.add_argument('--content-weight', type=float, dest='content_weight', help='content weight (default %(default)s)', metavar='CONTENT_WEIGHT', default=CONTENT_WEIGHT) parser.add_argument('--style-weight', type=float, dest='style_weight', help='style weight (default %(default)s)', metavar='STYLE_WEIGHT', default=STYLE_WEIGHT) parser.add_argument('--style-layer-weight-exp', type=float, dest='style_layer_weight_exp', help='style layer weight exponentional increase - weight(layer&lt;n+1&gt;) = weight_exp*weight(layer&lt;n&gt;) (default %(default)s)', metavar='STYLE_LAYER_WEIGHT_EXP', default=STYLE_LAYER_WEIGHT_EXP) parser.add_argument('--style-blend-weights', type=float, dest='style_blend_weights', help='style blending weights', nargs='+', metavar='STYLE_BLEND_WEIGHT') parser.add_argument('--tv-weight', type=float, dest='tv_weight', help='total variation regularization weight (default %(default)s)', metavar='TV_WEIGHT', default=TV_WEIGHT) parser.add_argument('--learning-rate', type=float, dest='learning_rate', help='learning rate (default %(default)s)', metavar='LEARNING_RATE', default=LEARNING_RATE) parser.add_argument('--beta1', type=float, dest='beta1', help='Adam: beta1 parameter (default %(default)s)', metavar='BETA1', default=BETA1) parser.add_argument('--beta2', type=float, dest='beta2', help='Adam: beta2 parameter (default %(default)s)', metavar='BETA2', default=BETA2) parser.add_argument('--eps', type=float, dest='epsilon', help='Adam: epsilon parameter (default %(default)s)', metavar='EPSILON', default=EPSILON) parser.add_argument('--initial', dest='initial', help='initial image', metavar='INITIAL') parser.add_argument('--initial-noiseblend', type=float, dest='initial_noiseblend', help='ratio of blending initial image with normalized noise (if no initial image specified, content image is used) (default %(default)s)', metavar='INITIAL_NOISEBLEND') parser.add_argument('--preserve-colors', action='store_true', dest='preserve_colors', help='style-only transfer (preserving colors) - if color transfer is not needed') parser.add_argument('--pooling', dest='pooling', help='pooling layer configuration: max or avg (default %(default)s)', metavar='POOLING', default=POOLING) return parserdef main(): parser = build_parser() options = parser.parse_args() if not os.path.isfile(options.network): parser.error("Network %s does not exist. (Did you forget to download it?)" % options.network) content_image = imread(options.content) style_images = [imread(style) for style in options.styles] width = options.width if width is not None: new_shape = (int(math.floor(float(content_image.shape[0]) / content_image.shape[1] * width)), width) content_image = scipy.misc.imresize(content_image, new_shape) target_shape = content_image.shape for i in range(len(style_images)): style_scale = STYLE_SCALE if options.style_scales is not None: style_scale = options.style_scales[i] style_images[i] = scipy.misc.imresize(style_images[i], style_scale * target_shape[1] / style_images[i].shape[1]) style_blend_weights = options.style_blend_weights if style_blend_weights is None: # default is equal weights style_blend_weights = [1.0/len(style_images) for _ in style_images] else: total_blend_weight = sum(style_blend_weights) style_blend_weights = [weight/total_blend_weight for weight in style_blend_weights] initial = options.initial if initial is not None: initial = scipy.misc.imresize(imread(initial), content_image.shape[:2]) # Initial guess is specified, but not noiseblend - no noise should be blended if options.initial_noiseblend is None: options.initial_noiseblend = 0.0 else: # Neither inital, nor noiseblend is provided, falling back to random generated initial guess if options.initial_noiseblend is None: options.initial_noiseblend = 1.0 if options.initial_noiseblend &lt; 1.0: initial = content_image if options.checkpoint_output and "%s" not in options.checkpoint_output: parser.error("To save intermediate images, the checkpoint output " "parameter must contain `%s` (e.g. `foo%s.jpg`)") for iteration, image in stylize( network=options.network, initial=initial, initial_noiseblend=options.initial_noiseblend, content=content_image, styles=style_images, preserve_colors=options.preserve_colors, iterations=options.iterations, content_weight=options.content_weight, content_weight_blend=options.content_weight_blend, style_weight=options.style_weight, style_layer_weight_exp=options.style_layer_weight_exp, style_blend_weights=style_blend_weights, tv_weight=options.tv_weight, learning_rate=options.learning_rate, beta1=options.beta1, beta2=options.beta2, epsilon=options.epsilon, pooling=options.pooling, print_iterations=options.print_iterations, checkpoint_iterations=options.checkpoint_iterations ): output_file = None combined_rgb = image if iteration is not None: if options.checkpoint_output: output_file = options.checkpoint_output % iteration else: output_file = options.output if output_file: imsave(output_file, combined_rgb)def imread(path): img = scipy.misc.imread(path).astype(np.float) if len(img.shape) == 2: # grayscale img = np.dstack((img,img,img)) elif img.shape[2] == 4: # PNG with alpha channel img = img[:,:,:3] return imgdef imsave(path, img): img = np.clip(img, 0, 255).astype(np.uint8) Image.fromarray(img).save(path, quality=95)if __name__ == '__main__': main() 核心代码stylize.py，详解如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223# Copyright (c) 2015-2017 Anish Athalye. Released under GPLv3.import vggimport tensorflow as tfimport numpy as npfrom sys import stderrfrom PIL import ImageCONTENT_LAYERS = (&apos;relu4_2&apos;, &apos;relu5_2&apos;)STYLE_LAYERS = (&apos;relu1_1&apos;, &apos;relu2_1&apos;, &apos;relu3_1&apos;, &apos;relu4_1&apos;, &apos;relu5_1&apos;)try: reduceexcept NameError: from functools import reducedef stylize(network, initial, initial_noiseblend, content, styles, preserve_colors, iterations, content_weight, content_weight_blend, style_weight, style_layer_weight_exp, style_blend_weights, tv_weight, learning_rate, beta1, beta2, epsilon, pooling, print_iterations=None, checkpoint_iterations=None): &quot;&quot;&quot; Stylize images. This function yields tuples (iteration, image); `iteration` is None if this is the final image (the last iteration). Other tuples are yielded every `checkpoint_iterations` iterations. :rtype: iterator[tuple[int|None,image]] &quot;&quot;&quot; #content.shape是三维（height, width, channel），这里将维度变成（1, height, width, channel）为了与后面保持一致。 shape = (1,) + content.shape style_shapes = [(1,) + style.shape for style in styles] content_features = &#123;&#125; style_features = [&#123;&#125; for _ in styles] vgg_weights, vgg_mean_pixel = vgg.load_net(network) layer_weight = 1.0 style_layers_weights = &#123;&#125; for style_layer in STYLE_LAYERS: style_layers_weights[style_layer] = layer_weight layer_weight *= style_layer_weight_exp # normalize style layer weights layer_weights_sum = 0 for style_layer in STYLE_LAYERS: layer_weights_sum += style_layers_weights[style_layer] for style_layer in STYLE_LAYERS: style_layers_weights[style_layer] /= layer_weights_sum #首先创建一个image的占位符，然后通过eval()的feed_dict将content_pre传给image，启动net的运算过程，得到了content的feature maps # compute content features in feedforward mode g = tf.Graph() with g.as_default(), g.device(&apos;/cpu:0&apos;), tf.Session() as sess: image = tf.placeholder(&apos;float&apos;, shape=shape) net = vgg.net_preloaded(vgg_weights, image, pooling) content_pre = np.array([vgg.preprocess(content, vgg_mean_pixel)]) for layer in CONTENT_LAYERS: content_features[layer] = net[layer].eval(feed_dict=&#123;image: content_pre&#125;) # compute style features in feedforward mode for i in range(len(styles)): g = tf.Graph() with g.as_default(), g.device(&apos;/cpu:0&apos;), tf.Session() as sess: image = tf.placeholder(&apos;float&apos;, shape=style_shapes[i]) net = vgg.net_preloaded(vgg_weights, image, pooling) style_pre = np.array([vgg.preprocess(styles[i], vgg_mean_pixel)]) for layer in STYLE_LAYERS: features = net[layer].eval(feed_dict=&#123;image: style_pre&#125;) features = np.reshape(features, (-1, features.shape[3])) gram = np.matmul(features.T, features) / features.size style_features[i][layer] = gram initial_content_noise_coeff = 1.0 - initial_noiseblend # make stylized image using backpropogation with tf.Graph().as_default(): if initial is None: noise = np.random.normal(size=shape, scale=np.std(content) * 0.1) initial = tf.random_normal(shape) * 0.256 else: initial = np.array([vgg.preprocess(initial, vgg_mean_pixel)]) initial = initial.astype(&apos;float32&apos;) noise = np.random.normal(size=shape, scale=np.std(content) * 0.1) initial = (initial) * initial_content_noise_coeff + (tf.random_normal(shape) * 0.256) * (1.0 - initial_content_noise_coeff) &apos;&apos;&apos; image = tf.Variable(initial)初始化了一个TensorFlow的变量，即为我们需要训练的对象。注意这里我们训练的对象是一张图像，而不是weight和bias。 &apos;&apos;&apos; image = tf.Variable(initial) net = vgg.net_preloaded(vgg_weights, image, pooling) # content loss content_layers_weights = &#123;&#125; content_layers_weights[&apos;relu4_2&apos;] = content_weight_blend content_layers_weights[&apos;relu5_2&apos;] = 1.0 - content_weight_blend content_loss = 0 content_losses = [] for content_layer in CONTENT_LAYERS: content_losses.append(content_layers_weights[content_layer] * content_weight * (2 * tf.nn.l2_loss( net[content_layer] - content_features[content_layer]) / content_features[content_layer].size)) content_loss += reduce(tf.add, content_losses) # style loss style_loss = 0 &apos;&apos;&apos; 由于style图像可以输入多幅，这里使用for循环。同样的，将style_pre传给image占位符，启动net运算，得到了style的feature maps，由于style为不同filter响应的内积，因此在这里增加了一步：gram = np.matmul(features.T, features) / features.size，即为style的feature。 &apos;&apos;&apos; for i in range(len(styles)): style_losses = [] for style_layer in STYLE_LAYERS: layer = net[style_layer] _, height, width, number = map(lambda i: i.value, layer.get_shape()) size = height * width * number feats = tf.reshape(layer, (-1, number)) gram = tf.matmul(tf.transpose(feats), feats) / size style_gram = style_features[i][style_layer] style_losses.append(style_layers_weights[style_layer] * 2 * tf.nn.l2_loss(gram - style_gram) / style_gram.size) style_loss += style_weight * style_blend_weights[i] * reduce(tf.add, style_losses) # total variation denoising tv_y_size = _tensor_size(image[:,1:,:,:]) tv_x_size = _tensor_size(image[:,:,1:,:]) tv_loss = tv_weight * 2 * ( (tf.nn.l2_loss(image[:,1:,:,:] - image[:,:shape[1]-1,:,:]) / tv_y_size) + (tf.nn.l2_loss(image[:,:,1:,:] - image[:,:,:shape[2]-1,:]) / tv_x_size)) # overall loss &apos;&apos;&apos; 接下来定义了Content Loss和Style Loss，结合文中的公式很容易看懂，在代码中，还增加了total variation denoising，因此总的loss = content_loss + style_loss + tv_loss &apos;&apos;&apos; loss = content_loss + style_loss + tv_loss # optimizer setup #创建train_step，使用Adam优化器，优化对象是上面的loss #优化过程，通过迭代使用train_step来最小化loss，最终得到一个best，即为训练优化的结果 train_step = tf.train.AdamOptimizer(learning_rate, beta1, beta2, epsilon).minimize(loss) def print_progress(): stderr.write(&apos; content loss: %g\n&apos; % content_loss.eval()) stderr.write(&apos; style loss: %g\n&apos; % style_loss.eval()) stderr.write(&apos; tv loss: %g\n&apos; % tv_loss.eval()) stderr.write(&apos; total loss: %g\n&apos; % loss.eval()) # optimization best_loss = float(&apos;inf&apos;) best = None with tf.Session() as sess: sess.run(tf.global_variables_initializer()) stderr.write(&apos;Optimization started...\n&apos;) if (print_iterations and print_iterations != 0): print_progress() for i in range(iterations): stderr.write(&apos;Iteration %4d/%4d\n&apos; % (i + 1, iterations)) train_step.run() last_step = (i == iterations - 1) if last_step or (print_iterations and i % print_iterations == 0): print_progress() if (checkpoint_iterations and i % checkpoint_iterations == 0) or last_step: this_loss = loss.eval() if this_loss &lt; best_loss: best_loss = this_loss best = image.eval() img_out = vgg.unprocess(best.reshape(shape[1:]), vgg_mean_pixel) if preserve_colors and preserve_colors == True: original_image = np.clip(content, 0, 255) styled_image = np.clip(img_out, 0, 255) # Luminosity transfer steps: # 1. Convert stylized RGB-&gt;grayscale accoriding to Rec.601 luma (0.299, 0.587, 0.114) # 2. Convert stylized grayscale into YUV (YCbCr) # 3. Convert original image into YUV (YCbCr) # 4. Recombine (stylizedYUV.Y, originalYUV.U, originalYUV.V) # 5. Convert recombined image from YUV back to RGB # 1 styled_grayscale = rgb2gray(styled_image) styled_grayscale_rgb = gray2rgb(styled_grayscale) # 2 styled_grayscale_yuv = np.array(Image.fromarray(styled_grayscale_rgb.astype(np.uint8)).convert(&apos;YCbCr&apos;)) # 3 original_yuv = np.array(Image.fromarray(original_image.astype(np.uint8)).convert(&apos;YCbCr&apos;)) # 4 w, h, _ = original_image.shape combined_yuv = np.empty((w, h, 3), dtype=np.uint8) combined_yuv[..., 0] = styled_grayscale_yuv[..., 0] combined_yuv[..., 1] = original_yuv[..., 1] combined_yuv[..., 2] = original_yuv[..., 2] # 5 img_out = np.array(Image.fromarray(combined_yuv, &apos;YCbCr&apos;).convert(&apos;RGB&apos;)) yield ( (None if last_step else i), img_out )def _tensor_size(tensor): from operator import mul return reduce(mul, (d.value for d in tensor.get_shape()), 1)def rgb2gray(rgb): return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])def gray2rgb(gray): w, h = gray.shape rgb = np.empty((w, h, 3), dtype=np.float32) rgb[:, :, 2] = rgb[:, :, 1] = rgb[:, :, 0] = gray return rgb 实现效果我们的原图是这样的： 风格是这样的： 我们在cmd命令行中打入下面代码(我的图片都放在examples/下）： python neural_style.py —content examples/cat.jpg —styles examples/2-style1.jpg —output y-output.jpg 然后我们看到计算机已经开始进行风格转移: （ps:我可怜的笔记本不停地跑了两个小时） 转移结束后我们可以看到输出的图片是这样的： Neural Style很有趣，我们可以通过改变参数去做很多风格的测试，会有不一样的效果。 参考资料 图像风格迁移 (Neural Style) 简史 TensorFlow实战：Neural Style 【Paper翻译】A Neural Algorithm Artistic Style]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
        <tag>Neural Style</tag>
        <tag>Neural Networks</tag>
      </tags>
  </entry>
</search>
